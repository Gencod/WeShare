{"version":3,"sources":["../static/js/0.dceb80be.chunk.js","../node_modules/gd-sprest/build/index.js","../node_modules/gd-sprest/build/utils/index.js","../node_modules/gd-sprest/build/lib/index.js","../node_modules/gd-sprest/build/mapper/index.js","../node_modules/gd-sprest/build/helper/index.js","../node_modules/gd-sprest/build/lib/web.js","../node_modules/gd-sprest/build/helper/spCfg.js","../node_modules/gd-sprest/build/helper/parse.js","../node_modules/gd-sprest/build/helper/taxonomy.js","../node_modules/gd-sprest/build/helper/app.js","../node_modules/gd-sprest/build/lib/contextInfo.js","../node_modules/gd-sprest/build/utils/requestType.js","../node_modules/gd-sprest/build/utils/baseHelper.js","../node_modules/gd-sprest/build/mapper/mapper.js","../node_modules/gd-sprest/build/mapper/audit.js","../node_modules/gd-sprest/build/mapper/eventReceiver.js","../node_modules/gd-sprest/build/mapper/file.js","../node_modules/gd-sprest/build/mapper/list.js","../node_modules/gd-sprest/build/mapper/navigation.js","../node_modules/gd-sprest/build/mapper/propertyValues.js","../node_modules/gd-sprest/build/mapper/search.js","../node_modules/gd-sprest/build/mapper/security.js","../node_modules/gd-sprest/build/mapper/site.js","../node_modules/gd-sprest/build/mapper/social.js","../node_modules/gd-sprest/build/mapper/user.js","../node_modules/gd-sprest/build/mapper/userCustomAction.js","../node_modules/gd-sprest/build/mapper/sptypes.js","../node_modules/gd-sprest/build/mapper/types/index.js","../node_modules/gd-sprest/build/mapper/types/complexTypes.js","../node_modules/gd-sprest/build/mapper/types/results.js","../node_modules/gd-sprest/build/mapper/types/sptypes.js","../node_modules/gd-sprest/build/utils/baseRequest.js","../node_modules/gd-sprest/build/utils/baseExecution.js","../node_modules/gd-sprest/build/utils/base.js","../node_modules/gd-sprest/build/utils/batch.js","../node_modules/gd-sprest/build/utils/methodInfo.js","../node_modules/gd-sprest/build/utils/oData.js","../node_modules/gd-sprest/build/utils/targetInfo.js","../node_modules/gd-sprest/build/utils/xhrRequest.js","../node_modules/gd-sprest/build/utils/types/index.js","../node_modules/gd-sprest/build/lib/jslink.js","../node_modules/gd-sprest/build/lib/list.js","../node_modules/gd-sprest/build/lib/navigation.js","../node_modules/gd-sprest/build/lib/peopleManager.js","../node_modules/gd-sprest/build/lib/peoplePicker.js","../node_modules/gd-sprest/build/lib/profileLoader.js","../node_modules/gd-sprest/build/lib/search.js","../node_modules/gd-sprest/build/lib/site.js","../node_modules/gd-sprest/build/lib/socialFeed.js","../node_modules/gd-sprest/build/lib/userProfile.js","../node_modules/gd-sprest/build/lib/utility.js","../node_modules/gd-sprest/build/lib/types/index.js","../node_modules/gd-sprest/build/helper/dependencies.js","../node_modules/gd-sprest/build/helper/fieldSchemaXML.js","../node_modules/gd-sprest/build/helper/spCfgTypes.js","../node_modules/gd-sprest/build/helper/jslink.js","../node_modules/gd-sprest/build/helper/listForm.js","../node_modules/gd-sprest/build/helper/listFormField.js","../node_modules/gd-sprest/build/helper/loader.js","../node_modules/gd-sprest/build/helper/ribbonLink.js","../node_modules/gd-sprest/build/helper/sbLink.js","../node_modules/gd-sprest/build/helper/webpart.js","../node_modules/gd-sprest/build/helper/sp.js","../node_modules/gd-sprest/build/helper/types/index.js","../node_modules/gd-sprest/build/types.js","../node_modules/gd-sprest/build/rest.js"],"names":["webpackJsonp","857","module","exports","__webpack_require__","__export","m","p","hasOwnProperty","Object","defineProperty","value","Helper","mapper_1","SPTypes","Types","858","859","860","Mapper","861","SP","862","__extends","this","extendStatics","setPrototypeOf","__proto__","Array","d","b","__","constructor","prototype","create","utils_1","_Web","_super","url","targetInfo","_this","call","defaultToWebFl","endpoint","addMethods","__metadata","type","Base","Web","863","lib_1","_1","_SPConfig","cfg","webUrl","installByType","cfgType","callback","targetName","install","uninstallByType","uninstall","createContentTypes","contentTypes","cfgContentTypes","Promise","resolve","reject","length","i","cfgContentType","ct","isInCollection","Name","results","console","log","ContentType","ParentName","ParentWebUrl","_webUrl","ContentTypes","query","Filter","execute","parent","addAvailableContentType","Id","StringValue","existsFl","onCreated","error","response","add","Description","Group","done","cfgUpdate","updateFl","JSlink","JSLink","update","onUpdated","createFields","fields","cfgFields","cfgField","field","name","onFieldCreated_1","InternalName","FieldSchemaXML","then","schemas","i_1","createFieldAsXml","createLists","lists","cfgLists","_cfgType","SPCfgType","Lists","cfgList","_targetName","ListInformation","Title","toLowerCase","listInfo_1","listName_1","replace","list","updateLists","createUserCustomActions","customActions","cfgCustomActions","SiteUserCustomActions","WebUserCustomActions","cfgCustomAction","ca","createViews","views","cfgViews","cfgView","ViewName","ViewQuery","view","updateViews","createWebParts","cfgWebParts","_configuration","WebPartCfg","WebParts","ContextInfo","siteServerRelativeUrl","RootFolder","Expand","folder","cfgWebPart","FileName","file","Files","xml","XML","trim","buffer","ArrayBuffer","bufferView","Uint16Array","j","charCodeAt","Items","items","installSite","CustomActionCfg","Site","site","UserCustomActions","installWeb","web","Fields","ListCfg","key","collection","valueLower","keyValue","removeContentTypes","delete","removeFields","removeLists","removeUserCustomActions","removeWebParts","files","request","idx","TitleFieldDisplayName","CustomFields","Views","ViewInformation","counter","getByTitle","ViewFields","removeAllViewFields","i_2","addViewField","props","args","_i","arguments","uninstallSite","uninstallWeb","SPConfig","864","parse","jsonString","obj","JSON","base","status","updateDataObject","_a","865","Taxonomy","findById","term","termId","info","id","prop","childTerm","findByName","termName","getTerms","termSet","termSetTerms","terms","push","description","get_description","get_id","toString","get_name","path","pathAsString","get_customProperties","enumerator","getEnumerator","moveNext","get_current","get_pathOfTerm","split","sort","a","getTermGroup","groupName","loadScripts","context","ClientContext","session","TaxonomySession","getTaxonomySession","termStores_1","get_termStores","load","executeQueryAsync","termStore","termGroup","get_groups","getByName","get_message","getDefaultSiteCollectionTermStore","getSiteCollectionGroup","get_site","getTermsById","termStoreId","termSetId","getById","getTermSet","getAllTerms","getTermSetById","toObject","reason","getTermsFromDefaultSC","termSetName","get_termSets","getTermSetFromDefaultSC","getTermsByGroupName","getTermSetByGroupName","SOD","executeFunc","registerSod","Utilities","Utility","getLayoutsPageUrl","toArray","getChildTerms","toFieldValue","termInfo","Label","TermGuid","WssId","toFieldMultiValue","root","node","parent_1","splice","866","App","copyFileToHostWeb","fileUrl","dstFolder","overwriteFl","rootWebFl","srcFile","window","$REST","DefaultRequestToHostFl","isAppWeb","getFolder","fileName","dstFileUrl","UrlBuilder","urlCombine","ServerRelativeUrl","srcFileUrl_1","webServerRelativeUrl","substr","getFileByServerRelativeUrl","Exists","checkout","content","checkin","publish","copyFilesToHostWeb","fileUrls","folderUrls","folders","createSubFolders","subFolderUrl","subFolderName","Folders","subFolder","addSubFolders","folderUrl","createFl","getFolderByServerRelativeUrl","removeEmptyFolders","prevFolderUrl","folderUrls_1","folderNames","folderNames_1","folderName","ItemCount","removeFile","removeFiles","867","_ContextInfo","get","isHubSite","isSPO","siteAbsoluteUrl","userId","webAbsoluteUrl","enumerable","configurable","_contextInfo","aadInstanceUrl","aadTenantId","alertsEnabled","allowSilverlightPrompt","canUserCreateMicrosoftForm","canUserCreateVisioDrawing","cdnPrefix","clientServerTimeDelta","CorrelationId","crossDomainPhotosEnabled","currentCultureName","currentLanguage","currentUICultureName","departmentId","DesignPackageId","disableAppViews","disableFlows","document","env","farmLabel","fid","formDigestTimeoutSeconds","formDigestValue","groupColor","groupHasHomepage","groupId","groupType","guestsEnabled","hasManageWebPermissions","hasPendingWebTemplateExtension","hideSyncButtonOnODB","hubSiteId","idleSessionSignOutEnabled","isAnonymousGuestUser","isEmailAuthenticatinoGuesUser","isExternalGuestUser","isMultiGeoTenant","isNoScriptEnabled","isSiteAdmin","isTenantDevSite","isWebWelcomePage","layoutsUrl","listBaseTemplate","listId","listTitle","listPermMask","listUrl","maximumFileSize","nid","openInClient","pageItemId","pageListId","pagePermMask","pagePersonalizationScope","preferUserTimeZone","PreviewFeaturesEnabled","profileUrl","PublishingFeatureOn","RecycleBinItemCount","serverRedirectedUrl","serverRequestPath","serverTime","showNGSCDialogForSyncOnODB","showNGSCDialogForSyncOnTS","siteClassification","siteClientTag","siteColor","siteId","sitePagesEnabled","siteSubscriptionId","supportPercentStorePage","supportPoundStorePath","systemUserKey","tenantAppVersion","themeCacheToken","themeCssFolderUrl","themeImageFileNames","updateFromDigestPageLoaded","userDisplayName","userEmail","userFirstDayOfWeek","userLoginName","userTime24","userTimeZoneData","viewId","viewOnlyExperienceEnabled","webDescription","webFirstDayOfWeek","webId","webLanguage","webLogoUrl","webPermMask","webTemplate","webTime24","webTitle","webUIVersion","generateGUID","c","r","Math","random","getWeb","method","868","RequestType","Custom","Delete","Merge","OData","Get","GetBuffer","GetWithArgs","GetWithArgsInBody","GetWithArgsInQS","GetWithArgsValueOnly","GetReplace","Post","PostWithArgs","PostWithArgsInBody","PostWithArgsInQS","PostWithArgsValueOnly","PostReplace","869","BaseHelper","data","isCollection","metadata","objType","test","methods","methodName","methodInfo","stringify","metadataType","Function","methodInfo_1","property","propInfo","propName","propType","subPropName","subPropType","__deferred","uri","addProperties","objCollection","updateDataCollection","concat","results_1","results_2","result","executeAndWait","executeMethod","getProperty","updateMetadataUri","waitForRequestsToComplete","updateMetadata","isBatchRequest","requestType","batchIdx","batchRequestIdx","responses","indexOf","ex","batchRequest","batchRequests","hostUrl","requestUrl","targetUrl","870","871","audit","argNames","872","eventreceiver","requestMethod","eventreceivers","returnType","873","attachment","attachmentfiles","properties","approve","cancelupload","continueUpload","copyTo","deny","finishUpload","getlimitedwebpartmanager","moveTo","openBinaryStream","recycle","saveBinaryStream","startUpload","undoCheckOut","unpublish","addTemplateFile","getByUrl","fileversion","fileversions","getbyurl","limitedwebpartmanager","get_WebParts","874","contenttype","contenttypes","setShowInDisplayForm","setShowInEditForm","setShowInNewForm","inheritMetadataType","fieldlinks","addField","addDependentLookupField","parameters","Options","SchemaXml","getByInternalNameOrTitle","breakRoleInheritance","getChanges","getItemById","getItems","ViewXml","getItemsByQuery","getListItemChangesSinceToken","getRelatedFields","getUserEffectivePermissions","getViewById","renderListData","renderListFormData","reserveListItemId","resetRoleInheritance","listitem","validateUpdateListItem","ensureSiteAssetsLibrary","ensureSitePagesLibrary","version","deleteAll","deleteById","deleteByLabel","restoreByLabel","renderAsHtml","viewfieldcollection","moveViewFieldTo","removeViewField","875","navigationservicerest","getMenuState","876","propertyvalues","877","search","postquery","878","roleassignment","roleassignments","addRoleAssignment","getByPrincipalId","removeRoleAssignment","roledefinition","roledefinitions","getByType","879","createPreviewSPSite","extendUpgradeReminderDate","getCatalog","getCustomListTemplates","getWebTemplates","invalidate","needsUpgradeByType","openWeb","openWebById","runHealthCheck","runUpgradeSiteSession","updateClientObjectModelUseRemoteAPIsPermissionSetting","tenantapp","deploy","remove","retract","upgrade","tenantapps","tenantappcatalog","SiteCollectionAppCatalogsSites","utility","createEmailBodyForInvitation","replaceEndpointFl","getAppLicenseDeploymentId","getAppLicenseInformation","getCurrentUserEmailAddresses","getLocalizedString","getLowerCaseString","importAppLicense","isUserLicensedForEntityInContext","localizeWebPartGallery","markDiscussionAsFeatured","resolvePrincipal","searchPrincipals","unmarkDiscussionAsFeatured","applyTheme","applyWebTemplate","argName","doesPushNotificationSubscriberExist","doesUserHavePermissions","ensureUser","executeRemoteLOB","getAppBdcCatalog","getAppBdcCatalogForAppInstance","getAppInstanceById","getAppInstancesByProductId","getAvailableWebTemplates","getContextWebInformation","getDocumentLibraries","getEntity","getList","getPushNotificationSubscriber","getPushNotificationSubscribersByArgs","getPushNotificationSubscribersByUser","getSubwebsFilteredForCurrentUser","getUserById","getWebUrlFromPageUrl","loadAndInstallApp","loadAndInstallAppInSpecifiedLocale","loadApp","mapToIcon","processExternalNotification","registerPushNotificationSubscriber","unregisterPushNotificationSubscriber","webinfos","webs","880","peoplemanager","amIFollowedBy","amIFollowing","follow","followTag","getFollowedTags","getFollowersFor","getMyFollowers","getMyProperties","getMySuggestions","getPeopleFollowedBy","getPeopleFollowedByMe","getPropertiesFor","getTrendingTags","getUserProfilePropertyFor","hideSuggestion","isFollowing","setMyProfilePicture","stopFollowing","stopFollowingTag","profileloader","createPersonalSiteEnqueueBulk","getOwnerUserProfile","getUserProfile","socialfeed","actor","actorFeed","clearMyUnreadMentionCount","my","myFeed","myLikes","myMentionFeed","myNews","myTimelineFeed","myUnreadMentionCount","userprofile","createPersonalSiteEnque","shareAllSocialData","881","group","sitegroups","removeById","removeByLoginName","peoplepicker","clientPeoplePickerResolveUser","clientPeoplePickerSearchUser","user","users","getByEmail","getByLoginName","882","usercustomaction","usercustomactions","clear","883","CalendarTypes","Gregorian","JapaneseEmperorEra","TaiwanCalendar","KoreanTangunEra","Hijri","Thai","HebrewLunar","GregorianMiddleEastFrench","GregorianArabic","GregorianTransliteratedEnglish","GregorianTransliteratedFrench","KoreanandJapaneseLunar","ChineseLunar","SakaEra","CheckOutType","Online","Offline","None","ChoiceFormatType","Dropdown","RadioButtons","ClientTemplatesUtility","UserLookupDelimitString","UserMultiValueDelimitString","ControlMode","Invalid","Display","Edit","New","View","DateFormat","DateOnly","DateTime","DraftVisibilityType","Reader","Author","Approver","EventReceiverSynchronizationType","Synchronization","Asynchronous","EventReceiverType","ItemAdding","ItemUpdating","ItemDeleting","ItemCheckingIn","ItemCheckingOut","ItemUncheckingOut","ItemAttachmentAdding","ItemAttachmentDeleting","ItemFileMoving","ItemVersionDeleting","FieldAdding","FieldUpdating","FieldDeleting","ListAdding","ListDeleting","SiteDeleting","WebDeleting","WebMoving","WebAdding","GroupAdding","GroupUpdating","GroupDeleting","GroupUserAdding","GroupUserDeleting","RoleDefinitionAdding","RoleDefinitionUpdating","RoleDefinitionDeleting","RoleAssignmentAdding","RoleAssignmentDeleting","InheritanceBreaking","InheritanceResetting","WorkflowStarting","ItemAdded","ItemUpdated","ItemDeleted","ItemCheckedIn","ItemCheckedOut","ItemUncheckedOut","ItemAttachmentAdded","ItemAttachmentDeleted","ItemFileMoved","ItemFileConverted","ItemVersionDeleted","FieldAdded","FieldUpdated","FieldDeleted","ListAdded","ListDeleted","SiteDeleted","WebDeleted","WebMoved","WebProvisioned","GroupAdded","GroupUpdated","GroupDeleted","GroupUserAdded","GroupUserDeleted","RoleDefinitionAdded","RoleDefinitionUpdated","RoleDefinitionDeleted","RoleAssignmentAdded","RoleAssignmentDeleted","InheritanceBroken","InheritanceReset","WorkflowStarted","WorkflowPostponed","WorkflowCompleted","EntityInstanceAdded","EntityInstanceUpdated","EntityInstanceDeleted","AppInstalled","AppUpgraded","AppUninstalling","EmailReceived","ContextEvent","FieldNoteType","EnhancedRichText","RichText","TextOnly","FieldNumberType","Decimal","Integer","Percentage","FieldResultType","Boolean","Currency","Number","Text","FieldType","AllDayEvent","Attachments","Calculated","Choice","Computed","ContentTypeId","Counter","CrossProjectLink","Error","File","Geolocation","GridChoice","Guid","Lookup","MaxItems","ModStat","MultiChoice","Note","PageSeparator","Recurrence","ThreadIndex","Threading","URL","User","WorkflowEventType","WorkflowStatus","FieldUserSelectionType","PeopleOnly","PeopleAndGroups","FileTemplateType","StandardPage","WikiPage","FormPage","FriendlyDateFormat","Unspecified","Disabled","Relative","ListTemplateType","AccessRequest","AdminTasks","Agenda","AppDataCatalog","Announcements","CallTrack","Categories","Circulation","Comments","Contacts","CustomGrid","DataConnectionLibrary","DataSources","Decision","DesignCatalog","DeveloperSiteDraftApps","DiscussionBoard","DocumentLibrary","Events","ExternalList","Facility","GanttTasks","GenericList","HealthReports","HealthRules","HelpLibrary","Holidays","HomePageLibrary","IMEDic","IssueTracking","Links","ListTemplateCatalog","MasterPageCatalog","MaintenanceLogs","MeetingObjective","Meetings","MeetingUser","MySiteDocumentLibrary","Posts","NoCodePublic","NoCodeWorkflows","PictureLibrary","SolutionCatalog","Survey","Tasks","TasksWithTimelineAndHierarchy","TextBox","ThemeCatalog","ThingsToBring","Timecard","UserInformation","WebPageLibrary","WebPartCatalog","WebTemplateCatalog","Whereabouts","WorkflowHistory","WorkflowProcess","XMLForm","LocaleLCIDType","Afrikaans","Albanian","ArabicAlgeria","ArabicBahrain","ArabicEgypt","ArabicIraq","ArabicJordan","ArabicLebanon","ArabicLibya","ArabicMorocco","ArabicOman","ArabicQatar","ArabicSaudiArabia","ArabicSyria","ArabicTunisia","ArabicUAE","ArabicYemen","Armenian","AzeriCyrillic","AzeriLatin","Basque","Belarusian","Bulgarian","Catalan","ChineseHongKongSAR","ChineseMacaoSAR","ChinesePRC","ChineseSingapore","ChineseTaiwan","CroatianCroatia","Czech","Danish","Divehi","DutchBelgium","DutchNetherlands","EnglishAustralia","EnglishBelize","EnglishCanada","EnglishCaribbean","EnglishIreland","EnglishJamaica","EnglishNewZealand","EnglishPhilippines","EnglishSouthAfrica","EnglishTrinidad","EnglishUnitedKingdom","EnglishUnitedStates","EnglishZimbabwe","Estonian","Faeroese","Finnish","FrenchBelgium","FrenchCanada","FrenchFrance","FrenchLuxembourg","FrenchMonaco","FrenchSwitzerland","Galician","Georgian","GermanAustria","GermanGermany","GermanLiechtenstein","GermanLuxembourg","GermanSwitzerland","Greek","Gujarati","HebrewIsrael","HindiIndia","Hungarian","Icelandic","Indonesian","ItalianItaly","ItalianSwitzerland","Japanese","Kannada","Kazakh","Konkani","Korean","KyrgyzCyrillic","Latvian","Lithuanian","MacedonianFYROM","Malay","MalayBruneiDarussalam","Marathi","MongolianCyrillic","NorwegianBokmal","NorwegianNynorsk","PersianIran","Polish","PortugueseBrazil","PortuguesePortugal","Punjabi","Romanian","Russian","Sanskrit","SerbianCyrillic","SerbianLatin","Slovak","Slovenian","SpanishArgentina","SpanishBolivia","SpanishChile","SpanishColombia","SpanishCostaRica","SpanishDominicanRepublic","SpanishEcuador","SpanishElSalvador","SpanishGuatemala","SpanishHonduras","SpanishMexico","SpanishNicaragua","SpanishPanama","SpanishParaguay","SpanishPeru","SpanishPuertoRico","SpanishSpain","SpanishUruguay","SpanishVenezuela","Swahili","Swedish","SwedishFinland","Syriac","Tamil","Tatar","Telugu","ThaiThailand","Turkish","Ukrainian","UrduPakistan","UzbekCyrillic","UzbekLatin","Vietnamese","PageType","DefaultView","DialogView","DisplayForm","DisplayFormDialog","EditForm","EditFormDialog","NewForm","NewFormDialog","NormalView","Page_MAXITEMS","SolutionForm","PersonalSiteCapabilities","Education","Guest","MyTasksDashboard","Profile","Social","Storage","PrincipalSources","All","MembershipProvider","RoleProvider","UserInfoList","Windows","PrincipalTypes","DistributionList","SecurityGroup","SharePointGroup","RelationshipDeleteBehaviorType","Cascade","Restrict","ReorderingRuleMatchType","ContentTypeIs","FileExtensionMatches","ManualCondition","ResultContainsKeyword","ResultHasTag","TitleContainsKeyword","TitleMatchesKeyword","UrlExactlyMatches","UrlStartsWith","RoleType","Administrator","Contributor","Editor","WebDesigner","StatusPriColor","Blue","Green","Red","Yellow","UrlFormatType","Hyperlink","Image","URLZones","Default","Intranet","Internet","Extranet","UserCustomActionRegistrationType","List","ProgId","FileType","ViewType","Calendar","Chart","Gantt","Grid","Html","884","ComplexTypes","Results","885","886","887","888","BaseRequest","apply","methodConfig","MethodInfo","bufferFl","body","getAllItemsFl","executeRequest","asyncFl","Batch","getTargetInfo","TargetInfo","xhr","XHRRequest","__next","validateDataCollectionResults","getCollection","getNextSetOfResults","propertyName","889","BaseExecution","batch","arg","appendFl","waitFl","responseIndex","returnVal","waitFunc","waitFlags","requestIdx","intervalId","setInterval","completedFl","clearInterval","890","getInfo","requestInfo","891","requests","batchId","createBatch","join","requestHeader","Content-Type","changesets","changesetId","requestData","changeset","892","argValues","generateParams","methodUrl","generateUrl","methodData","params","name_1","isEmpty","k","methodParams","isTemplate","passDataInBody","passDataInQS","encodeURIComponent","oData","QueryString","GetAllItems","name_2","893","_custom","_expand","_filter","_getAllItems","_orderBy","OrderBy","_select","Select","_skip","Skip","_top","Top","set","qs","values","getQSValue","values_1","qsKey","keys","894","requestHeaders","setRequestUrl","getDomainUrl","location","href","getQueryStringValue","queryString","decodeURIComponent","template","overrideDefaultRequestToHostFl","895","onRequestCompleted","createXHR","readyState","responseURL","XMLHttpRequest","ActiveXObject","e","defaultHeaders","header","setRequestHeader","requestDigest","querySelector","open","onreadystatechange","responseType","byteLength","send","896","897","_JSLink","_baseViewID","BaseViewID","_listTemplateType","_onPostRender","OnPostRender","_onPreRender","OnPreRender","_templates","Templates","getTemplate","register","templateManager","SPClientTemplates","TemplateManager","RegisterTemplateOverrides","898","web_1","_List","listName","getByEntityName","entityTypeName","899","_Navigation","Navigation","900","_PeopleManager","PeopleManager","901","_PeoplePicker","PeoplePicker","902","_ProfileLoader","ProfileLoader","903","_Search","getQuery","searchquery","settings","suggest","Search","904","_Site","getRootWeb","hasAccess","permissions","905","_SocialFeed","postToFeed","accountName","creationData","postInfo","ID","postToMyFeed","SocialFeed","906","_UserProfile","UserProfile","907","_Utility","createWikiPage","WikiHtmlContent","sendEmail","propValue","908","909","_Dependencies","_callback","MAX_WAIT","SCRIPTS","loadDependencies","pageContextExistsFl","elScript","createElement","setAttribute","head","appendChild","waitForPageContext","pageContextExists","Dependencies","910","__1","spCfg_1","fieldInfo","_resolve","createBoolean","schemaXml","defaultValue","createCalculated","resultType","formula","fieldRefs","createChoice","multi","choices","createDate","format","createLookup","fieldRef","showField","ParentWeb","createMMS","valueProps","StaticName","DisplayName","title","Type","Hidden","Required","ShowInViewForms","CanToggleHidden","schemaXmlValue","locale","createNote","noteType","numberOfLines","createNumber","decimals","max","min","numberType","createText","createUrl","createUser","selectionMode","selectionScope","required","SPCfgFieldType","Date","MMS","Url","911","912","_hideEventFl","_fieldToMethodMapper","4","1","2","3","LookupMulti","UserMulti","disableEdit","ctx","requireValueFl","fieldValue","CurrentFieldValue","CurrentFieldSchema","regExp","RegExp","userValue","EntityData","SPUserID","DisplayText","controlMode","renderField","disableQuickEdit","inGridMode","AllowGridEditing","getListView","wp","getWebPart","getListViewItems","ListData","Row","getListViewSelectedItems","ListOperation","Selection","getSelectedItems","FormUniqueId","wpq","hideField","addEventListener","fieldElements","querySelectorAll","fieldElements_1","fieldElement","parentRow","parentNode","getAttribute","nodeName","style","display","removeField","formType","fieldType","defaultHtml","fieldRenderer","currentItem","CurrentItem","RenderField","ListSchema","913","parse_1","_ListForm","_cacheData","_info","_props","item","loadFromCache","loadListData","processFields","loadItem","loadDefaultContentType","loadDefaultFields","sessionStorage","removeItem","cacheKey","setItem","FieldLinks","formFields","fieldLink","loadFieldData","getItem","itemId","loadAttachments","attachments","AttachmentFiles","refreshItem","removeAttachments","saveAttachments","attachmentInfo","saveItem","formValues","ListItemEntityTypeFullName","ListForm","914","taxonomy_1","_ListFormField","_fieldInfo","processField","DefaultValue","readOnly","ReadOnlyField","FieldTypeKind","typeAsString","TypeAsString","Choices","fldDate","showTime","DisplayFormat","fldLookup","lookupField","LookupField","lookupListId","LookupList","lookupWebId","LookupWebId","AllowMultipleValues","fldNumber","startIdx","parseInt","maxValue","MaximumValue","minValue","MinimumValue","showAsPercentage","fldNote","multiline","richText","rows","NumberOfLines","fldUser","allowGroups","SelectionMode","startsWith","fldMMS","IsAnchorValid","AnchorId","TermSetId","SspId","loadLookupData","queryTop","loadMMSData","loadMMSValueField","ListFormField","915","Loader","loaded","waitForSPLibs","timeout","loadLibraries","maxLoops","every","el","maxLoopFl","916","RibbonLink","link","topBar","className","innerHTML","onclick","onClick","insertBefore","firstChild","917","SuiteBarLink","topLinks","sbLink","918","_WebPart","_wp","addHelpLink","helpProps","wpId","helpLink","paddingLeft","target","parentElement","page","get_web","wpMgr","getLimitedWebPartManager","PersonalizationScope","shared","wpDef","get_webParts","get_webPart","Context","Properties","get_properties","WebPart","WebPartDefinition","WebPartId","getWebPartId","getWebPartInfo","elementId","elements","elWebPart","elCfg","cfgElementId","innerText","isEditMode","form","MSOWebPartPageFormName","forms","wikiPageMode","_wikiPageMode","wpPageMode","MSOLayout_InDesignMode","render","onRenderEdit","onRenderDisplay","onPostRender","919","ModalDialog","close","dialogResult","UI","commonModalDialogClose","commonModalDialogOpen","options","OpenPopUpPage","width","height","RefreshPage","showModalDialog","ShowPopupDialog","showWaitScreenSize","message","showWaitScreenWithNoClose","Notify","addNotification","html","sticky","removeNotification","Status","addStatus","prepend","appendStatus","removeAllStatus","hide","removeStatus","setStatusPriColor","color","updateStatus","920","921","helper_1","Util","922","Lib","__ver","global","notifyScriptLoadedAndExecuteWaitingJobs"],"mappings":"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","file":"static/js/0.dceb80be.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 857:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Type definitions for gd-sprest\r\n// Project: https://gunjandatta.github.io/sprest\r\n// Definitions by: Gunjan Datta <https://github.com/gunjandatta>\r\n/***************************************************************************************************\r\nMIT License\r\n\r\nCopyright (c) 2016 Dattabase, LLC.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n***************************************************************************************************/\r\nvar Helper = __webpack_require__(861);\r\nexports.Helper = Helper;\r\nvar mapper_1 = __webpack_require__(860);\r\nexports.SPTypes = mapper_1.SPTypes;\r\nvar Types = __webpack_require__(921);\r\nexports.Types = Types;\r\n__export(__webpack_require__(859));\r\n__export(__webpack_require__(922));\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 858:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(868));\r\n__export(__webpack_require__(869));\r\n__export(__webpack_require__(888));\r\n__export(__webpack_require__(889));\r\n__export(__webpack_require__(890));\r\n__export(__webpack_require__(891));\r\n__export(__webpack_require__(892));\r\n__export(__webpack_require__(893));\r\n__export(__webpack_require__(894));\r\n__export(__webpack_require__(895));\r\nvar Types = __webpack_require__(896);\r\nexports.Types = Types;\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 859:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(867));\r\n__export(__webpack_require__(897));\r\n__export(__webpack_require__(898));\r\n__export(__webpack_require__(899));\r\n__export(__webpack_require__(900));\r\n__export(__webpack_require__(901));\r\n__export(__webpack_require__(902));\r\n__export(__webpack_require__(903));\r\n__export(__webpack_require__(904));\r\n__export(__webpack_require__(905));\r\n__export(__webpack_require__(906));\r\n__export(__webpack_require__(907));\r\n__export(__webpack_require__(862));\r\nvar Types = __webpack_require__(908);\r\nexports.Types = Types;\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 860:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Mapper = __webpack_require__(870);\r\nexports.Mapper = Mapper;\r\nvar SPTypes = __webpack_require__(883);\r\nexports.SPTypes = SPTypes;\r\nvar Types = __webpack_require__(884);\r\nexports.Types = Types;\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 861:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(866));\r\n__export(__webpack_require__(909));\r\n__export(__webpack_require__(910));\r\n__export(__webpack_require__(912));\r\n__export(__webpack_require__(913));\r\n__export(__webpack_require__(914));\r\n__export(__webpack_require__(915));\r\n__export(__webpack_require__(864));\r\n__export(__webpack_require__(916));\r\n__export(__webpack_require__(917));\r\n__export(__webpack_require__(863));\r\n__export(__webpack_require__(865));\r\n__export(__webpack_require__(918));\r\nvar SP = __webpack_require__(919);\r\nexports.SP = SP;\r\nvar Types = __webpack_require__(920);\r\nexports.Types = Types;\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 862:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/*********************************************************************************************************************************/\r\n// Web\r\n/*********************************************************************************************************************************/\r\nvar _Web = /** @class */ (function (_super) {\r\n    __extends(_Web, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _Web(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"web\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"web\" } });\r\n        return _this;\r\n    }\r\n    return _Web;\r\n}(utils_1.Base));\r\nexports.Web = _Web;\r\n//# sourceMappingURL=web.js.map\n\n/***/ }),\n\n/***/ 863:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(911));\r\nvar lib_1 = __webpack_require__(859);\r\nvar _1 = __webpack_require__(861);\r\n/**\r\n * SharePoint Configuration\r\n */\r\nvar _SPConfig = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _SPConfig(cfg, webUrl) {\r\n        var _this = this;\r\n        // Method to install by configuration type\r\n        this.installByType = function (cfgType, callback, targetName) { return _this.install(callback, cfgType, targetName); };\r\n        // Method to uninstall by the configuration type\r\n        this.uninstallByType = function (cfgType, callback, targetName) { return _this.uninstall(callback, cfgType, targetName); };\r\n        /**\r\n         * Methods\r\n         */\r\n        // Method to create the content types\r\n        this.createContentTypes = function (contentTypes, cfgContentTypes) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the content types exist\r\n                if (cfgContentTypes == null || cfgContentTypes.length == 0) {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_1 = function (i) {\r\n                    var cfgContentType = cfgContentTypes[i];\r\n                    // See if this content type already exists\r\n                    var ct = _this.isInCollection(\"Name\", cfgContentType.Name, contentTypes.results);\r\n                    if (ct) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' already exists.\");\r\n                        // Update the configuration\r\n                        cfgContentType.ContentType = ct;\r\n                    }\r\n                    else {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Content Type] Creating the '\" + cfgContentType.Name + \"' content type.\");\r\n                        // See if the parent name exists\r\n                        if (cfgContentType.ParentName) {\r\n                            // Get the web containing the parent content type\r\n                            (new lib_1.Web(cfgContentType.ParentWebUrl || _this._webUrl))\r\n                                .ContentTypes()\r\n                                .query({\r\n                                Filter: \"Name eq '\" + cfgContentType.ParentName + \"'\"\r\n                            })\r\n                                .execute(function (parent) {\r\n                                // See if the parent exists\r\n                                if (parent.results[0]) {\r\n                                    // Add the available content type\r\n                                    contentTypes.addAvailableContentType(parent.results[0].Id.StringValue).execute(function (ct) {\r\n                                        // See if it was successful\r\n                                        if (ct.existsFl) {\r\n                                            // Log\r\n                                            console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' was created successfully.\");\r\n                                            // Update the configuration\r\n                                            cfgContentType.ContentType = ct;\r\n                                            // Trigger the event\r\n                                            cfgContentType.onCreated ? cfgContentType.onCreated(ct) : null;\r\n                                        }\r\n                                        else {\r\n                                            // Log\r\n                                            console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' failed to be created.\");\r\n                                            console.error(\"[gd-sprest][Field] Error: \" + ct.response);\r\n                                        }\r\n                                    }, true);\r\n                                }\r\n                                else {\r\n                                    // Log\r\n                                    console.log(\"[gd-sprest][Content Type] The parent content type '\" + cfgContentType.Name + \"' was not found.\");\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            // Create the content type\r\n                            contentTypes.add({\r\n                                Description: cfgContentType.Description,\r\n                                Group: cfgContentType.Group,\r\n                                Name: cfgContentType.Name\r\n                            }).execute(function (ct) {\r\n                                // See if it was successful\r\n                                if (ct.existsFl) {\r\n                                    // Log\r\n                                    console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' was created successfully.\");\r\n                                    // Update the configuration\r\n                                    cfgContentType.ContentType = ct;\r\n                                    // Trigger the event\r\n                                    cfgContentType.onCreated ? cfgContentType.onCreated(ct) : null;\r\n                                }\r\n                                else {\r\n                                    // Log\r\n                                    console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' failed to be created.\");\r\n                                    console.error(\"[gd-sprest][Field] Error: \" + ct.response);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgContentTypes.length; i++) {\r\n                    _loop_1(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                contentTypes.done(function () {\r\n                    var _loop_2 = function (i) {\r\n                        var cfgContentType = cfgContentTypes[i];\r\n                        var cfgUpdate = {};\r\n                        var updateFl = false;\r\n                        // Ensure the content type exists\r\n                        if (cfgContentType.ContentType == null) {\r\n                            return \"continue\";\r\n                        }\r\n                        /**\r\n                         * See if we need to update the properties\r\n                         */\r\n                        // Description\r\n                        if (cfgContentType.ContentType.Description != cfgContentType.Description) {\r\n                            // Update the configuration\r\n                            cfgUpdate.Description = cfgContentType.Description;\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Description requires update.\");\r\n                            // Set the flag\r\n                            updateFl = true;\r\n                        }\r\n                        // Group\r\n                        if (cfgContentType.ContentType.Group != cfgContentType.Group) {\r\n                            // Update the configuration\r\n                            cfgUpdate.Group = cfgContentType.Group;\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Group requires update.\");\r\n                            // Set the flag\r\n                            updateFl = true;\r\n                        }\r\n                        // JSLink\r\n                        if (cfgContentType.ContentType.JSlink != cfgContentType.JSLink) {\r\n                            // Update the configuration\r\n                            cfgUpdate.JSLink = cfgContentType.JSLink;\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] JSLink requires update.\");\r\n                            // Set the flag\r\n                            updateFl = true;\r\n                        }\r\n                        // Name\r\n                        if (cfgContentType.ContentType.Name != cfgContentType.Name) {\r\n                            // Update the configuration\r\n                            cfgUpdate.Name = cfgContentType.Name;\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Name requires update.\");\r\n                            // Set the flag\r\n                            updateFl = true;\r\n                        }\r\n                        // See if an update is needed\r\n                        if (updateFl) {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Updating the webpart.\");\r\n                            // Update the content type\r\n                            cfgContentType.ContentType.update({ JSLink: cfgContentType.JSLink }).execute(function () {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Update request completed.\");\r\n                                // Trigger the event\r\n                                cfgContentType.onUpdated ? cfgContentType.onUpdated(cfgContentType.ContentType) : null;\r\n                            });\r\n                        }\r\n                        else {\r\n                            // Trigger the event\r\n                            cfgContentType.onUpdated ? cfgContentType.onUpdated(cfgContentType.ContentType) : null;\r\n                        }\r\n                    };\r\n                    // Parse the configuration\r\n                    for (var i = 0; i < cfgContentTypes.length; i++) {\r\n                        _loop_2(i);\r\n                    }\r\n                    // Wait for the requests to complete\r\n                    contentTypes.done(function () {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to create the fields\r\n        this.createFields = function (fields, cfgFields) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the fields exist\r\n                if (cfgFields == null || cfgFields.length == 0) {\r\n                    // Resolve the promise and return\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_3 = function (i) {\r\n                    var cfgField = cfgFields[i];\r\n                    // See if this field already exists\r\n                    var field = _this.isInCollection(\"InternalName\", cfgField.name, fields.results);\r\n                    if (field) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Field] The field '\" + cfgField.name + \"' already exists.\");\r\n                        // Trigger the event\r\n                        cfgField.onUpdated ? cfgField.onUpdated(field) : null;\r\n                    }\r\n                    else {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Field] Creating the '\" + cfgField.name + \"' field.\");\r\n                        //\r\n                        var onFieldCreated_1 = function (field) {\r\n                            // See if it was successful\r\n                            if (field.existsFl) {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Field] The field '\" + field.InternalName + \"' was created successfully.\");\r\n                                // Trigger the event\r\n                                cfgField.onCreated ? cfgField.onCreated(field) : null;\r\n                            }\r\n                            else {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Field] The field '\" + cfgField.name + \"' failed to be created.\");\r\n                                console.error(\"[gd-sprest][Field] Error: \" + field.response);\r\n                            }\r\n                        };\r\n                        // Compute the schema xml\r\n                        _1.FieldSchemaXML(cfgField).then(function (response) {\r\n                            var schemas = typeof (response) === \"string\" ? [response] : response;\r\n                            // Parse the fields to add\r\n                            for (var i_1 = 0; i_1 < schemas.length; i_1++) {\r\n                                // Add the field\r\n                                fields.createFieldAsXml(schemas[i_1]).execute(onFieldCreated_1, true);\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n                // Parse the fields\r\n                for (var i = 0; i < cfgFields.length; i++) {\r\n                    _loop_3(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                fields.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to create the lists\r\n        this.createLists = function (lists, cfgLists) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.Lists) {\r\n                        // Resolve the promise and return\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the lists exist\r\n                if (cfgLists == null || cfgLists.length == 0) {\r\n                    // Resolve the promise and return\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_4 = function (i) {\r\n                    var cfgList = cfgLists[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this list\r\n                        if (cfgList.ListInformation.Title.toLowerCase() != _this._targetName) {\r\n                            return \"continue\";\r\n                        }\r\n                    }\r\n                    // See if this content type already exists\r\n                    var list = _this.isInCollection(\"Title\", cfgList.ListInformation.Title, lists.results);\r\n                    if (list) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][List] The list '\" + cfgList.ListInformation.Title + \"' already exists.\");\r\n                    }\r\n                    else {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][List] Creating the '\" + cfgList.ListInformation.Title + \"' list.\");\r\n                        // Update the list name and remove spaces\r\n                        var listInfo_1 = cfgList.ListInformation;\r\n                        var listName_1 = listInfo_1.Title;\r\n                        listInfo_1.Title = listName_1.replace(/ /g, \"\");\r\n                        // Add the list\r\n                        lists.add(listInfo_1)\r\n                            .execute(function (list) {\r\n                            // Restore the list name in the configuration\r\n                            listInfo_1.Title = listName_1;\r\n                            // See if the request was successful\r\n                            if (list.existsFl) {\r\n                                // See if we need to update the list\r\n                                if (list.existsFl && list.Title != listName_1) {\r\n                                    // Update the list\r\n                                    list.update({ Title: listName_1 }).execute(function () {\r\n                                        // Log\r\n                                        console.log(\"[gd-sprest][List] The list '\" + list.Title + \"' was created successfully.\");\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    // Log\r\n                                    console.log(\"[gd-sprest][List] The list '\" + list.Title + \"' was created successfully.\");\r\n                                }\r\n                                // Trigger the event\r\n                                cfgList.onCreated ? cfgList.onCreated(list) : null;\r\n                            }\r\n                            else {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][List] The list '\" + listInfo_1.Title + \"' failed to be created.\");\r\n                                console.log(\"[gd-sprest][List] Error: '\" + list.response);\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n                // Parse the content types\r\n                for (var i = 0; i < cfgLists.length; i++) {\r\n                    _loop_4(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                lists.done(function () {\r\n                    // Update the lists\r\n                    _this.updateLists(cfgLists).then(function () {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to create the user custom actions\r\n        this.createUserCustomActions = function (customActions, cfgCustomActions) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.SiteUserCustomActions || _this._cfgType != _1.SPCfgType.WebUserCustomActions) {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the lists exist\r\n                if (cfgCustomActions == null || cfgCustomActions.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Parse the custom actions\r\n                for (var i = 0; i < cfgCustomActions.length; i++) {\r\n                    var cfgCustomAction = cfgCustomActions[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this custom action\r\n                        if (cfgCustomAction.Name.toLowerCase() != _this._targetName ||\r\n                            cfgCustomAction.Title.toLowerCase() != _this._targetName) {\r\n                            // Skip this custom action\r\n                            continue;\r\n                        }\r\n                    }\r\n                    // See if this custom action already exists\r\n                    if (_this.isInCollection(\"Name\", cfgCustomAction.Name, customActions.results)) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Custom Action] The custom action '\" + cfgCustomAction.Name + \"' already exists.\");\r\n                    }\r\n                    else {\r\n                        // Add the custom action\r\n                        customActions.add(cfgCustomAction).execute(function (ca) {\r\n                            // Ensure it exists\r\n                            if (ca.existsFl) {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Custom Action] The custom action '\" + ca.Name + \"' was created successfully.\");\r\n                            }\r\n                            else {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Custom Action] The custom action '\" + ca.Name + \"' failed to be created.\");\r\n                                console.log(\"[gd-sprest][Custom Action] Error: \" + ca.response);\r\n                            }\r\n                        }, true);\r\n                    }\r\n                }\r\n                // Wait for the requests to complete\r\n                customActions.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to create the list views\r\n        this.createViews = function (views, cfgViews) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the list views exist\r\n                if (cfgViews == null || cfgViews.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_5 = function (i) {\r\n                    var cfgView = cfgViews[i];\r\n                    // See if this view exists\r\n                    var view = _this.isInCollection(\"Title\", cfgView.ViewName, views.results);\r\n                    if (view) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][View] The view '\" + cfgView.ViewName + \"' already exists.\");\r\n                    }\r\n                    else {\r\n                        // Add the view\r\n                        views.add({\r\n                            Title: cfgView.ViewName,\r\n                            ViewQuery: cfgView.ViewQuery\r\n                        }).execute(function (view) {\r\n                            // Ensure it exists\r\n                            if (view.existsFl) {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][View] The view '\" + cfgView.ViewName + \"' was created successfully.\");\r\n                                // Trigger the event\r\n                                cfgView.onCreated ? cfgView.onCreated(view) : null;\r\n                            }\r\n                            else {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][View] The view '\" + cfgView.ViewName + \"' failed to be created.\");\r\n                                console.log(\"[gd-sprest][View] Error: \" + view.response);\r\n                            }\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the views\r\n                for (var i = 0; i < cfgViews.length; i++) {\r\n                    _loop_5(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                views.done(function () {\r\n                    // Update the views\r\n                    _this.updateViews(views, cfgViews).then(function () {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to create the web parts\r\n        this.createWebParts = function () {\r\n            var cfgWebParts = _this._configuration.WebPartCfg;\r\n            // See if the configuration type exists\r\n            if (_this._cfgType) {\r\n                // Ensure it's for this type\r\n                if (_this._cfgType != _1.SPCfgType.WebParts) {\r\n                    return;\r\n                }\r\n            }\r\n            // Ensure the configuration exists\r\n            if (cfgWebParts == null || cfgWebParts.length == 0) {\r\n                return;\r\n            }\r\n            // Log\r\n            console.log(\"[gd-sprest][WebPart] Creating the web parts.\");\r\n            // Get the root web\r\n            (new lib_1.Web(lib_1.ContextInfo.siteServerRelativeUrl))\r\n                .Lists(\"Web Part Gallery\")\r\n                .RootFolder()\r\n                .query({\r\n                Expand: [\"Files\"]\r\n            })\r\n                .execute(function (folder) {\r\n                var _loop_6 = function (i) {\r\n                    var cfgWebPart = cfgWebParts[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this list\r\n                        if (cfgWebPart.FileName.toLowerCase() != _this._targetName) {\r\n                            return \"continue\";\r\n                        }\r\n                    }\r\n                    // See if this webpart exists\r\n                    var file = _this.isInCollection(\"Name\", cfgWebPart.FileName, folder.Files.results);\r\n                    if (file.existsFl) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][WebPart] The webpart '\" + cfgWebPart.FileName + \"' already exists.\");\r\n                        // Trigger the event\r\n                        cfgWebPart.onUpdated ? cfgWebPart.onUpdated(file) : null;\r\n                    }\r\n                    else {\r\n                        // Trim the xml\r\n                        var xml = cfgWebPart.XML.trim();\r\n                        // Convert the string to an array buffer\r\n                        var buffer = new ArrayBuffer(xml.length * 2);\r\n                        var bufferView = new Uint16Array(buffer);\r\n                        for (var j = 0; j < xml.length; j++) {\r\n                            bufferView[j] = xml.charCodeAt(j);\r\n                        }\r\n                        // Create the webpart, but execute the requests one at a time\r\n                        folder.Files.add(true, cfgWebPart.FileName, buffer).execute(function (file) {\r\n                            // See if group exists\r\n                            if (cfgWebPart.Group) {\r\n                                // Set the target to the root web\r\n                                (new lib_1.Web(lib_1.ContextInfo.siteServerRelativeUrl))\r\n                                    .Lists(\"Web Part Gallery\")\r\n                                    .Items()\r\n                                    .query({\r\n                                    Filter: \"FileLeafRef eq '\" + cfgWebPart.FileName + \"'\"\r\n                                })\r\n                                    .execute(function (items) {\r\n                                    // Update the item\r\n                                    items.results[0].update({\r\n                                        Group: cfgWebPart.Group\r\n                                    }).execute();\r\n                                });\r\n                            }\r\n                            // Log\r\n                            console.log(\"[gd-sprest][WebPart] The '\" + file.Name + \"' webpart file was uploaded successfully.\");\r\n                            // Trigger the event\r\n                            cfgWebPart.onCreated ? cfgWebPart.onCreated(file) : null;\r\n                        });\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgWebParts.length; i++) {\r\n                    _loop_6(i);\r\n                }\r\n            });\r\n        };\r\n        // Method to install the site components\r\n        this.installSite = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure site actions exist\r\n                if (_this._configuration.CustomActionCfg == null || _this._configuration.CustomActionCfg.Site == null) {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Log\r\n                console.log(\"[gd-sprest] Loading the site information...\");\r\n                // Get the site\r\n                (new lib_1.Site(_this._webUrl))\r\n                    .query({\r\n                    Expand: [\"UserCustomActions\"]\r\n                })\r\n                    .execute(function (site) {\r\n                    // Install the user custom actions\r\n                    _this.createUserCustomActions(site.UserCustomActions, _this._configuration.CustomActionCfg ? _this._configuration.CustomActionCfg.Site : []).then(function () {\r\n                        // Resolve the promise\r\n                        resolve(site);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to install the web components\r\n        this.installWeb = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Log\r\n                console.log(\"[gd-sprest] Loading the web information...\");\r\n                // Get the web\r\n                (new lib_1.Web(_this._webUrl))\r\n                    .query({\r\n                    Expand: [\"ContentTypes\", \"Fields\", \"Lists\", \"UserCustomActions\"]\r\n                })\r\n                    .execute(function (web) {\r\n                    // Create the fields\r\n                    _this.createFields(web.Fields, _this._configuration.Fields).then(function () {\r\n                        // Create the content types\r\n                        _this.createContentTypes(web.ContentTypes, _this._configuration.ContentTypes).then(function () {\r\n                            // Create the lists\r\n                            _this.createLists(web.Lists, _this._configuration.ListCfg).then(function () {\r\n                                // Create the web custom actions\r\n                                _this.createUserCustomActions(web.UserCustomActions, _this._configuration.CustomActionCfg ? _this._configuration.CustomActionCfg.Web : null).then(function () {\r\n                                    // Resolve the promise\r\n                                    resolve();\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to see if an object exists in a collection\r\n        this.isInCollection = function (key, value, collection) {\r\n            var valueLower = value.toLowerCase();\r\n            // Parse the collection\r\n            for (var i = 0; i < collection.length; i++) {\r\n                var keyValue = collection[i][key];\r\n                keyValue = keyValue ? keyValue.toLowerCase() : \"\";\r\n                // See if the item exists\r\n                if (valueLower == keyValue) {\r\n                    // Return true\r\n                    return collection[i];\r\n                }\r\n            }\r\n            // Not in the collection\r\n            return false;\r\n        };\r\n        // Method to remove the content type\r\n        this.removeContentTypes = function (contentTypes, cfgContentTypes) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the content types exist\r\n                if (cfgContentTypes == null || cfgContentTypes.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_7 = function (i) {\r\n                    var cfgContentType = cfgContentTypes[i];\r\n                    // Get the field\r\n                    var ct = _this.isInCollection(\"Name\", cfgContentType.Name, contentTypes.results);\r\n                    if (ct) {\r\n                        // Remove the field\r\n                        ct.delete().execute(function () {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Field] The content type '\" + ct.Name + \"' was removed.\");\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgContentTypes.length; i++) {\r\n                    _loop_7(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                contentTypes.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to remove the fields\r\n        this.removeFields = function (fields, cfgFields) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the fields exist\r\n                if (cfgFields == null || cfgFields.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_8 = function (i) {\r\n                    var cfgField = cfgFields[i];\r\n                    // Get the field\r\n                    var field = _this.isInCollection(\"InternalName\", cfgField.name, fields.results);\r\n                    if (field) {\r\n                        // Remove the field\r\n                        field.delete().execute(function () {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Field] The field '\" + field.InternalName + \"' was removed.\");\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgFields.length; i++) {\r\n                    _loop_8(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                fields.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to remove the lists\r\n        this.removeLists = function (lists, cfgLists) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.Lists) {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the lists exist\r\n                if (cfgLists == null || cfgLists.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_9 = function (i) {\r\n                    var cfgList = cfgLists[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this list\r\n                        if (cfgList.ListInformation.Title.toLowerCase() != _this._targetName) {\r\n                            return \"continue\";\r\n                        }\r\n                    }\r\n                    // Get the list\r\n                    var list = _this.isInCollection(\"Title\", cfgList.ListInformation.Title, lists.results);\r\n                    if (list) {\r\n                        // Remove the list\r\n                        list.delete().execute(function () {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][List] The list '\" + list.Title + \"' was removed.\");\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgLists.length; i++) {\r\n                    _loop_9(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                lists.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to remove the user custom actions\r\n        this.removeUserCustomActions = function (customActions, cfgCustomActions) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.SiteUserCustomActions || _this._cfgType != _1.SPCfgType.WebUserCustomActions) {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the custom actions exist\r\n                if (cfgCustomActions == null || cfgCustomActions.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_10 = function (i) {\r\n                    var cfgCustomAction = cfgCustomActions[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this custom action\r\n                        if (cfgCustomAction.Name.toLowerCase() != _this._targetName ||\r\n                            cfgCustomAction.Title.toLowerCase() != _this._targetName) {\r\n                            return \"continue\";\r\n                        }\r\n                    }\r\n                    // Get the custom action\r\n                    var ca = _this.isInCollection(\"Name\", cfgCustomAction.Name, customActions.results);\r\n                    if (ca) {\r\n                        // Remove the custom action\r\n                        ca.delete().execute(function () {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Custom Action] The custom action '\" + ca.Name + \"' was removed.\");\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgCustomActions.length; i++) {\r\n                    _loop_10(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                customActions.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to remove the web parts\r\n        this.removeWebParts = function () {\r\n            var cfgWebParts = _this._configuration.WebPartCfg;\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.WebParts) {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the configuration exists\r\n                if (cfgWebParts == null || cfgWebParts.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Log\r\n                console.log(\"[gd-sprest][WebPart] Creating the web parts.\");\r\n                // Get the root web\r\n                (new lib_1.Web(lib_1.ContextInfo.siteServerRelativeUrl))\r\n                    .Lists(\"Web Part Gallery\")\r\n                    .RootFolder()\r\n                    .Files()\r\n                    .execute(function (files) {\r\n                    var _loop_11 = function (i) {\r\n                        var cfgWebPart = cfgWebParts[i];\r\n                        // See if the target name exists\r\n                        if (_this._cfgType && _this._targetName) {\r\n                            // Ensure it's for this list\r\n                            if (cfgWebPart.FileName.toLowerCase() != _this._targetName) {\r\n                                return \"continue\";\r\n                            }\r\n                        }\r\n                        // Get the file\r\n                        var file = _this.isInCollection(\"Name\", cfgWebPart.FileName, files.results);\r\n                        if (file) {\r\n                            // Remove the file\r\n                            file.delete().execute(function () {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][WebPart] The webpart '\" + file.Name + \"' file was removed.\");\r\n                            }, true);\r\n                        }\r\n                    };\r\n                    // Parse the configuration\r\n                    for (var i = 0; i < cfgWebParts.length; i++) {\r\n                        _loop_11(i);\r\n                    }\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to update the lists\r\n        this.updateLists = function (cfgLists) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                var request = function (idx, resolve) {\r\n                    // Get the list configuration\r\n                    var cfgList = cfgLists[idx];\r\n                    // See if the target name exists\r\n                    if (_this._targetName) {\r\n                        // Ensure it's for this list\r\n                        if (cfgList.ListInformation.Title.toLowerCase() != _this._targetName) {\r\n                            // Update the next list\r\n                            request(idx + 1, resolve);\r\n                            return;\r\n                        }\r\n                    }\r\n                    // Ensure the configuration exists\r\n                    if (cfgList) {\r\n                        // Get the web\r\n                        (new lib_1.Web(_this._webUrl))\r\n                            .Lists(cfgList.ListInformation.Title)\r\n                            .query({\r\n                            Expand: [\"ContentTypes\", \"Fields\", \"UserCustomActions\", \"Views\"]\r\n                        })\r\n                            .execute(function (list) {\r\n                            // See if the title field is being updated\r\n                            if (cfgList.TitleFieldDisplayName) {\r\n                                // Parse the fields\r\n                                for (var i = 0; i < list.Fields.results.length; i++) {\r\n                                    var field = list.Fields.results[i];\r\n                                    // See if this is the title field\r\n                                    if (field.InternalName == \"Title\") {\r\n                                        // See if an update is required\r\n                                        if (field.Title != cfgList.TitleFieldDisplayName) {\r\n                                            // Update the field name\r\n                                            field.update({ Title: cfgList.TitleFieldDisplayName }).execute(function () {\r\n                                                // Log\r\n                                                console.log(\"[gd-sprest][List] The 'Title' field's display name was updated to '\" + cfgList.TitleFieldDisplayName + \"'.\");\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            // Update the list fields\r\n                            _this.createFields(list.Fields, cfgList.CustomFields).then(function () {\r\n                                // Update the content types\r\n                                _this.createContentTypes(list.ContentTypes, cfgList.ContentTypes).then(function () {\r\n                                    // Update the views\r\n                                    _this.createViews(list.Views, cfgList.ViewInformation).then(function () {\r\n                                        // Trigger the event\r\n                                        cfgList.onUpdated ? cfgList.onUpdated(list) : null;\r\n                                        // Update the next list\r\n                                        request(idx + 1, resolve);\r\n                                    });\r\n                                });\r\n                            });\r\n                            // Update the user custom actions\r\n                            _this.createUserCustomActions(list.UserCustomActions, cfgList.UserCustomActions);\r\n                        });\r\n                    }\r\n                    else {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    }\r\n                };\r\n                // Execute the request\r\n                request(0, resolve);\r\n            });\r\n        };\r\n        // Method to update the views\r\n        this.updateViews = function (views, cfgViews) {\r\n            var counter = 0;\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                var _loop_12 = function (i) {\r\n                    var cfgView = cfgViews[i];\r\n                    // Get the view\r\n                    var view = views.getByTitle(cfgView.ViewName);\r\n                    // See if the view fields are defined\r\n                    if (cfgView.ViewFields && cfgView.ViewFields.length > 0) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][View] Updating the view fields for the '\" + cfgView.ViewName + \"' view.\");\r\n                        // Clear the view fields\r\n                        view.ViewFields().removeAllViewFields().execute(true);\r\n                        // Parse the view fields\r\n                        for (var i_2 = 0; i_2 < cfgView.ViewFields.length; i_2++) {\r\n                            // Add the view field\r\n                            view.ViewFields().addViewField(cfgView.ViewFields[i_2]).execute(true);\r\n                        }\r\n                    }\r\n                    // See if we are updating the view properties\r\n                    if (cfgView.JSLink || cfgView.ViewQuery) {\r\n                        var props = {};\r\n                        // Log\r\n                        console.log(\"[gd-sprest][View] Updating the view properties for the '\" + cfgView.ViewName + \"' view.\");\r\n                        // Set the properties\r\n                        cfgView.JSLink ? props[\"JSLink\"] = cfgView.JSLink : null;\r\n                        cfgView.ViewQuery ? props[\"ViewQuery\"] = cfgView.ViewQuery : null;\r\n                        // Update the view\r\n                        view.update(props).execute(true);\r\n                    }\r\n                    // Wait for the requests to complete\r\n                    view.done(function () {\r\n                        var args = [];\r\n                        for (var _i = 0; _i < arguments.length; _i++) {\r\n                            args[_i] = arguments[_i];\r\n                        }\r\n                        // Trigger the event\r\n                        cfgView.onUpdated ? cfgView.onUpdated(view) : null;\r\n                        // See if we are done\r\n                        if (++counter >= cfgViews.length) {\r\n                            // Resolve the promise\r\n                            resolve();\r\n                        }\r\n                    });\r\n                };\r\n                // Parse the views\r\n                for (var i = 0; i < cfgViews.length; i++) {\r\n                    _loop_12(i);\r\n                }\r\n            });\r\n        };\r\n        // Method to uninstall the site components\r\n        this.uninstallSite = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Log\r\n                console.log(\"[gd-sprest][uninstall] Loading the site information...\");\r\n                // Ensure site actions exist\r\n                if (_this._configuration.CustomActionCfg == null || _this._configuration.CustomActionCfg.Site == null) {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Get the site\r\n                (new lib_1.Site(_this._webUrl))\r\n                    .query({\r\n                    Expand: [\"UserCustomActions\"]\r\n                })\r\n                    .execute(function (site) {\r\n                    // Remove the user custom actions\r\n                    _this.removeUserCustomActions(site.UserCustomActions, _this._configuration.CustomActionCfg ? _this._configuration.CustomActionCfg.Site : []).then(function () {\r\n                        // Resolve the promise\r\n                        resolve(site);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to uninstall the web components\r\n        this.uninstallWeb = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Log\r\n                console.log(\"[gd-sprest][uninstall] Loading the web information...\");\r\n                // Get the web\r\n                (new lib_1.Web(_this._webUrl))\r\n                    .query({\r\n                    Expand: [\"ContentTypes\", \"Fields\", \"Lists\", \"UserCustomActions\"]\r\n                })\r\n                    .execute(function (web) {\r\n                    // Remove the fields\r\n                    _this.removeFields(web.Fields, _this._configuration.Fields).then(function () {\r\n                        // Remove the content types\r\n                        _this.removeContentTypes(web.ContentTypes, _this._configuration.ContentTypes).then(function () {\r\n                            // Remove the lists\r\n                            _this.removeLists(web.Lists, _this._configuration.ListCfg).then(function () {\r\n                                // Remove the web custom actions\r\n                                _this.removeUserCustomActions(web.UserCustomActions, _this._configuration.CustomActionCfg ? _this._configuration.CustomActionCfg.Web : null).then(function () {\r\n                                    // Resolve the promise\r\n                                    resolve();\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Save the configuration\r\n        this._configuration = cfg;\r\n        // Save the target web url\r\n        this._webUrl = webUrl;\r\n    }\r\n    /**\r\n     * Public Methods\r\n     */\r\n    // Method to install the configuration\r\n    _SPConfig.prototype.install = function (callback, cfgType, targetName) {\r\n        var _this = this;\r\n        // Update the global variables\r\n        this._cfgType = cfgType;\r\n        this._targetName = targetName ? targetName.toLowerCase() : null;\r\n        // Install the web components\r\n        this.installWeb().then(function () {\r\n            // Install the site components\r\n            _this.installSite().then(function () {\r\n                // Create the webparts\r\n                _this.createWebParts();\r\n                // Log\r\n                console.log(\"[gd-sprest] The configuration script completed, but some requests may still be running.\");\r\n                // See if the callback exists\r\n                if (callback && typeof (callback) === \"function\") {\r\n                    // Execute the callback\r\n                    callback();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Method to uninstall the configuration\r\n    _SPConfig.prototype.uninstall = function (callback, cfgType, targetName) {\r\n        var _this = this;\r\n        // Update the global variables\r\n        this._cfgType = cfgType;\r\n        this._targetName = targetName;\r\n        // Uninstall the web components\r\n        this.uninstallWeb().then(function () {\r\n            // Uninstall the site components\r\n            _this.uninstallSite().then(function () {\r\n                // Remove the webparts\r\n                _this.removeWebParts().then(function () {\r\n                    // Log\r\n                    console.log(\"[gd-sprest] The configuration script completed, but some requests may still be running.\");\r\n                    // See if the callback exists\r\n                    if (callback && typeof (callback) === \"function\") {\r\n                        // Execute the callback\r\n                        callback();\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n    return _SPConfig;\r\n}());\r\n;\r\nexports.SPConfig = _SPConfig;\r\n//# sourceMappingURL=spCfg.js.map\n\n/***/ }),\n\n/***/ 864:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Convert a JSON string to a base object\r\n */\r\nexports.parse = function (jsonString) {\r\n    // Try to parse the string\r\n    try {\r\n        var obj = JSON.parse(jsonString);\r\n        // Create a base object\r\n        var base = new utils_1.Base(obj.props);\r\n        // Set the properties\r\n        base.response = obj.response;\r\n        base.status = obj.status;\r\n        // Update the object\r\n        base.updateDataObject(false);\r\n        // Return the base object\r\n        return base;\r\n    }\r\n    catch (_a) { }\r\n    return null;\r\n};\r\n//# sourceMappingURL=parse.js.map\n\n/***/ }),\n\n/***/ 865:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Taxonomy Helper Class\r\n */\r\nexports.Taxonomy = {\r\n    /**\r\n     * Method to find a term by id\r\n     */\r\n    findById: function (term, termId) {\r\n        // See if this is the root node\r\n        if (term.info && term.info.id == termId) {\r\n            // Return the root node\r\n            return term;\r\n        }\r\n        // Parse the child nodes\r\n        for (var prop in term) {\r\n            // Skip the info and parent\r\n            if (prop == \"info\" || prop == \"parent\") {\r\n                continue;\r\n            }\r\n            // Find the term by id\r\n            var childTerm = exports.Taxonomy.findById(term[prop], termId);\r\n            if (childTerm) {\r\n                return childTerm;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * Method to find a term by name\r\n     */\r\n    findByName: function (term, termName) {\r\n        // See if this is the root node\r\n        if (term.info && term.info.name == termName) {\r\n            // Return the root node\r\n            return term;\r\n        }\r\n        // Parse the child nodes\r\n        for (var prop in term) {\r\n            // Skip the info and parent\r\n            if (prop == \"info\" || prop == \"parent\") {\r\n                continue;\r\n            }\r\n            // Find the term by id\r\n            var childTerm = exports.Taxonomy.findByName(term[prop], termName);\r\n            if (childTerm) {\r\n                return childTerm;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * Method to get the terms\r\n     */\r\n    getTerms: function (termSet, termSetTerms) {\r\n        var terms = [];\r\n        // Add the root term\r\n        terms.push({\r\n            description: termSet.get_description(),\r\n            id: termSet.get_id().toString(),\r\n            name: termSet.get_name(),\r\n            path: [],\r\n            pathAsString: \"\",\r\n            props: termSet.get_customProperties()\r\n        });\r\n        // Parse the term sets terms\r\n        var enumerator = termSetTerms.getEnumerator();\r\n        while (enumerator.moveNext()) {\r\n            var term = enumerator.get_current();\r\n            // Create the terms\r\n            terms.push({\r\n                description: term.get_description(),\r\n                id: term.get_id().toString(),\r\n                name: term.get_name(),\r\n                path: term.get_pathOfTerm().split(\";\"),\r\n                pathAsString: term.get_pathOfTerm(),\r\n                props: term.get_customProperties()\r\n            });\r\n        }\r\n        // Sort the terms\r\n        terms = terms.sort(function (a, b) {\r\n            if (a.pathAsString < b.pathAsString) {\r\n                return -1;\r\n            }\r\n            if (a.pathAsString > b.pathAsString) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        // Return the terms\r\n        return terms;\r\n    },\r\n    /**\r\n     * Method to get the term group\r\n     */\r\n    getTermGroup: function (groupName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the scripts\r\n            exports.Taxonomy.loadScripts().then(function () {\r\n                // Get the taxonomy session\r\n                var context = SP.ClientContext.get_current();\r\n                var session = SP.Taxonomy.TaxonomySession.getTaxonomySession(context);\r\n                // See if we are getting a specific group name\r\n                if (groupName) {\r\n                    // Resolve the promise\r\n                    var termStores_1 = session.get_termStores();\r\n                    context.load(termStores_1, \"Include(Groups)\");\r\n                    context.executeQueryAsync(function () {\r\n                        // Get the default store\r\n                        var enumerator = termStores_1.getEnumerator();\r\n                        var termStore = enumerator.moveNext() ? enumerator.get_current() : null;\r\n                        if (termStore) {\r\n                            // Get the term group\r\n                            var termGroup = termStore.get_groups().getByName(groupName);\r\n                            context.load(termGroup);\r\n                            // Resolve the promise\r\n                            resolve({ context: context, termGroup: termGroup });\r\n                        }\r\n                        else {\r\n                            // Reject the promise\r\n                            reject(\"Unable to find the taxonomy store.\");\r\n                        }\r\n                    }, function () {\r\n                        var args = [];\r\n                        for (var _i = 0; _i < arguments.length; _i++) {\r\n                            args[_i] = arguments[_i];\r\n                        }\r\n                        // Reject the promise\r\n                        reject(args[1].get_message());\r\n                    });\r\n                }\r\n                else {\r\n                    // Get the default site collection group\r\n                    var termStore = session.getDefaultSiteCollectionTermStore();\r\n                    var termGroup = termStore.getSiteCollectionGroup(context.get_site());\r\n                    context.load(termGroup);\r\n                    // Resolve the promise\r\n                    resolve({ context: context, termGroup: termGroup });\r\n                }\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the terms by id\r\n     */\r\n    getTermsById: function (termStoreId, termSetId) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the scripts\r\n            exports.Taxonomy.loadScripts().then(function () {\r\n                // Get the taxonomy session\r\n                var context = SP.ClientContext.get_current();\r\n                var session = SP.Taxonomy.TaxonomySession.getTaxonomySession(context);\r\n                // Get the term set terms\r\n                var termStore = session.get_termStores().getById(termStoreId);\r\n                var termSet = termStore.getTermSet(termSetId);\r\n                var terms = termSet.getAllTerms();\r\n                context.load(termSet);\r\n                context.load(terms, \"Include(CustomProperties, Description, Id, Name, PathOfTerm)\");\r\n                // Execute the request\r\n                context.executeQueryAsync(function () {\r\n                    // Resolve the promise\r\n                    resolve(exports.Taxonomy.getTerms(termSet, terms));\r\n                }, function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Reject the promise\r\n                    reject(args[1].get_message());\r\n                });\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the term set by id\r\n     */\r\n    getTermSetById: function (termStoreId, termSetId) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the terms\r\n            exports.Taxonomy.getTermsById(termStoreId, termSetId).then(\r\n            // Success\r\n            function (terms) {\r\n                // Resolve the promise\r\n                resolve(exports.Taxonomy.toObject(terms));\r\n            }, \r\n            // Error\r\n            function (reason) {\r\n                // Reject the promise\r\n                reject(reason);\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the terms from the default site collection\r\n     */\r\n    getTermsFromDefaultSC: function (termSetName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the term group\r\n            exports.Taxonomy.getTermGroup().then(\r\n            // Success\r\n            function (_a) {\r\n                var context = _a.context, termGroup = _a.termGroup;\r\n                // Get the term set terms\r\n                var termSet = termGroup.get_termSets().getByName(termSetName);\r\n                var terms = termSet.getAllTerms();\r\n                context.load(termSet);\r\n                context.load(terms, \"Include(CustomProperties, Description, Id, Name, PathOfTerm)\");\r\n                // Execute the request\r\n                context.executeQueryAsync(function () {\r\n                    // Resolve the promise\r\n                    resolve(exports.Taxonomy.getTerms(termSet, terms));\r\n                }, function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Reject the promise\r\n                    reject(args[1].get_message());\r\n                });\r\n            }, \r\n            // Error\r\n            function (reason) {\r\n                // Reject the promise\r\n                reject(reason);\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the term set from the default site collection\r\n     */\r\n    getTermSetFromDefaultSC: function (termSetName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the terms\r\n            exports.Taxonomy.getTermsFromDefaultSC(termSetName).then(\r\n            // Success\r\n            function (terms) {\r\n                // Resolve the object\r\n                resolve(exports.Taxonomy.toObject(terms));\r\n            }, \r\n            // Error\r\n            function (reason) {\r\n                // Reject the promise\r\n                reject(reason);\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get a terms from a specified group\r\n     */\r\n    getTermsByGroupName: function (termSetName, groupName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the term group\r\n            exports.Taxonomy.getTermGroup(groupName).then(function (_a) {\r\n                var context = _a.context, termGroup = _a.termGroup;\r\n                // Get the term set terms\r\n                var termSet = termGroup.get_termSets().getByName(termSetName);\r\n                var terms = termSet.getAllTerms();\r\n                context.load(termSet);\r\n                context.load(terms, \"Include(CustomProperties, Description, Id, Name, PathOfTerm)\");\r\n                // Execute the request\r\n                context.executeQueryAsync(function () {\r\n                    // Resolve the promise\r\n                    resolve(exports.Taxonomy.getTerms(termSet, terms));\r\n                }, function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Reject the promise\r\n                    reject(args[1].get_message());\r\n                });\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the term set from the default site collection\r\n     */\r\n    getTermSetByGroupName: function (termSetName, groupName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the terms\r\n            exports.Taxonomy.getTermsByGroupName(termSetName, groupName).then(\r\n            // Success\r\n            function (terms) {\r\n                // Resolve the object\r\n                resolve(exports.Taxonomy.toObject(terms));\r\n            }, \r\n            // Error\r\n            function (reason) {\r\n                // Reject the promise\r\n                reject(reason);\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to ensure the taxonomy script references are loaded.\r\n     */\r\n    loadScripts: function () {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Ensure the core script is loaded\r\n            SP.SOD.executeFunc(\"sp.js\", \"SP.Utilities.Utility\", function () {\r\n                // Ensure the taxonomy script is loaded\r\n                SP.SOD.registerSod(\"sp.taxonomy.js\", SP.Utilities.Utility.getLayoutsPageUrl(\"sp.taxonomy.js\"));\r\n                SP.SOD.executeFunc(\"sp.taxonomy.js\", \"SP.Taxonomy.TaxonomySession\", function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            }, \"sp.js\");\r\n        });\r\n    },\r\n    /**\r\n     * Method to convert a term to an array of term information\r\n     */\r\n    toArray: function (term) {\r\n        var terms = [];\r\n        // Recursive method to extract the child terms\r\n        var getChildTerms = function (term, terms) {\r\n            // Parse the properties\r\n            for (var prop in term) {\r\n                // Skip the info and parent properties\r\n                if (prop == \"info\" || prop == \"parent\") {\r\n                    continue;\r\n                }\r\n                // Add the child term\r\n                var childTerm = term[prop];\r\n                terms.push(childTerm.info);\r\n                // Add the child terms\r\n                getChildTerms(childTerm, terms);\r\n            }\r\n        };\r\n        // Ensure the term exists\r\n        if (term) {\r\n            // See if the root node contains term information\r\n            if (term.info) {\r\n                // Add the root term\r\n                terms.push(term.info);\r\n            }\r\n            // Get the child terms\r\n            getChildTerms(term, terms);\r\n        }\r\n        // Return the child terms\r\n        return terms;\r\n    },\r\n    /**\r\n     * Method to convert a term to a field value\r\n     */\r\n    toFieldValue: function (term) {\r\n        var termInfo = term ? term[\"info\"] || term : null;\r\n        // Ensure the term exists\r\n        if (termInfo) {\r\n            return {\r\n                __metadata: { \"type\": \"SP.Taxonomy.TaxonomyFieldValue\" },\r\n                Label: termInfo.name,\r\n                TermGuid: termInfo.id,\r\n                WssId: -1\r\n            };\r\n        }\r\n        // Return nothing\r\n        return null;\r\n    },\r\n    /**\r\n     * Method to convert a collection of terms to a field value\r\n     */\r\n    toFieldMultiValue: function (terms) {\r\n        var results = [];\r\n        // Ensure terms exist\r\n        if (terms && terms.length > 0) {\r\n            // Parse the terms\r\n            for (var i = 0; i < terms.length; i++) {\r\n                var termInfo = terms[i][\"info\"] || terms[i];\r\n                // Add the term\r\n                results.push(\";#\" + termInfo.name + \"|\" + termInfo.id);\r\n            }\r\n        }\r\n        // Return a blank array\r\n        return {\r\n            __metadata: { type: \"Collection(SP.Taxonomy.TaxonomyFieldValue)\" },\r\n            results: results\r\n        };\r\n    },\r\n    /**\r\n     * Method to convert the terms to an object\r\n     */\r\n    toObject: function (terms) {\r\n        var root = {};\r\n        // Recursive method to add terms\r\n        var addTerm = function (node, info, path) {\r\n            var term = node;\r\n            var termName = \"\";\r\n            // Loop for each term\r\n            while (path.length > 0) {\r\n                // Ensure the term exists\r\n                termName = path[0];\r\n                if (term[termName] == null) {\r\n                    // Create the term\r\n                    term[termName] = {};\r\n                }\r\n                // Set the term\r\n                var parent_1 = term;\r\n                term = term[termName];\r\n                // Set the parent\r\n                term.parent = parent_1;\r\n                // Remove the term from the path\r\n                path.splice(0, 1);\r\n            }\r\n            // Set the info\r\n            term.info = info;\r\n        };\r\n        // Ensure the terms exist\r\n        if (terms && terms.length > 0) {\r\n            // Parse the terms\r\n            for (var i = 0; i < terms.length; i++) {\r\n                var term = terms[i];\r\n                // See if this is the root term\r\n                if (term.pathAsString == \"\") {\r\n                    // Set the root information\r\n                    root.info = term;\r\n                }\r\n                else {\r\n                    // Add the term\r\n                    addTerm(root, term, term.pathAsString.split(\";\"));\r\n                }\r\n            }\r\n            // Return the root term\r\n            return exports.Taxonomy.findById(root, terms[0].id);\r\n        }\r\n        // Return nothing\r\n        return null;\r\n    }\r\n};\r\n//# sourceMappingURL=taxonomy.js.map\n\n/***/ }),\n\n/***/ 866:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\n/**\r\n * App Helper Methods\r\n * Helper methods designed to be run from the app web.\r\n */\r\nexports.App = {\r\n    // Method to copy a file in this app web to the host web\r\n    copyFileToHostWeb: function (fileUrl, dstFolder, overwriteFl, rootWebFl) {\r\n        var srcFile = null;\r\n        var origVal = lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl;\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Ensure the current web is an app web\r\n            if (!lib_1.ContextInfo.isAppWeb) {\r\n                // Error\r\n                console.error(\"[gd-sprest] The current web is not an app web.\");\r\n                reject();\r\n                return;\r\n            }\r\n            // Get the host web\r\n            lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl = true;\r\n            var web = (new lib_1.Web(rootWebFl ? lib_1.ContextInfo.siteServerRelativeUrl : null));\r\n            // See if the folder url was given\r\n            if (typeof (dstFolder) === \"string\") {\r\n                // Get the folder\r\n                exports.App.getFolder(web, dstFolder, true)\r\n                    .then(function (folder) {\r\n                    // Copy the file to the host web\r\n                    exports.App.copyFileToHostWeb(fileUrl, folder, overwriteFl)\r\n                        .then(function (_a) {\r\n                        var file = _a.file, folder = _a.folder;\r\n                        resolve({ file: file, folder: folder });\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                // Get the file name\r\n                var fileName = fileUrl.split(\"/\");\r\n                fileName = fileName[fileName.length - 1];\r\n                // Set the file urls\r\n                var dstFileUrl = lib_1.ContextInfo.window.SP.Utilities.UrlBuilder.urlCombine(dstFolder.ServerRelativeUrl, fileName);\r\n                var srcFileUrl_1 = lib_1.ContextInfo.window.SP.Utilities.UrlBuilder.urlCombine(lib_1.ContextInfo.webServerRelativeUrl, fileUrl.substr(fileUrl[0] == \"/\" ? 1 : 0));\r\n                // Get the destination file\r\n                web.getFileByServerRelativeUrl(dstFileUrl)\r\n                    .execute(function (file) {\r\n                    // Return a promise\r\n                    return new Promise(function (resolve, reject) {\r\n                        // See if the file exists\r\n                        if (file.Exists) {\r\n                            // Check out the file, and resolve the promise\r\n                            file.checkout().execute(resolve);\r\n                        }\r\n                        else {\r\n                            // Resolve the promise\r\n                            resolve();\r\n                        }\r\n                    });\r\n                });\r\n                // Target the current web\r\n                lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl = false;\r\n                // Get the current web\r\n                (new lib_1.Web())\r\n                    .getFileByServerRelativeUrl(srcFileUrl_1)\r\n                    .content()\r\n                    .execute(function (content) {\r\n                    // Return a promise\r\n                    return new Promise(function (resolve, reject) {\r\n                        // Get the file name\r\n                        var fileName = srcFileUrl_1.split(\"/\");\r\n                        fileName = fileName[fileName.length - 1];\r\n                        // Target the host web\r\n                        lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl = true;\r\n                        // Add the file to the folder\r\n                        (dstFolder).Files().add(true, fileName, content)\r\n                            .execute(function (file) {\r\n                            // Save a reference to this file\r\n                            srcFile = file;\r\n                            // Check in the file\r\n                            file.checkin(\"\", 1).execute();\r\n                            // Publish the file\r\n                            file.publish(\"\").execute(true);\r\n                            // Wait for the requests to complete\r\n                            file.done(function () {\r\n                                // Resolve the promise\r\n                                resolve();\r\n                            });\r\n                        });\r\n                    });\r\n                }, true);\r\n                // Wait for the requests to complete, and resolve the promise\r\n                web.done(function () { resolve({ file: srcFile, folder: dstFolder }); });\r\n            }\r\n        });\r\n    },\r\n    // Method to copy a file in this app web to the host web\r\n    copyFilesToHostWeb: function (fileUrls, folderUrls, overwriteFl, rootWebFl) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var request = function (files, folders, idx) {\r\n                // Ensure the array is not empty\r\n                if (fileUrls.length == idx || folderUrls.length == idx) {\r\n                    // Resolve the promise and return it\r\n                    resolve({ files: files, folders: folders });\r\n                    return;\r\n                }\r\n                // Copy the file\r\n                exports.App.copyFileToHostWeb(fileUrls[idx], folderUrls[idx], overwriteFl, rootWebFl)\r\n                    .then(function (_a) {\r\n                    var file = _a.file, folder = _a.folder;\r\n                    // Save a reference to the file and folder\r\n                    files.push(file);\r\n                    folders.push(folder);\r\n                    // Copy the files\r\n                    request(files, folders, ++idx);\r\n                });\r\n            };\r\n            // Execute the request\r\n            request([], [], 0);\r\n        });\r\n    },\r\n    // Method to create sub-folders\r\n    createSubFolders: function (folder, subFolderUrl) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var request = function (resolve) {\r\n                // Get the sub-folder name\r\n                var subFolderName = subFolderUrl.split(\"/\")[0];\r\n                // Update the sub folder url\r\n                subFolderUrl = subFolderUrl.substr(subFolderName.length + 1);\r\n                // Get the sub-folder\r\n                var subFolder = folder.Folders(subFolderName).execute(function (subFolder) {\r\n                    // Method to add additional sub folders\r\n                    var addSubFolders = function (subFolder) {\r\n                        // See if we are done\r\n                        if (subFolderUrl.length == 0) {\r\n                            // Resolve the promise\r\n                            resolve(subFolder);\r\n                        }\r\n                        else {\r\n                            // Create the sub folder\r\n                            request(resolve);\r\n                        }\r\n                    };\r\n                    // Ensure the sub-folder exists\r\n                    if (subFolder.Exists) {\r\n                        // Add the rest of the sub folders\r\n                        addSubFolders(subFolder);\r\n                    }\r\n                    else {\r\n                        // Create the sub folder\r\n                        folder.Folders().add(subFolderName).execute(addSubFolders);\r\n                    }\r\n                });\r\n            };\r\n            // Execute the request\r\n            request(resolve);\r\n        });\r\n    },\r\n    // Method to get a folder\r\n    getFolder: function (web, folderUrl, createFl) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var dstFolder = null;\r\n            // Ensure the web exists\r\n            if (!web.existsFl) {\r\n                // Get the web\r\n                web.execute();\r\n            }\r\n            // Wait for the requests to complete\r\n            web.done(function () {\r\n                // Set the destination folder url\r\n                var dstFolderUrl = lib_1.ContextInfo.window.SP.Utilities.UrlBuilder.urlCombine(web.ServerRelativeUrl, folderUrl.substr(folderUrl[0] == \"/\" ? 1 : 0));\r\n                // Get the folder\r\n                web.getFolderByServerRelativeUrl(folderUrl)\r\n                    .execute(function (folder) {\r\n                    // Return a promise\r\n                    return new Promise(function (resolve, reject) {\r\n                        // Ensure the folder exists\r\n                        if (folder.Exists) {\r\n                            // Save a reference to the folder\r\n                            dstFolder = folder;\r\n                            // Resolve the promise\r\n                            resolve();\r\n                        }\r\n                        else {\r\n                            // Create the folder\r\n                            exports.App.createSubFolders(web.RootFolder(), folderUrl).then(function (folder) {\r\n                                // Save a reference to the folder\r\n                                dstFolder = folder;\r\n                                // Resolve the promise\r\n                                resolve();\r\n                            });\r\n                        }\r\n                    });\r\n                }, true);\r\n                // Wait for the request to complete\r\n                web.done(function () {\r\n                    // Resolve the promise\r\n                    resolve(dstFolder);\r\n                });\r\n            });\r\n        });\r\n    },\r\n    // Method to remove empty folders\r\n    removeEmptyFolders: function (web, folderUrls) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Ensure folder urls exist\r\n            if (folderUrls.length == 0) {\r\n                // Resolve the promise and return it\r\n                resolve();\r\n            }\r\n            else {\r\n                var prevFolderUrl = null;\r\n                // Sort the urls alphabetically, then from longest to shortest\r\n                folderUrls.sort().sort(function (a, b) { return a.length > b.length ? -1 : 1; });\r\n                // Parse the folders\r\n                for (var _i = 0, folderUrls_1 = folderUrls; _i < folderUrls_1.length; _i++) {\r\n                    var folderUrl = folderUrls_1[_i];\r\n                    var folder = null;\r\n                    // See if we already removed this folder\r\n                    if (folderUrl == prevFolderUrl) {\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        prevFolderUrl = folderUrl;\r\n                    }\r\n                    // Parse the folder names\r\n                    var folderNames = folderUrl.split('/');\r\n                    for (var _a = 0, folderNames_1 = folderNames; _a < folderNames_1.length; _a++) {\r\n                        var folderName = folderNames_1[_a];\r\n                        // Get the sub-folder\r\n                        folder = folder ? folder.Folders(folderName) : web.Folders(folderName);\r\n                    }\r\n                    // Execute the request\r\n                    folder.execute(function (folder) {\r\n                        // Return a promise\r\n                        return new Promise(function (resolve, reject) {\r\n                            // See if the folder is empty\r\n                            if (folder.ItemCount == 0) {\r\n                                // Delete the folder, and resolve the promise\r\n                                folder.delete().execute(resolve);\r\n                            }\r\n                            else {\r\n                                // Resolve the promise\r\n                                resolve();\r\n                            }\r\n                        });\r\n                    }, true);\r\n                }\r\n                // Wait for the requests to complete, and resolve the promise\r\n                web.done(function () { resolve(); });\r\n            }\r\n        });\r\n    },\r\n    // Method to remove a file\r\n    removeFile: function (web, fileUrl) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var folder = null;\r\n            var folders = fileUrl.split('/');\r\n            // Parse the folders\r\n            for (var i = 0; i < folders.length - 1; i++) {\r\n                // Get the folder\r\n                folder = folder ? folder.Folders(folders[i]) : web.Folders(folders[i]);\r\n            }\r\n            // Get the file\r\n            folder.Files(folders[folders.length - 1]).execute(function (file) {\r\n                // See if it exists\r\n                if (file.Exists) {\r\n                    // Delete it and resolve the promise\r\n                    file.delete().execute(resolve);\r\n                }\r\n                else {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                }\r\n            }, true);\r\n        });\r\n    },\r\n    // Method to remove files\r\n    removeFiles: function (web, fileUrls, idx) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var request = function (idx, resolve) {\r\n                // See if we have removed all files\r\n                if (fileUrls.length == idx) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                }\r\n                else {\r\n                    // Remove the file\r\n                    exports.App.removeFile(web, fileUrls[idx]).then(function () {\r\n                        // Remove the files\r\n                        request(++idx, resolve);\r\n                    });\r\n                }\r\n            };\r\n            // Execute the request\r\n            request(0, resolve);\r\n        });\r\n    }\r\n};\r\n//# sourceMappingURL=app.js.map\n\n/***/ }),\n\n/***/ 867:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Context Information\r\n */\r\nvar _ContextInfo = /** @class */ (function () {\r\n    function _ContextInfo() {\r\n    }\r\n    Object.defineProperty(_ContextInfo, \"_contextInfo\", {\r\n        // The current context information\r\n        get: function () {\r\n            return this.window[\"_spPageContextInfo\"] ||\r\n                {\r\n                    existsFl: false,\r\n                    isAppWeb: false,\r\n                    isHubSite: false,\r\n                    isSPO: false,\r\n                    siteAbsoluteUrl: \"\",\r\n                    siteServerRelativeUrl: \"\",\r\n                    userId: 0,\r\n                    webAbsoluteUrl: \"\",\r\n                    webServerRelativeUrl: \"\"\r\n                };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ;\r\n    Object.defineProperty(_ContextInfo, \"aadInstanceUrl\", {\r\n        /**\r\n         * Properties\r\n         */\r\n        get: function () { return this._contextInfo.aadInstanceUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"aadTenantId\", {\r\n        get: function () { return this._contextInfo.aadTenantId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"alertsEnabled\", {\r\n        get: function () { return this._contextInfo.alertsEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"allowSilverlightPrompt\", {\r\n        get: function () { return this._contextInfo.allowSilverlightPrompt == \"True\" ? true : false; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"canUserCreateMicrosoftForm\", {\r\n        get: function () { return this._contextInfo.canUserCreateMicrosoftForm; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"canUserCreateVisioDrawing\", {\r\n        get: function () { return this._contextInfo.canUserCreateVisioDrawing; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"cdnPrefix\", {\r\n        get: function () { return this._contextInfo.cdnPrefix; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"clientServerTimeDelta\", {\r\n        get: function () { return this._contextInfo.clientServerTimeDelta; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"CorrelationId\", {\r\n        get: function () { return this._contextInfo.CorrelationId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"crossDomainPhotosEnabled\", {\r\n        get: function () { return this._contextInfo.crossDomainPhotosEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"currentCultureName\", {\r\n        get: function () { return this._contextInfo.currentCultureName; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"currentLanguage\", {\r\n        get: function () { return this._contextInfo.currentLanguage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"currentUICultureName\", {\r\n        get: function () { return this._contextInfo.currentUICultureName; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"departmentId\", {\r\n        get: function () { return this._contextInfo.departmentId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"DesignPackageId\", {\r\n        get: function () { return this._contextInfo.DesignPackageId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"disableAppViews\", {\r\n        get: function () { return this._contextInfo.disableAppViews; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"disableFlows\", {\r\n        get: function () { return this._contextInfo.disableFlows; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"document\", {\r\n        get: function () { return this.window.document; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"env\", {\r\n        get: function () { return this._contextInfo.env; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"existsFl\", {\r\n        get: function () { return this._contextInfo.existsFl == null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"farmLabel\", {\r\n        get: function () { return this._contextInfo.farmLabel; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"fid\", {\r\n        get: function () { return this._contextInfo.fid; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"formDigestTimeoutSeconds\", {\r\n        get: function () { return this._contextInfo.formDigestTimeoutSeconds; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"formDigestValue\", {\r\n        get: function () { return this._contextInfo.formDigestValue; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"groupColor\", {\r\n        get: function () { return this._contextInfo.groupColor; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"groupHasHomepage\", {\r\n        get: function () { return this._contextInfo.groupHasHomepage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"groupId\", {\r\n        get: function () { return this._contextInfo.groupId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"groupType\", {\r\n        get: function () { return this._contextInfo.groupType; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"guestsEnabled\", {\r\n        get: function () { return this._contextInfo.guestsEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"hasManageWebPermissions\", {\r\n        get: function () { return this._contextInfo.hasManageWebPermissions; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"hasPendingWebTemplateExtension\", {\r\n        get: function () { return this._contextInfo.hasPendingWebTemplateExtension; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"hideSyncButtonOnODB\", {\r\n        get: function () { return this._contextInfo.hideSyncButtonOnODB; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"hubSiteId\", {\r\n        get: function () { return this._contextInfo.hubSiteId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"idleSessionSignOutEnabled\", {\r\n        get: function () { return this._contextInfo.idleSessionSignOutEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isAnonymousGuestUser\", {\r\n        get: function () { return this._contextInfo.isAnonymousGuestUser; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isAppWeb\", {\r\n        get: function () { return this._contextInfo.isAppWeb; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isEmailAuthenticatinoGuesUser\", {\r\n        get: function () { return this._contextInfo.isEmailAuthenticatinoGuesUser; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isExternalGuestUser\", {\r\n        get: function () { return this._contextInfo.isExternalGuestUser; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isHubSite\", {\r\n        get: function () { return this._contextInfo.isHubSite; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isMultiGeoTenant\", {\r\n        get: function () { return this._contextInfo.isMultiGeoTenant; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isNoScriptEnabled\", {\r\n        get: function () { return this._contextInfo.isNoScriptEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isSiteAdmin\", {\r\n        get: function () { return this._contextInfo.isSiteAdmin; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isSPO\", {\r\n        get: function () { return this._contextInfo.isSPO; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isTenantDevSite\", {\r\n        get: function () { return this._contextInfo.isTenantDevSite; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isWebWelcomePage\", {\r\n        get: function () { return this._contextInfo.isWebWelcomePage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"layoutsUrl\", {\r\n        get: function () { return this._contextInfo.layoutsUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listBaseTemplate\", {\r\n        get: function () { return this._contextInfo.listBaseTemplate; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listId\", {\r\n        get: function () { return this._contextInfo.listId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listTitle\", {\r\n        get: function () { return this._contextInfo.listTitle; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listPermMask\", {\r\n        get: function () { return this._contextInfo.listPermMask; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listUrl\", {\r\n        get: function () { return this._contextInfo.listUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"maximumFileSize\", {\r\n        get: function () { return this._contextInfo.maximumFileSize; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"nid\", {\r\n        get: function () { return this._contextInfo.nid; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"openInClient\", {\r\n        get: function () { return this._contextInfo.openInClient; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"pageItemId\", {\r\n        get: function () { return this._contextInfo.pageItemId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"pageListId\", {\r\n        get: function () { return this._contextInfo.pageListId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"pagePermMask\", {\r\n        get: function () { return this._contextInfo.pagePermMask; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"pagePersonalizationScope\", {\r\n        get: function () { return this._contextInfo.pagePersonalizationScope; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"preferUserTimeZone\", {\r\n        get: function () { return this._contextInfo.preferUserTimeZone; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"PreviewFeaturesEnabled\", {\r\n        get: function () { return this._contextInfo.PreviewFeaturesEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"profileUrl\", {\r\n        get: function () { return this._contextInfo.profileUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"PublishingFeatureOn\", {\r\n        get: function () { return this._contextInfo.PublishingFeatureOn; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"RecycleBinItemCount\", {\r\n        get: function () { return this._contextInfo.RecycleBinItemCount; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"serverRedirectedUrl\", {\r\n        get: function () { return this._contextInfo.serverRedirectedUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"serverRequestPath\", {\r\n        get: function () { return this._contextInfo.serverRequestPath; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"serverTime\", {\r\n        get: function () { return this._contextInfo.serverTime; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"showNGSCDialogForSyncOnODB\", {\r\n        get: function () { return this._contextInfo.showNGSCDialogForSyncOnODB; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"showNGSCDialogForSyncOnTS\", {\r\n        get: function () { return this._contextInfo.showNGSCDialogForSyncOnTS; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteAbsoluteUrl\", {\r\n        get: function () { return this._contextInfo.siteAbsoluteUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteClassification\", {\r\n        get: function () { return this._contextInfo.siteClassification; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteClientTag\", {\r\n        get: function () { return this._contextInfo.siteClientTag; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteColor\", {\r\n        get: function () { return this._contextInfo.siteColor; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteId\", {\r\n        get: function () { return this._contextInfo.siteId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"sitePagesEnabled\", {\r\n        get: function () { return this._contextInfo.sitePagesEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteServerRelativeUrl\", {\r\n        get: function () { return this._contextInfo.siteServerRelativeUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteSubscriptionId\", {\r\n        get: function () { return this._contextInfo.siteSubscriptionId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"supportPercentStorePage\", {\r\n        get: function () { return this._contextInfo.supportPercentStorePage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"supportPoundStorePath\", {\r\n        get: function () { return this._contextInfo.supportPoundStorePath; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"systemUserKey\", {\r\n        get: function () { return this._contextInfo.systemUserKey; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"tenantAppVersion\", {\r\n        get: function () { return this._contextInfo.tenantAppVersion; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"themeCacheToken\", {\r\n        get: function () { return this._contextInfo.themeCacheToken; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"themeCssFolderUrl\", {\r\n        get: function () { return this._contextInfo.themeCssFolderUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"themeImageFileNames\", {\r\n        get: function () { return this._contextInfo.themeImageFileNames; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"updateFromDigestPageLoaded\", {\r\n        get: function () { return this._contextInfo.updateFromDigestPageLoaded; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userDisplayName\", {\r\n        get: function () { return this._contextInfo.userDisplayName; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userEmail\", {\r\n        get: function () { return this._contextInfo.userEmail; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userFirstDayOfWeek\", {\r\n        get: function () { return this._contextInfo.userFirstDayOfWeek; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userId\", {\r\n        get: function () { return this._contextInfo.userId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userLoginName\", {\r\n        get: function () { return this._contextInfo.userLoginName; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userTime24\", {\r\n        get: function () { return this._contextInfo.userTime24; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userTimeZoneData\", {\r\n        get: function () { return this._contextInfo.userTimeZoneData; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"viewId\", {\r\n        get: function () { return this._contextInfo.viewId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"viewOnlyExperienceEnabled\", {\r\n        get: function () { return this._contextInfo.viewOnlyExperienceEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webAbsoluteUrl\", {\r\n        get: function () { return this._contextInfo.webAbsoluteUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webDescription\", {\r\n        get: function () { return this._contextInfo.webDescription; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webFirstDayOfWeek\", {\r\n        get: function () { return this._contextInfo.webFirstDayOfWeek; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webId\", {\r\n        get: function () { return this._contextInfo.webId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webLanguage\", {\r\n        get: function () { return this._contextInfo.webLanguage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webLogoUrl\", {\r\n        get: function () { return this._contextInfo.webLogoUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webPermMask\", {\r\n        get: function () { return this._contextInfo.webPermMask; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webServerRelativeUrl\", {\r\n        get: function () { return this._contextInfo.webServerRelativeUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webTemplate\", {\r\n        get: function () { return this._contextInfo.webTemplate; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webTime24\", {\r\n        get: function () { return this._contextInfo.webTime24; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webTitle\", {\r\n        get: function () { return this._contextInfo.webTitle; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webUIVersion\", {\r\n        get: function () { return this._contextInfo.webUIVersion; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"window\", {\r\n        get: function () { return typeof (window) == \"undefined\" ? {} : window; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to generate a guid\r\n    _ContextInfo.generateGUID = function () {\r\n        // Set the batch id\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    // Method to get the context information for a web\r\n    _ContextInfo.getWeb = function (url) {\r\n        // Create a new base object\r\n        return new utils_1.Base({\r\n            endpoint: \"contextinfo\",\r\n            method: \"POST\",\r\n            url: url\r\n        });\r\n    };\r\n    return _ContextInfo;\r\n}());\r\nexports.ContextInfo = _ContextInfo;\r\n//# sourceMappingURL=contextInfo.js.map\n\n/***/ }),\n\n/***/ 868:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Request Type\r\n */\r\nexports.RequestType = {\r\n    // Requests\r\n    Custom: 0,\r\n    Delete: 1,\r\n    Merge: 2,\r\n    OData: 3,\r\n    // Get Requests\r\n    Get: 10,\r\n    GetBuffer: 11,\r\n    GetWithArgs: 12,\r\n    GetWithArgsInBody: 13,\r\n    GetWithArgsInQS: 14,\r\n    GetWithArgsValueOnly: 15,\r\n    GetReplace: 16,\r\n    // Post Requests\r\n    Post: 20,\r\n    PostWithArgs: 21,\r\n    PostWithArgsInBody: 22,\r\n    PostWithArgsInQS: 23,\r\n    PostWithArgsValueOnly: 24,\r\n    PostReplace: 25\r\n};\r\n//# sourceMappingURL=requestType.js.map\n\n/***/ }),\n\n/***/ 869:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\nvar mapper_1 = __webpack_require__(860);\r\nvar _1 = __webpack_require__(858);\r\n/**\r\n * Request Helper\r\n */\r\nvar BaseHelper = /** @class */ (function () {\r\n    function BaseHelper() {\r\n    }\r\n    // Method to add the methods to base object\r\n    BaseHelper.prototype.addMethods = function (base, data) {\r\n        var isCollection = data.results && data.results.length > 0;\r\n        // Determine the metadata\r\n        var metadata = isCollection ? data.results[0].__metadata : data.__metadata;\r\n        // Determine the object type\r\n        var objType = metadata && metadata.type ? metadata.type : base.targetInfo.endpoint;\r\n        objType = objType.split('/');\r\n        objType = (objType[objType.length - 1]);\r\n        objType = objType.split('.');\r\n        objType = (objType[objType.length - 1]).toLowerCase();\r\n        objType += isCollection ? \"s\" : \"\";\r\n        // See if the base is a field\r\n        if ((/^field/.test(objType) || /fields?$/.test(objType)) && objType != \"fieldlinks\" && objType != \"fields\") {\r\n            // Update the type\r\n            objType = \"field\" + (isCollection ? \"s\" : \"\");\r\n        }\r\n        else if (/item$/.test(objType)) {\r\n            // Update the type\r\n            objType = \"listitem\";\r\n        }\r\n        else if (/items$/.test(objType)) {\r\n            // Update the type\r\n            objType = \"items\";\r\n        }\r\n        else if (/corporatecatalogappmetadata/.test(objType)) {\r\n            // Update the type\r\n            objType = \"tenantapp\";\r\n        }\r\n        else if (/corporatecatalogappmetadatas/.test(objType)) {\r\n            // Update the type\r\n            objType = \"tenantapps\";\r\n        }\r\n        // Get the methods for the base object\r\n        var methods = mapper_1.Mapper[objType];\r\n        if (methods) {\r\n            // Parse the methods\r\n            for (var methodName in methods) {\r\n                // Get the method information\r\n                var methodInfo = methods[methodName] ? methods[methodName] : {};\r\n                // See if the base is the \"Properties\" definition for the object\r\n                if (methodName == \"properties\") {\r\n                    // Parse the properties\r\n                    for (var _i = 0, methodInfo_1 = methodInfo; _i < methodInfo_1.length; _i++) {\r\n                        var property = methodInfo_1[_i];\r\n                        var propInfo = property.split(\"|\");\r\n                        // Get the metadata type\r\n                        var propName = propInfo[0];\r\n                        var propType = propInfo.length > 1 ? propInfo[1] : null;\r\n                        var subPropName = propInfo.length > 2 ? propInfo[2] : null;\r\n                        var subPropType = propInfo.length > 3 ? propInfo[3] : null;\r\n                        // See if the property is null or is a collection\r\n                        if (base[propName] == null || (base[propName].__deferred && base[propName].__deferred.uri)) {\r\n                            // See if the base property has a sub-property defined for it\r\n                            if (propInfo.length == 4) {\r\n                                // Update the ' char in the property name\r\n                                subPropName = subPropName.replace(/'/g, \"\\\\'\");\r\n                                // Add the property\r\n                                base[propName] = new Function(\"name\", \"name = name ? '\" + propName + subPropName + \"'.replace(/\\\\[Name\\\\]/g, name) : null;\" +\r\n                                    \"return this.getProperty(name ? name : '\" + propName + \"', name ? '\" + subPropType + \"' : '\" + propType + \"');\");\r\n                            }\r\n                            else {\r\n                                // Add the property\r\n                                base[propName] = new Function(\"return this.getProperty('\" + propName + \"', '\" + propType + \"');\");\r\n                            }\r\n                        }\r\n                    }\r\n                    // Continue the loop\r\n                    continue;\r\n                }\r\n                // See if the base object has a dynamic metadata type\r\n                if (typeof (methodInfo.metadataType) === \"function\") {\r\n                    // Clone the object properties\r\n                    methodInfo = JSON.parse(JSON.stringify(methodInfo));\r\n                    // Set the metadata type\r\n                    methodInfo.metadataType = methods[methodName].metadataType(base);\r\n                }\r\n                // Add the method to the object\r\n                base[methodName] = new Function(\"return this.executeMethod('\" + methodName + \"', \" + JSON.stringify(methodInfo) + \", arguments);\");\r\n            }\r\n        }\r\n    };\r\n    // Method to add properties to the base object\r\n    BaseHelper.prototype.addProperties = function (base, data) {\r\n        // Parse the data properties\r\n        for (var key in data) {\r\n            var value = data[key];\r\n            // Skip properties\r\n            if (key == \"__metadata\" || key == \"results\") {\r\n                continue;\r\n            }\r\n            // See if the base is a collection property\r\n            if (value && value.__deferred && value.__deferred.uri) {\r\n                // Generate a method for the base property\r\n                base[\"get_\" + key] = base[\"get_\" + key] ? base[\"get_\" + key] : new Function(\"return this.getCollection('\" + key + \"', arguments);\");\r\n            }\r\n            else {\r\n                // Set the property, based on the property name\r\n                switch (key) {\r\n                    case \"ClientPeoplePickerResolveUser\":\r\n                    case \"ClientPeoplePickerSearchUser\":\r\n                        base[key] = JSON.parse(value);\r\n                        break;\r\n                    default:\r\n                        // Append the property to the base object\r\n                        base[key] = value;\r\n                        break;\r\n                }\r\n                // See if the base is a collection\r\n                if (base[key] && base[key].results) {\r\n                    // Ensure the collection is an object\r\n                    if (base[key].results.length == 0 || typeof (base[key].results[0]) === \"object\") {\r\n                        // Create the base property as a new request\r\n                        var objCollection = new _1.Base(base.targetInfo);\r\n                        objCollection[\"results\"] = base[key].results;\r\n                        // See no results exist\r\n                        if (objCollection[\"results\"].length == 0) {\r\n                            // Set the metadata type to the key\r\n                            objCollection[\"__metadata\"] = { type: key };\r\n                        }\r\n                        // Update the endpoint for the base request to point to the base property\r\n                        objCollection.targetInfo.endpoint = (objCollection.targetInfo.endpoint.split(\"?\")[0] + \"/\" + key).replace(/\\//g, \"/\");\r\n                        // Add the methods\r\n                        base.addMethods(objCollection, objCollection);\r\n                        // Update the data collection\r\n                        base.updateDataCollection(base, objCollection[\"results\"]);\r\n                        // Update the property\r\n                        base[key] = objCollection;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // Method to update a collection object\r\n    BaseHelper.prototype.updateDataCollection = function (obj, results) {\r\n        // Ensure the base is a collection\r\n        if (results) {\r\n            // Save the results\r\n            obj[\"results\"] = obj[\"results\"] ? obj[\"results\"].concat(results) : results;\r\n            // See if only one object exists\r\n            if (obj[\"results\"].length > 0) {\r\n                var results_1 = obj[\"results\"];\r\n                // Parse the results\r\n                for (var _i = 0, results_2 = results_1; _i < results_2.length; _i++) {\r\n                    var result = results_2[_i];\r\n                    // Add the base references\r\n                    result[\"addMethods\"] = obj.addMethods;\r\n                    result[\"base\"] = obj.base;\r\n                    result[\"done\"] = obj.done;\r\n                    result[\"execute\"] = obj.execute;\r\n                    result[\"executeAndWait\"] = obj.executeAndWait;\r\n                    result[\"executeMethod\"] = obj.executeMethod;\r\n                    result[\"existsFl\"] = true;\r\n                    result[\"getProperty\"] = obj.getProperty;\r\n                    result[\"parent\"] = obj;\r\n                    result[\"targetInfo\"] = obj.targetInfo;\r\n                    result[\"updateMetadataUri\"] = obj.updateMetadataUri;\r\n                    result[\"waitForRequestsToComplete\"] = obj.waitForRequestsToComplete;\r\n                    // Update the metadata\r\n                    this.updateMetadata(obj, result);\r\n                    // Add the methods\r\n                    this.addMethods(result, result);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // Method to convert the input arguments into an object\r\n    BaseHelper.prototype.updateDataObject = function (isBatchRequest) {\r\n        // Ensure the request was successful\r\n        if (this.status >= 200 && this.status < 300) {\r\n            // Return if we are expecting a buffer\r\n            if (this.requestType == _1.RequestType.GetBuffer) {\r\n                return;\r\n            }\r\n            // Parse the responses\r\n            var batchIdx = 0;\r\n            var batchRequestIdx = 0;\r\n            var responses = isBatchRequest ? this.response.split(\"\\n\") : [this.response];\r\n            for (var i = 0; i < responses.length; i++) {\r\n                var data = null;\r\n                // Try to convert the response\r\n                var response = responses[i];\r\n                response = response === \"\" && !isBatchRequest ? \"{}\" : response;\r\n                try {\r\n                    data = isBatchRequest && response.indexOf(\"<?xml\") == 0 ? response : JSON.parse(response);\r\n                }\r\n                catch (ex) {\r\n                    continue;\r\n                }\r\n                // Set the object based on the request type\r\n                var obj = isBatchRequest ? Object.create(this) : this;\r\n                // Set the exists flag\r\n                obj[\"existsFl\"] = typeof (obj[\"Exists\"]) === \"boolean\" ? obj[\"Exists\"] : data.error == null;\r\n                // See if the data properties exists\r\n                if (data.d) {\r\n                    // Save a reference to it\r\n                    obj[\"d\"] = data.d;\r\n                    // Update the metadata\r\n                    this.updateMetadata(obj, data.d);\r\n                    // Update the base object's properties\r\n                    this.addProperties(obj, data.d);\r\n                    // Add the methods\r\n                    this.addMethods(obj, data.d);\r\n                    // Update the data collection\r\n                    this.updateDataCollection(obj, data.d.results);\r\n                }\r\n                // See if the batch request exists\r\n                if (isBatchRequest) {\r\n                    // Get the batch request\r\n                    var batchRequest = this.base.batchRequests[batchIdx][batchRequestIdx++];\r\n                    if (batchRequest == null) {\r\n                        // Update the batch indexes\r\n                        batchIdx++;\r\n                        batchRequestIdx = 0;\r\n                        // Update the batch request\r\n                        batchRequest = this.base.batchRequests[batchIdx][batchRequestIdx++];\r\n                    }\r\n                    // Ensure the batch request exists\r\n                    if (batchRequest) {\r\n                        // Set the response object\r\n                        batchRequest.response = typeof (data) === \"string\" ? data : obj;\r\n                        // Execute the callback if it exists\r\n                        batchRequest.callback ? batchRequest.callback(batchRequest.response) : null;\r\n                    }\r\n                }\r\n            }\r\n            // Clear the batch requests\r\n            if (isBatchRequest) {\r\n                this.base.batchRequests = null;\r\n            }\r\n        }\r\n    };\r\n    // Method to update the metadata\r\n    BaseHelper.prototype.updateMetadata = function (base, data) {\r\n        // Ensure the base is the app web\r\n        if (!lib_1.ContextInfo.isAppWeb) {\r\n            return;\r\n        }\r\n        // Get the url information\r\n        var hostUrl = lib_1.ContextInfo.webAbsoluteUrl.toLowerCase();\r\n        var requestUrl = data && data.__metadata && data.__metadata.uri ? data.__metadata.uri.toLowerCase() : null;\r\n        var targetUrl = base.targetInfo && base.targetInfo.url ? base.targetInfo.url.toLowerCase() : null;\r\n        // Ensure the urls exist\r\n        if (hostUrl == null || requestUrl == null || targetUrl == null) {\r\n            return;\r\n        }\r\n        // See if we need to make an update\r\n        if (targetUrl.indexOf(hostUrl) == 0) {\r\n            return;\r\n        }\r\n        // Update the metadata uri\r\n        data.__metadata.uri = requestUrl.replace(hostUrl, targetUrl);\r\n    };\r\n    return BaseHelper;\r\n}());\r\nexports.BaseHelper = BaseHelper;\r\n//# sourceMappingURL=baseHelper.js.map\n\n/***/ }),\n\n/***/ 870:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(__webpack_require__(871));\r\n__export(__webpack_require__(872));\r\n__export(__webpack_require__(873));\r\n__export(__webpack_require__(874));\r\n__export(__webpack_require__(875));\r\n__export(__webpack_require__(876));\r\n__export(__webpack_require__(877));\r\n__export(__webpack_require__(878));\r\n__export(__webpack_require__(879));\r\n__export(__webpack_require__(880));\r\n__export(__webpack_require__(881));\r\n__export(__webpack_require__(882));\r\n//# sourceMappingURL=mapper.js.map\n\n/***/ }),\n\n/***/ 871:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Audit\r\n */\r\nexports.audit = {\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=audit.js.map\n\n/***/ }),\n\n/***/ 872:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Event Receiver\r\n */\r\nexports.eventreceiver = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.EventReceiverDefinition\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Event Receivers\r\n */\r\nexports.eventreceivers = {\r\n    // Adds an event receiver to the collection.\r\n    add: {\r\n        metadataType: \"SP.EventReceiverDefinition\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets an event receiver by it's id.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"eventreceiver\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=eventReceiver.js.map\n\n/***/ }),\n\n/***/ 873:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Attachment\r\n */\r\nexports.attachment = {};\r\n/**\r\n * Attachment Files\r\n */\r\nexports.attachmentfiles = {\r\n    /**\r\n     * Adds the attachment that is represented by the specified file name and byte array to the list item.\r\n     * @param name - The name of the file to add.\r\n     * @param contents - The file contents as an array buffer.\r\n    **/\r\n    add: {\r\n        argNames: [\"fileName\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * File\r\n */\r\nexports.file = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Author|user\", \"CheckedOutByUser|user\", \"EffectiveInformationRightsManagementSettings\", \"InformationRightsManagementSettings\",\r\n        \"ListItemAllFields\", \"LockedByUser|user\", \"ModifiedBy|user\", \"Properties|propertyvalues\", \"VersionEvents\", \"Versions|fileversions\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Approves the file submitted for content approval with the specified comment.\r\n    approve: {\r\n        argNames: [\"comment\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Stops the chunk upload session without saving the uploaded data. If the file doesn’t already exist in the library, the partially uploaded file will be deleted. Use this in response to user action (as in a request to cancel an upload) or an error or exception.\r\n    // Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n    // This method is currently available only on Office 365.\r\n    cancelupload: {\r\n        argNames: [\"uploadId\"],\r\n        name: \"cancelupload(guid'[[uploadId]]')\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Checks the file in to a document library based on the check-in type.\r\n    // Check-In Types: MinorCheckIn = 0; MajorCheckIn = 1; OverwriteCheckIn = 2\r\n    checkin: {\r\n        argNames: [\"comment\", \"checkInType\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Checks out the file from a document library based on the check-out type.\r\n    checkout: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Returns the file content.\r\n    content: {\r\n        name: \"$value\",\r\n        requestType: utils_1.RequestType.GetBuffer\r\n    },\r\n    // Continues the chunk upload session with an additional fragment. The current file content is not changed.\r\n    // Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n    // This method is currently available only on Office 365.\r\n    continueUpload: {\r\n        argNames: [\"uploadId\", \"fileOffset\"],\r\n        name: \"continueUpload(uploadId=guid'[[uploadId]]', fileOffset=[[fileOffset]])\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Copies the file to the destination URL.\r\n    copyTo: {\r\n        argNames: [\"strNewUrl\", \"bOverWrite\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Denies approval for a file that was submitted for content approval.\r\n    // Only documents in lists that are enabled for content approval can be denied.\r\n    deny: {\r\n        argNames: [\"comment\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\r\n    // Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n    // This method is currently available only on Office 365.\r\n    finishUpload: {\r\n        argNames: [\"uploadId\", \"fileOffset\"],\r\n        name: \"finishUpload(uploadId=guid'[[uploadId]]', fileOffset=[[fileOffset]])\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\r\n    // An exception is thrown if the file is not an ASPX page.\r\n    // Type of scopes: \r\n    getlimitedwebpartmanager: {\r\n        argNames: [\"scope\"],\r\n        name: \"getLimitedWebPartManager(scope=[[scope]])\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    // Moves the file to the specified destination URL.\r\n    // Types of move operations: Overwrite = 1; AllowBrokenThickets (move even if supporting files are separated from the file) = 8.\r\n    moveTo: {\r\n        argNames: [\"newUrl\", \"flags\"],\r\n        name: \"moveTo(newUrl='[[newUrl]]', flags=[[flags]])\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Opens the file as a stream.\r\n    openBinaryStream: {\r\n        requestType: utils_1.RequestType.GetBuffer\r\n    },\r\n    // Submits the file for content approval with the specified comment.\r\n    publish: {\r\n        argNames: [\"comment\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n    recycle: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    // Saves the file as a stream.\r\n    saveBinaryStream: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Starts a new chunk upload session and uploads the first fragment. The current file content is not changed when this method completes.\r\n    // The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\r\n    // The upload session ends either when you use the CancelUpload method or when you successfully complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\r\n    startUpload: {\r\n        argNames: [\"uploadId\"],\r\n        name: \"startupload(uploadId=guid'[[uploadId]]')\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Reverts an existing checkout for the file.\r\n    undoCheckOut: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Removes the file from content approval or unpublish a major version.\r\n    unpublish: {\r\n        argNames: [\"comment\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.File\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Files\r\n */\r\nexports.files = {\r\n    // Adds a file to this collection.\r\n    add: {\r\n        argNames: [\"overwrite\", \"url\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Adds a ghosted file to an existing list or document library.\r\n    // Template File Types: StandardPage = 0; WikiPage = 1; FormPage = 2\r\n    addTemplateFile: {\r\n        argNames: [\"urlOfFile\", \"templateFileType\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Get the file at the specified URL.\r\n    getByUrl: {\r\n        argNames: [\"serverRelativeUrl\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"file\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * File Version\r\n */\r\nexports.fileversion = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * File Versions\r\n */\r\nexports.fileversions = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Folder\r\n */\r\nexports.folder = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Files|files|/getByUrl('[Name]')|file\", \"Folders|folders|/getByUrl('[Name]')|folder\", \"ListItemAllFields\",\r\n        \"ParentFolder|folder\", \"Properties|propertyvalues\", \"StorageMetrics\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Get the file at the specified URL.\r\n    getByUrl: {\r\n        argNames: [\"serverRelativeUrl\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"folder\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Moves the list folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n    recycle: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.Folder\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Folders\r\n */\r\nexports.folders = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Files|files|/getByUrl('[Name]')|file\", \"Folders|folders|/getByUrl('[Name]')|folder\", \"ListItemAllFields\",\r\n        \"ParentFolder\", \"StorageMetrics\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Adds the folder that is located at the specified URL to the collection.\r\n    add: {\r\n        argNames: [\"url\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Get the file at the specified URL.\r\n    getbyurl: {\r\n        argNames: [\"serverRelativeUrl\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"folder\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Limited Web Part Manager\r\n */\r\nexports.limitedwebpartmanager = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"WebParts|webparts|/([Id])|webpart\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Gets a webpart by its id.\r\n    get_WebParts: {\r\n        argNames: [\"id\"],\r\n        name: \"webparts?expand=WebPart\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    }\r\n};\r\n//# sourceMappingURL=file.js.map\n\n/***/ }),\n\n/***/ 874:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Content Type\r\n */\r\nexports.contenttype = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"FieldLinks|fieldlinks|('[Name]')|fieldlink\", \"Fields|fields|/getByInternalNameOrTitle('[Name]')|field\", \"WorkflowAssociations\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the content type.\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.ContentType\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Content Types\r\n */\r\nexports.contenttypes = {\r\n    // Adds a content type to the collection.\r\n    add: {\r\n        metadataType: \"SP.ContentType\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Adds an existing content type to this collection.\r\n    addAvailableContentType: {\r\n        argNames: [\"contentTypeId\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets a content type by id.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"contenttype\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Field\r\n */\r\nexports.field = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Sets the value of the ShowInDisplayForm property for this field.\r\n    setShowInDisplayForm: {\r\n        argNames: [\"showInForm\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Sets the value of the ShowInEditForm property for this field.\r\n    setShowInEditForm: {\r\n        argNames: [\"showInForm\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Sets the value of the ShowInNewForm property for this field.\r\n    setShowInNewForm: {\r\n        argNames: [\"showInForm\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        inheritMetadataType: true,\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Field Links\r\n */\r\nexports.fieldlinks = {\r\n    // Adds a field link to the collection.\r\n    add: {\r\n        argNames: [\"data\"],\r\n        metadataType: \"SP.FieldLink\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets a field link by it's id.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"fieldlink\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Fields\r\n */\r\nexports.fields = {\r\n    // Adds a field to the field collection.\r\n    add: {\r\n        metadataType: \"SP.Field\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Adds a field to the field collection.\r\n    addField: {\r\n        argNames: [\"parameters\"],\r\n        metadataType: \"SP.FieldCreationInformation\",\r\n        name: \"addField\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Adds a secondary lookup field that depends on a primary lookup field for its relationship to the list where it gets its information.\r\n    addDependentLookupField: {\r\n        argNames: [\"displayname\", \"primarylookupfieldid\", \"showfield\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Creates a field based on the specified schema, Boolean value, and field options.\r\n    // Set the option to addFieldInternalNameHint - 8 to ensure the internal name in the schema xml is not altered.\r\n    createFieldAsXml: {\r\n        argNames: [\"schemaXml\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody,\r\n        data: {\r\n            parameters: {\r\n                __metadata: { type: \"SP.XmlSchemaFieldCreationInformation\" },\r\n                Options: 8,\r\n                SchemaXml: \"[[schemaXml]]\"\r\n            }\r\n        }\r\n    },\r\n    // Gets the field with the specified ID.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly,\r\n        returnType: \"field\"\r\n    },\r\n    // Returns the first Field object with the specified internal name or title from the collection.\r\n    getByInternalNameOrTitle: {\r\n        argNames: [\"internalNameOrTitle\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly,\r\n        returnType: \"field\"\r\n    },\r\n    // Returns the first field object in the collection based on the title of the specified field.\r\n    getByTitle: {\r\n        argNames: [\"title\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly,\r\n        returnType: \"field\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Items\r\n */\r\nexports.items = {\r\n    // Adds an item to the list item collection.\r\n    add: {\r\n        metadataType: function (obj) {\r\n            return (obj.parent && obj.parent[\"ListItemEntityTypeFullName\"]) || \"SP.ListItem\";\r\n        },\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets an item by its id.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"listitem\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * List\r\n */\r\nexports.list = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"BrowserFileHandling\", \"ContentTypes|contenttypes|('[Name]')|contenttype\", \"CreatablesInfo\", \"DefaultView|view\",\r\n        \"DescriptionResource\", \"EventReceivers|eventreceivers|('[Name]')|eventreceiver\", \"Fields|fields|/getByInternalNameOrTitle('[Name]')|field\",\r\n        \"FirstUniqueAncestorSecurableObject\", \"Forms|forms|('[Name]')|form\", \"InformationRightsManagementSettings\",\r\n        \"Items|items|([Name])|item\", \"ParentWeb\", \"RoleAssignments|roleassignments|([Name])|roleassignment\",\r\n        \"RootFolder|folder|/getByUrl('[Name]')|file\", \"Subscriptions\", \"TitleResource\",\r\n        \"UserCustomActions|usercustomactions|('[Name]')|usercustomaction\", \"Views|views|('[Name]')|view\", \"WorkflowAssociations\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Creates unique role assignments for the securable object.\r\n    breakRoleInheritance: {\r\n        argNames: [\"copyroleassignments\", \"clearsubscopes\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\r\n    getChanges: {\r\n        argNames: [\"query\"],\r\n        metadataType: \"SP.ChangeQuery\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Returns an item based on the id.\r\n    getItemById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"item\"\r\n    },\r\n    // Returns a collection of items from the list based on the view xml.\r\n    getItems: {\r\n        argNames: [\"viewXml\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody,\r\n        data: {\r\n            query: {\r\n                __metadata: { type: \"SP.CamlQuery\" },\r\n                ViewXml: \"[[viewXml]]\"\r\n            }\r\n        }\r\n    },\r\n    // Returns a collection of items from the list based on the specified query.\r\n    getItemsByQuery: {\r\n        argNames: [\"camlQuery\"],\r\n        name: \"getItems\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody,\r\n        data: {\r\n            query: {\r\n                __metadata: { type: \"SP.CamlQuery\" },\r\n                ViewXml: \"<View>[[camlQuery]]</View>\"\r\n            }\r\n        }\r\n    },\r\n    // Returns a collection of items from the list based on the specified query.\r\n    getListItemChangesSinceToken: {\r\n        argNames: [\"query\"],\r\n        metadataType: \"SP.ChangeLogItemQuery\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Returns a collection of lookup fields that use this list as a data source and that have FieldLookup.IsRelationship set to true.\r\n    getRelatedFields: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    // Gets the effective user permissions for the current user.\r\n    getUserEffectivePermissions: {\r\n        argNames: [\"loginName\"],\r\n        name: \"getUserEffectivePermissions(@user)?@user='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    // Returns the list view with the specified view identifier.\r\n    getViewById: {\r\n        argNames: [\"viewId\"],\r\n        name: \"getView\",\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"view\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n    recycle: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Renders the list data.\r\n    renderListData: {\r\n        argNames: [\"viewXml\"],\r\n        name: \"renderListData(@v)?@v='<View>[[viewXml]]</View>'\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Renders the list form data.\r\n    // Types of modes: 1 - Display, 2 - Edit, 3 - New\r\n    renderListFormData: {\r\n        argNames: [\"itemid\", \"formid\", \"mode\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Reserves a list item ID for idempotent list item creation.\r\n    reserveListItemId: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Resets the role inheritance for the securable object and inherits role assignments from the parent securable object.\r\n    resetRoleInheritance: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.List\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * List Item\r\n */\r\nexports.listitem = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"AttachmentFiles|attachmentfiles|('[Name]')|attachment\", \"ContentType|contenttype\", \"FieldValuesAsHtml\", \"FieldValuesAsText\", \"FieldValuesForEdit\",\r\n        \"File|file\", \"FirstUniqueAncestorSecurableObject\", \"Folder|folder\", \"GetDlpPolicyTip\", \"ParentList|list\",\r\n        \"Properties|propertyvalues\", \"RoleAssignments|roleassignments|roleassignments|([Name])|roleassignment\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Creates unique role assignments for the securable object.\r\n    breakRoleInheritance: {\r\n        argNames: [\"copyroleassignments\", \"clearsubscopes\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Gets the effective permissions that a specified user has on the list item.\r\n    getUserEffectivePermissions: {\r\n        argNames: [\"loginName\"],\r\n        name: \"getUserEffectivePermissions(@user)?@user='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n    recycle: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Resets the role inheritance for the securable object and inherits role assignments from the parent securable object.\r\n    resetRoleInheritance: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        inheritMetadataType: true,\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Validates and sets the values of the specified collection of fields for the list item.\r\n    validateUpdateListItem: {\r\n        argNames: [\"formValues\", \"bNewDocumentUpdate\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Lists\r\n */\r\nexports.lists = {\r\n    // Adds a list to the list collection.\r\n    add: {\r\n        metadataType: \"SP.List\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\r\n    ensureSiteAssetsLibrary: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Gets a list that is the default location for wiki pages.\r\n    ensureSitePagesLibrary: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Returns the list with the specified list identifier.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"list\"\r\n    },\r\n    // Returns the list with the specified title from the collection.\r\n    getByTitle: {\r\n        argNames: [\"title\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"list\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Version\r\n */\r\nexports.version = {\r\n    // Gets the version with the specified ID.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"version\"\r\n    },\r\n    // Deletes all versions in the collection.\r\n    deleteAll: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Deletes a version, by the specified id.\r\n    deleteById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Deletes a version, by the specified label.\r\n    deleteByLabel: {\r\n        argNames: [\"label\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Restores a version, by the specified label.\r\n    restoreByLabel: {\r\n        argNames: [\"label\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    }\r\n};\r\n/**\r\n * View\r\n */\r\nexports.view = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"ViewFields|viewfieldcollection\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Returns the list view as HTML.\r\n    renderAsHtml: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.View\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * View Field Collection\r\n */\r\nexports.viewfieldcollection = {\r\n    // Adds the field with the specified field internal name or display name to the collection.\r\n    addViewField: {\r\n        argNames: [\"fieldName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Moves the field with the specified field internal name to the specified position in the collection.\r\n    moveViewFieldTo: {\r\n        argNames: [\"field\", \"index\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Removes all the fields from the collection.\r\n    removeAllViewFields: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Removes the field with the specified field internal name from the collection.\r\n    removeViewField: {\r\n        argNames: [\"fieldName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    }\r\n};\r\n/**\r\n * Views\r\n */\r\nexports.views = {\r\n    // Adds a view to the view collection.\r\n    add: {\r\n        metadataType: \"SP.View\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets the list view with the specified ID.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"view\"\r\n    },\r\n    // Gets the list view with the specified title.\r\n    getByTitle: {\r\n        argNames: [\"title\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"view\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=list.js.map\n\n/***/ }),\n\n/***/ 875:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Navigation\r\n */\r\nexports.navigationservicerest = {\r\n    /**\r\n     * Properties\r\n     */\r\n    properties: [\r\n        \"MenuState|menustate|([Name])|menunode\"\r\n    ],\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to get the menu state.\r\n    getMenuState: {\r\n        argNames: [\"menuNodeKey\", \"depth\", \"customProperties\", \"mapProviderName\"],\r\n        name: \"MenuState\",\r\n        RequestType: utils_1.RequestType.GetWithArgsInQS\r\n    }\r\n};\r\n//# sourceMappingURL=navigation.js.map\n\n/***/ }),\n\n/***/ 876:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Property Values\r\n */\r\nexports.propertyvalues = {\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=propertyValues.js.map\n\n/***/ }),\n\n/***/ 877:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Search\r\n */\r\nexports.search = {\r\n    postquery: {\r\n        argNames: [\"request\"],\r\n        metadataType: \"Microsoft.Office.Server.Search.REST.SearchRequest\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n//# sourceMappingURL=search.js.map\n\n/***/ }),\n\n/***/ 878:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Role Assignment\r\n */\r\nexports.roleassignment = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Member\", \"RoleDefinitionBindings|roledefinitions\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Role Assignments\r\n */\r\nexports.roleassignments = {\r\n    // Adds a new role assignment with the specified principal and role definitions to the collection.\r\n    addRoleAssignment: {\r\n        argNames: [\"principalId\", \"roleDefId\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Gets the role assignment associated with the specified principal ID from the collection.\r\n    getByPrincipalId: {\r\n        argNames: [\"principalId\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"roleassignment\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Gets the role definition with the specified role type.\r\n    removeRoleAssignment: {\r\n        argNames: [\"principalId\", \"roleDefId\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    }\r\n};\r\n/**\r\n * Role Definition\r\n */\r\nexports.roledefinition = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Role Definitions\r\n */\r\nexports.roledefinitions = {\r\n    // Gets the role definition with the specified ID from the collection.\r\n    getById: {\r\n        argNames: [\"roleDefId\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"roledefinition\"\r\n    },\r\n    // Gets the role definition with the specified name.\r\n    getByName: {\r\n        argNames: [\"name\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"roledefinition\"\r\n    },\r\n    // Gets the role definitions with the specified role type.\r\n    getByType: {\r\n        argNames: [\"roleType\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"roledefinitions\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=security.js.map\n\n/***/ }),\n\n/***/ 879:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Site\r\n */\r\nexports.site = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"EventReceivers|eventreceivers|('[Name]')|eventreceiver\", \"Features\", \"Owner|user\", \"RootWeb|web\",\r\n        \"UserCustomActions|usercustomactions|('[Name]')|usercustomaction\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Creates a temporary evaluation SPSite for this SPSite, for the purposes of determining whether an upgrade is likely to be successful.\r\n    createPreviewSPSite: {\r\n        argNames: [\"upgrade\", \"sendemail\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Extend the upgrade reminder date for this SPSite by the days specified at WebApplication.UpgradeReminderDelay.\r\n    extendUpgradeReminderDate: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Specifies the list template gallery, site template gallery, Web Part gallery, master page gallery, or other galleries from the site collection, including custom galleries that are defined by users.\r\n    getCatalog: {\r\n        argNames: [\"typeCatalog\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Specifies the collection of the site collection changes from the change log that have occurred within the scope of the site collection, based on the specified query.\r\n    getChanges: {\r\n        argNames: [\"query\"],\r\n        metadataType: \"SP.ChangeQuery\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Specifies the collection of custom list templates for a given site.\r\n    getCustomListTemplates: {\r\n        argNames: [\"web\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Returns the collection of site definitions that are available for creating Web sites within the site collection.\r\n    getWebTemplates: {\r\n        argNames: [\"LCID\", \"overrideCompatLevel\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Invalidates cached upgrade information about the site collection so that this information will be recomputed the next time it is needed.\r\n    invalidate: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Returns true if the object needs to be upgraded; otherwise, false.\r\n    needsUpgradeByType: {\r\n        argNames: [\"versionUpgrade\", \"recursive\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Returns the site at the specified URL.\r\n    openWeb: {\r\n        argNames: [\"strUrl\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Returns the site with the specified GUID.\r\n    openWebById: {\r\n        argNames: [\"gWebId\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Queries the object\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Runs a health check as follows. (The health rules referenced below perform an implementation-dependent check on the health of a site collection)\r\n    runHealthCheck: {\r\n        argNames: [\"ruleId\", \"bRepair\", \"bRunAlways\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Either runs a site collection upgrade, or schedules it to be run in the future, depending on available system resources and the value of the queueOnly parameter. The user executing this method MUST be a farm administrator or a site collection administrator.\r\n    runUpgradeSiteSession: {\r\n        argNames: [\"versionUpgrade\", \"queueOnly\", \"sendEmail\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.Site\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Sets whether the client-side object model (CSOM) requests that are made in the context of any site inside the site collection require UseRemoteAPIs permission.\r\n    updateClientObjectModelUseRemoteAPIsPermissionSetting: {\r\n        argNames: [\"requireUseRemoteAPIs\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    }\r\n};\r\n/**\r\n * Tenant App\r\n */\r\nexports.tenantapp = {\r\n    // Deploy solution package in tenant app catalog\r\n    deploy: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Install solution package from tenant app catalog to SharePoint site\r\n    install: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Queries the object\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Remove solution package from tenant app catalog\r\n    remove: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Retract solution package in the tenant app catalog\r\n    retract: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Upgrade solution package in SharePoint site\r\n    upgrade: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Uninstall solution package from SharePoint site\r\n    uninstall: {\r\n        requestType: utils_1.RequestType.Post\r\n    }\r\n};\r\n/**\r\n * Tenant Apps\r\n */\r\nexports.tenantapps = {\r\n    // Get an app by id\r\n    getById: {\r\n        argNames: [\"guid\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"tenantapp\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Tenant App Catalog\r\n */\r\nexports.tenantappcatalog = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"AvailableApps|tenantapps|/getById('[Id]')|tenantapp\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Adds the folder that is located at the specified URL to the collection.\r\n    add: {\r\n        argNames: [\"overwrite\", \"url\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Get an app by id.\r\n    getById: {\r\n        argNames: [\"guid\"],\r\n        name: \"AvailableApps/getById('[[guid]]')\",\r\n        requestType: utils_1.RequestType.GetReplace,\r\n        returnType: \"tenantapp\"\r\n    },\r\n    // Gets the site collection app catalog sites\r\n    SiteCollectionAppCatalogsSites: {\r\n        requestType: utils_1.RequestType.Post\r\n    }\r\n};\r\n/**\r\n * Utility\r\n */\r\nexports.utility = {\r\n    createEmailBodyForInvitation: {\r\n        argNames: [\"pageAddress\"],\r\n        name: \"SP.Utilities.Utility.CreateEmailBodyForInvitation\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    getAppLicenseDeploymentId: {\r\n        name: \"SP.Utilities.Utility.GetAppLicenseDeploymentId\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getAppLicenseInformation: {\r\n        name: \"SP.Utilities.Utility.GetAppLicenseInformation\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getCurrentUserEmailAddresses: {\r\n        name: \"SP.Utilities.Utility.GetCurrentUserEmailAddresses\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getLocalizedString: {\r\n        argNames: [\"sourceValue\"],\r\n        name: \"SP.Utilities.Utility.GetLocalizedString\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    getLowerCaseString: {\r\n        argNames: [\"sourceValue\", \"lcid\"],\r\n        name: \"SP.Utilities.Utility.GetLowerCaseString\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    importAppLicense: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.ImportAppLicense\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    isUserLicensedForEntityInContext: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.IsUserLicensedForEntityInContext\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    localizeWebPartGallery: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.LocalizeWebPartGallery\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    markDiscussionAsFeatured: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.MarkDiscussionAsFeatured\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    resolvePrincipal: {\r\n        name: \"SP.Utilities.Utility.ResolvePrincipalInCurrentContext\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    searchPrincipals: {\r\n        name: \"SP.Utilities.Utility.SearchPrincipalsUsingContextWeb\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    unmarkDiscussionAsFeatured: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.UnmarkDiscussionAsFeatured\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Web\r\n */\r\nexports.web = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"AllProperties|propertyvalues\", \"AppTiles\", \"AssociatedMemberGroup|group\", \"AssociatedOwnerGroup|group\",\r\n        \"AssociatedVisitorGroup|group\", \"Author|user\", \"AvailableContentTypes|contenttypes\", \"AvailableFields|fields\",\r\n        \"ClientWebParts\", \"ContentTypes|contenttypes|('[Name]')|contenttype\", \"CurrentUser|user\", \"DataLeakagePreventionStatusInfo\",\r\n        \"DescriptionResource\", \"EventReceivers|eventreceivers|('[Name]')|eventreceiver\", \"Features\",\r\n        \"Fields|fields|/getByInternalNameOrTitle('[Name]')|field\", \"FirstUniqueAncestorSecurableObject\",\r\n        \"Folders|folders|/getByUrl('[Name]')|folder\", \"Lists|lists|/getByTitle('[Name]')|list\",\r\n        \"ListTemplates|listtemplates|('[Name]')|listtemplate\", \"Navigation\", \"ParentWeb\",\r\n        \"PushNotificationSubscribers\", \"RecycleBin\", \"RegionalSettings\", \"RoleAssignments|roleassignments|([Name])|roleassignment\",\r\n        \"RoleDefinitions|roledefinitions|/getByName('[Name]')|roledefinition\", \"RootFolder|folder|/getByUrl('[Name]')|file\",\r\n        \"SiteGroups|sitegroups|/getByName('[Name]')|group\", \"SiteUserInfoList\", \"SiteUsers|users|/getById([Name])|user\",\r\n        \"TenantAppCatalog|tenantappcatalog\", \"ThemeInfo\", \"TitleResource\",\r\n        \"UserCustomActions|usercustomactions|('[Name]')|usercustomaction\", \"WebInfos|webinfos\", \"Webs|webs\", \"WorkflowAssociations\", \"WorkflowTemplates\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Applies the theme specified by the contents of each of the files specified in the arguments to the site.\r\n    applyTheme: {\r\n        argNames: [\"colorpaletteurl\", \"fontschemeurl\", \"backgroundimageurl\", \"sharegenerated\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Applies the specified site definition or site template to the Web site that has no template applied to it.\r\n    applyWebTemplate: {\r\n        argName: [\"name\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInQS\r\n    },\r\n    // Creates unique role assignments for the securable object.\r\n    breakRoleInheritance: {\r\n        argNames: [\"copyroleassignments\", \"clearsubscopes\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Checks whether the push notification subscriber exist for the current user with the given device application instance ID.\r\n    doesPushNotificationSubscriberExist: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Returns whether the current user has the given set of permissions.\r\n    doesUserHavePermissions: {\r\n        argNames: [\"High\", \"Low\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    // Checks whether the specified login name belongs to a valid user in the site. If the user doesn't exist, adds the user to the site.\r\n    ensureUser: {\r\n        argNames: [\"logonName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Sends data to an OData service.\r\n    executeRemoteLOB: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets the app BDC catalog.\r\n    getAppBdcCatalog: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Gets the app BDC catalog for the specified app instance.\r\n    getAppBdcCatalogForAppInstance: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Retrieves an AppInstance installed on this Site.\r\n    getAppInstanceById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Retrieves all AppInstances installed on this site that are instances of the specified App.\r\n    getAppInstancesByProductId: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Returns a collection of site templates available for the site.\r\n    getAvailableWebTemplates: {\r\n        argNames: [\"lcid\", \"doincludecrosslanguage\"],\r\n        requestType: utils_1.RequestType.GetWithArgs\r\n    },\r\n    // Returns the list gallery on the site.\r\n    getCatalog: {\r\n        argNames: [\"galleryType\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Returns the collection of all changes from the change log that have occurred within the scope of the site, based on the specified query.\r\n    getChanges: {\r\n        argNames: [\"query\"],\r\n        metadataType: \"SP.ChangeQuery\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets the context information for the site. Static method.\r\n    getContextWebInformation: {\r\n        name: \"contextInfo\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Gets the custom list templates for the site.\r\n    getCustomListTemplates: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    // Gets the document libraries on a site. Static method. (SharePoint Online only)\r\n    getDocumentLibraries: {\r\n        argNames: [\"url\"],\r\n        name: \"sp.web.getDocumentLibraries\",\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    // Gets the specified external content type in a line-of-business (LOB) system application.\r\n    getEntity: {\r\n        argNames: [\"namespace\", \"name\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Returns the file object located at the specified server-relative URL.\r\n    getFileByServerRelativeUrl: {\r\n        argNames: [\"url\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"file\"\r\n    },\r\n    // Returns the folder object located at the specified server-relative URL.\r\n    getFolderByServerRelativeUrl: {\r\n        argNames: [\"url\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"folder\"\r\n    },\r\n    // Gets the list at the specified site-relative URL. (SharePoint Online only)\r\n    getList: {\r\n        argNames: [\"url\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"list\"\r\n    },\r\n    // Gets the push notification subscriber over the site for the specified device application instance ID.\r\n    getPushNotificationSubscriber: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Queries for the push notification subscribers over the site for the specified value of custom arguments. Null or empty custom arguments will return subscribers without any filtering.\r\n    getPushNotificationSubscribersByArgs: {\r\n        argNames: [\"args\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Queries for the push notification subscribers over the site for the specified user.\r\n    getPushNotificationSubscribersByUser: {\r\n        argNames: [\"loginName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    // Returns the collection of child sites of the current site based on the specified query. (SharePoint Online only)\r\n    getSubwebsFilteredForCurrentUser: {\r\n        argNames: [\"nwebtemplatefilter\", \"nconfigurationfilter\"],\r\n        requestType: utils_1.RequestType.GetWithArgs,\r\n        returnType: \"webinfos\"\r\n    },\r\n    // Returns the user corresponding to the specified member identifier for the current site.\r\n    getUserById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"user\"\r\n    },\r\n    // Gets the effective permissions that the specified user has within the current application scope.\r\n    getUserEffectivePermissions: {\r\n        argNames: [\"loginName\"],\r\n        name: \"getUserEffectivePermissions(@user)?@user='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    // Gets the site URL from a page URL. Static method.\r\n    getWebUrlFromPageUrl: {\r\n        name: \"sp.web.getWebUrlFromPageUrl\",\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    // Uploads and installs an app package to this site.\r\n    loadAndInstallApp: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Uploads and installs an App package on the site in a specified locale.\r\n    loadAndInstallAppInSpecifiedLocale: {\r\n        argNames: [\"appPackageStream\", \"installationLocaleLCID\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Uploads an App package and creates an instance from it.\r\n    loadApp: {\r\n        argNames: [\"appPackageStream\", \"installationLocaleLCID\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Returns the name of the image file for the icon that is used to represent the specified file.\r\n    mapToIcon: {\r\n        argNames: [\"filename\", \"progid\", \"size\"],\r\n        requestType: utils_1.RequestType.GetWithArgs\r\n    },\r\n    // Processes a notification from an external system.\r\n    processExternalNotification: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Queries the object\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Registers the subscriber for push notifications over the site. If the registration already exists, the service token is updated with the new value.\r\n    registerPushNotificationSubscriber: {\r\n        argNames: [\"deviceappinstanceid\", \"servicetoken\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Resets the role inheritance for the securable object and inherits role assignments from the parent securable object.\r\n    resetRoleInheritance: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Unregisters the subscriber for push notifications from the site.\r\n    unregisterPushNotificationSubscriber: {\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.Web\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Web Information Collection\r\n */\r\nexports.webinfos = {\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Webs\r\n */\r\nexports.webs = {\r\n    add: {\r\n        argNames: [\"parameters\"],\r\n        metadataType: \"SP.WebCreationInformation\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=site.js.map\n\n/***/ }),\n\n/***/ 880:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * People Manager\r\n */\r\nexports.peoplemanager = {\r\n    amIFollowedBy: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    amIFollowing: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    follow: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInQS\r\n    },\r\n    followTag: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    getFollowedTags: {\r\n        argNames: [\"maxCount\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    getFollowersFor: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    getMyFollowers: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getMyProperties: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getMySuggestions: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getPeopleFollowedBy: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    getPeopleFollowedByMe: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getPropertiesFor: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    getTrendingTags: {\r\n        name: \"sp.userprofiles.peoplemanager.gettrendingtags\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getUserProfilePropertyFor: {\r\n        argNames: [\"accountName\", \"propertyName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    hideSuggestion: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInQS\r\n    },\r\n    isFollowing: {\r\n        argNames: [\"possibleFollowerAccountName\", \"possibleFolloweeAccountName\"],\r\n        name: \"sp.userprofiles.peoplemanager.isfollowing\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    setMyProfilePicture: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    stopFollowing: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInQS\r\n    },\r\n    stopFollowingTag: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n};\r\n/**\r\n * Profile Loader\r\n */\r\nexports.profileloader = {\r\n    createPersonalSiteEnqueueBulk: {\r\n        argNames: [\"emailIDs\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    getOwnerUserProfile: {\r\n        name: \"sp.userprofiles.profileloader.getowneruserprofile\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Post,\r\n        returnType: \"userprofile\"\r\n    },\r\n    getUserProfile: {\r\n        requestType: utils_1.RequestType.Post,\r\n        returnType: \"userprofile\"\r\n    },\r\n};\r\n/**\r\n * Social Feed\r\n */\r\nexports.socialfeed = {\r\n    actor: {\r\n        argNames: [\"accountName\"],\r\n        name: \"actor(item=@v)?@v='[[accountName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    actorFeed: {\r\n        argNames: [\"accountName\"],\r\n        name: \"actor(item=@v)/feed?@v='[[accountName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    clearMyUnreadMentionCount: {\r\n        name: \"my/mentionfeed/clearMyUnreadMentionCount\",\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    my: {\r\n        name: \"my\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myFeed: {\r\n        name: \"my/feed\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myLikes: {\r\n        name: \"my/likes\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myMentionFeed: {\r\n        name: \"my/mentionfeed\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myNews: {\r\n        name: \"my/news\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myTimelineFeed: {\r\n        name: \"my/timelinefeed\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myUnreadMentionCount: {\r\n        name: \"my/unreadmentioncount\",\r\n        requestType: utils_1.RequestType.Get\r\n    }\r\n};\r\n/**\r\n * User Profile\r\n */\r\nexports.userprofile = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"PersonalSite|site\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    createPersonalSiteEnque: {\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    shareAllSocialData: {\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    }\r\n};\r\n//# sourceMappingURL=social.js.map\n\n/***/ }),\n\n/***/ 881:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Group\r\n */\r\nexports.group = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Users|users|/getById([Name])|user\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Site Groups\r\n */\r\nexports.sitegroups = {\r\n    // Adds a group to the group collection.\r\n    add: {\r\n        metadataType: \"SP.Group\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Returns a group from the collection based on the member ID of the group.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"group\"\r\n    },\r\n    // Returns a cross-site group from the collection based on the name of the group.\r\n    getByName: {\r\n        argNames: [\"name\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"group\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Removes the group with the specified member ID from the collection.\r\n    removeById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Removes the cross-site group with the specified name from the collection.\r\n    removeByLoginName: {\r\n        argNames: [\"name\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n};\r\n/**\r\n * People Picker\r\n */\r\nexports.peoplepicker = {\r\n    clientPeoplePickerResolveUser: {\r\n        argNames: [\"queryParams\"],\r\n        metadataType: \"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\",\r\n        name: \"SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.ClientPeoplePickerResolveUser\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    clientPeoplePickerSearchUser: {\r\n        argNames: [\"queryParams\"],\r\n        metadataType: \"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\",\r\n        name: \"SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.ClientPeoplePickerSearchUser\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * User\r\n */\r\nexports.user = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Groups|sitegroups|([Name])|group\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Users\r\n */\r\nexports.users = {\r\n    // Adds a user to the user collection.\r\n    add: {\r\n        metadataType: \"SP.User\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets the user with the specified email address.\r\n    getByEmail: {\r\n        argNames: [\"email\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"user\"\r\n    },\r\n    // Gets the user with the specified member identifier (ID).\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"user\"\r\n    },\r\n    // Gets the user with the specified login name.\r\n    getByLoginName: {\r\n        argNames: [\"loginName\"],\r\n        name: \"getByLoginName(@v)?@v='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace,\r\n        returnType: \"user\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Removes the user with the specified ID.\r\n    removeById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Removes the user with the specified login name.\r\n    removeByLoginName: {\r\n        argNames: [\"loginName\"],\r\n        name: \"removeByLoginName(@v)?@v='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    }\r\n};\r\n//# sourceMappingURL=user.js.map\n\n/***/ }),\n\n/***/ 882:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * User Custom Action\r\n */\r\nexports.usercustomaction = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * User Custom Actions\r\n */\r\nexports.usercustomactions = {\r\n    // Adds a user custom action to the collection.\r\n    add: {\r\n        metadataType: \"SP.UserCustomAction\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Deletes all custom actions in the collection.\r\n    clear: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Returns the custom action with the specified identifier.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"usercustomaction\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=userCustomAction.js.map\n\n/***/ }),\n\n/***/ 883:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Calendar Types\r\n */\r\nexports.CalendarTypes = {\r\n    Gregorian: 1,\r\n    JapaneseEmperorEra: 3,\r\n    TaiwanCalendar: 4,\r\n    KoreanTangunEra: 5,\r\n    Hijri: 6,\r\n    Thai: 7,\r\n    HebrewLunar: 8,\r\n    GregorianMiddleEastFrench: 9,\r\n    GregorianArabic: 10,\r\n    GregorianTransliteratedEnglish: 11,\r\n    GregorianTransliteratedFrench: 12,\r\n    KoreanandJapaneseLunar: 14,\r\n    ChineseLunar: 15,\r\n    SakaEra: 16\r\n};\r\n/**\r\n * Check Out Types\r\n */\r\nexports.CheckOutType = { Online: 0, Offline: 1, None: 2 };\r\n/**\r\n * Choice Format Types\r\n */\r\nexports.ChoiceFormatType = { Dropdown: 0, RadioButtons: 1 };\r\n/**\r\n * Client Template Utility\r\n */\r\nexports.ClientTemplatesUtility = {\r\n    UserLookupDelimitString: \";#\",\r\n    UserMultiValueDelimitString: \",#\"\r\n};\r\n/**\r\n * Control Modes\r\n */\r\nexports.ControlMode = {\r\n    Invalid: 0,\r\n    Display: 1,\r\n    Edit: 2,\r\n    New: 3,\r\n    View: 4\r\n};\r\n/**\r\n * Date Format\r\n */\r\nexports.DateFormat = { DateOnly: 0, DateTime: 1 };\r\n/**\r\n * Draft Visibility Types\r\n */\r\nexports.DraftVisibilityType = { Reader: 0, Author: 1, Approver: 2 };\r\n/**\r\n * Event Receiver Synchronization Types\r\n */\r\nexports.EventReceiverSynchronizationType = { Synchronization: 1, Asynchronous: 2 };\r\n/**\r\n * Event Receiver Types\r\n */\r\nexports.EventReceiverType = {\r\n    ItemAdding: 1,\r\n    ItemUpdating: 2,\r\n    ItemDeleting: 3,\r\n    ItemCheckingIn: 4,\r\n    ItemCheckingOut: 5,\r\n    ItemUncheckingOut: 6,\r\n    ItemAttachmentAdding: 7,\r\n    ItemAttachmentDeleting: 8,\r\n    ItemFileMoving: 9,\r\n    ItemVersionDeleting: 11,\r\n    FieldAdding: 101,\r\n    FieldUpdating: 102,\r\n    FieldDeleting: 103,\r\n    ListAdding: 104,\r\n    ListDeleting: 105,\r\n    SiteDeleting: 201,\r\n    WebDeleting: 202,\r\n    WebMoving: 203,\r\n    WebAdding: 204,\r\n    GroupAdding: 301,\r\n    GroupUpdating: 302,\r\n    GroupDeleting: 303,\r\n    GroupUserAdding: 304,\r\n    GroupUserDeleting: 305,\r\n    RoleDefinitionAdding: 306,\r\n    RoleDefinitionUpdating: 307,\r\n    RoleDefinitionDeleting: 308,\r\n    RoleAssignmentAdding: 309,\r\n    RoleAssignmentDeleting: 310,\r\n    InheritanceBreaking: 311,\r\n    InheritanceResetting: 312,\r\n    WorkflowStarting: 501,\r\n    ItemAdded: 10001,\r\n    ItemUpdated: 10002,\r\n    ItemDeleted: 10003,\r\n    ItemCheckedIn: 10004,\r\n    ItemCheckedOut: 10005,\r\n    ItemUncheckedOut: 10006,\r\n    ItemAttachmentAdded: 10007,\r\n    ItemAttachmentDeleted: 10008,\r\n    ItemFileMoved: 10009,\r\n    ItemFileConverted: 10010,\r\n    ItemVersionDeleted: 10011,\r\n    FieldAdded: 10101,\r\n    FieldUpdated: 10102,\r\n    FieldDeleted: 10103,\r\n    ListAdded: 10104,\r\n    ListDeleted: 10105,\r\n    SiteDeleted: 10201,\r\n    WebDeleted: 10202,\r\n    WebMoved: 10203,\r\n    WebProvisioned: 10204,\r\n    GroupAdded: 10301,\r\n    GroupUpdated: 10302,\r\n    GroupDeleted: 10303,\r\n    GroupUserAdded: 10304,\r\n    GroupUserDeleted: 10305,\r\n    RoleDefinitionAdded: 10306,\r\n    RoleDefinitionUpdated: 10307,\r\n    RoleDefinitionDeleted: 10308,\r\n    RoleAssignmentAdded: 10309,\r\n    RoleAssignmentDeleted: 10310,\r\n    InheritanceBroken: 10311,\r\n    InheritanceReset: 10312,\r\n    WorkflowStarted: 10501,\r\n    WorkflowPostponed: 10502,\r\n    WorkflowCompleted: 10503,\r\n    EntityInstanceAdded: 10601,\r\n    EntityInstanceUpdated: 10602,\r\n    EntityInstanceDeleted: 10603,\r\n    AppInstalled: 10701,\r\n    AppUpgraded: 10702,\r\n    AppUninstalling: 10703,\r\n    EmailReceived: 20000,\r\n    ContextEvent: 32766\r\n};\r\n/**\r\n * Field Note Types\r\n */\r\nexports.FieldNoteType = {\r\n    /** Enhance Rich Text */\r\n    EnhancedRichText: 0,\r\n    /** Rich Text */\r\n    RichText: 1,\r\n    /** Text Only */\r\n    TextOnly: 2\r\n};\r\n/**\r\n * Field Number Type\r\n */\r\nexports.FieldNumberType = {\r\n    /** Decimal */\r\n    Decimal: 0,\r\n    /** Integer */\r\n    Integer: 1,\r\n    /** Percentage */\r\n    Percentage: 2,\r\n};\r\n/**\r\n * Field Result Types\r\n */\r\nexports.FieldResultType = {\r\n    /** Boolean */\r\n    Boolean: \"Boolean\",\r\n    /** Currency */\r\n    Currency: \"Currency\",\r\n    /** Date Only */\r\n    DateOnly: \"DateOnly\",\r\n    /** Date & Time */\r\n    DateTime: \"DateTime\",\r\n    /** Number */\r\n    Number: \"Number\",\r\n    /** Text */\r\n    Text: \"Text\"\r\n};\r\n/**\r\n * Field Types\r\n */\r\nexports.FieldType = {\r\n    AllDayEvent: 29,\r\n    Attachments: 19,\r\n    Boolean: 8,\r\n    Calculated: 17,\r\n    Choice: 6,\r\n    Computed: 12,\r\n    ContentTypeId: 25,\r\n    Counter: 5,\r\n    CrossProjectLink: 22,\r\n    Currency: 10,\r\n    DateTime: 4,\r\n    Error: 24,\r\n    File: 18,\r\n    Geolocation: 31,\r\n    GridChoice: 16,\r\n    Guid: 14,\r\n    Integer: 1,\r\n    Invalid: 0,\r\n    Lookup: 7,\r\n    MaxItems: 31,\r\n    ModStat: 23,\r\n    MultiChoice: 15,\r\n    Note: 3,\r\n    Number: 9,\r\n    PageSeparator: 26,\r\n    Recurrence: 21,\r\n    Text: 2,\r\n    ThreadIndex: 27,\r\n    Threading: 13,\r\n    URL: 11,\r\n    User: 20,\r\n    WorkflowEventType: 30,\r\n    WorkflowStatus: 28\r\n};\r\n/**\r\n * Field User Selection Types\r\n */\r\nexports.FieldUserSelectionType = { PeopleOnly: 0, PeopleAndGroups: 1 };\r\n/**\r\n * File Template Types\r\n*/\r\nexports.FileTemplateType = { StandardPage: 0, WikiPage: 1, FormPage: 2 };\r\n/**\r\n * Friendly Date Format\r\n */\r\nexports.FriendlyDateFormat = {\r\n    Unspecified: 0,\r\n    Disabled: 1,\r\n    Relative: 2\r\n};\r\n/**\r\n * List Template Types\r\n*/\r\nexports.ListTemplateType = {\r\n    AccessRequest: 160,\r\n    AdminTasks: 1200,\r\n    Agenda: 201,\r\n    AppDataCatalog: 125,\r\n    Announcements: 104,\r\n    CallTrack: 404,\r\n    Categories: 303,\r\n    Circulation: 405,\r\n    Comments: 302,\r\n    Contacts: 105,\r\n    CustomGrid: 120,\r\n    DataConnectionLibrary: 130,\r\n    DataSources: 110,\r\n    Decision: 204,\r\n    DesignCatalog: 124,\r\n    DeveloperSiteDraftApps: 1230,\r\n    DiscussionBoard: 108,\r\n    DocumentLibrary: 101,\r\n    Events: 106,\r\n    ExternalList: 600,\r\n    Facility: 402,\r\n    GanttTasks: 150,\r\n    GenericList: 100,\r\n    HealthReports: 1221,\r\n    HealthRules: 1220,\r\n    HelpLibrary: 151,\r\n    Holidays: 421,\r\n    HomePageLibrary: 212,\r\n    IMEDic: 499,\r\n    IssueTracking: 1100,\r\n    Links: 103,\r\n    ListTemplateCatalog: 114,\r\n    MasterPageCatalog: 116,\r\n    MaintenanceLogs: 175,\r\n    MeetingObjective: 207,\r\n    Meetings: 200,\r\n    MeetingUser: 202,\r\n    MySiteDocumentLibrary: 700,\r\n    Posts: 301,\r\n    NoCodePublic: 122,\r\n    NoCodeWorkflows: 117,\r\n    PictureLibrary: 109,\r\n    SolutionCatalog: 121,\r\n    Survey: 102,\r\n    Tasks: 107,\r\n    TasksWithTimelineAndHierarchy: 171,\r\n    TextBox: 210,\r\n    ThemeCatalog: 123,\r\n    ThingsToBring: 211,\r\n    Timecard: 420,\r\n    UserInformation: 112,\r\n    WebPageLibrary: 119,\r\n    WebPartCatalog: 113,\r\n    WebTemplateCatalog: 111,\r\n    Whereabouts: 403,\r\n    WorkflowHistory: 140,\r\n    WorkflowProcess: 118,\r\n    XMLForm: 115\r\n};\r\n/**\r\n * Locale LCID Types\r\n */\r\nexports.LocaleLCIDType = {\r\n    Afrikaans: 1078,\r\n    Albanian: 1052,\r\n    ArabicAlgeria: 5121,\r\n    ArabicBahrain: 15361,\r\n    ArabicEgypt: 3073,\r\n    ArabicIraq: 2049,\r\n    ArabicJordan: 11265,\r\n    ArabicLebanon: 12289,\r\n    ArabicLibya: 4097,\r\n    ArabicMorocco: 6145,\r\n    ArabicOman: 8193,\r\n    ArabicQatar: 16385,\r\n    ArabicSaudiArabia: 1025,\r\n    ArabicSyria: 10241,\r\n    ArabicTunisia: 7169,\r\n    ArabicUAE: 14337,\r\n    ArabicYemen: 9217,\r\n    Armenian: 1067,\r\n    AzeriCyrillic: 2092,\r\n    AzeriLatin: 1068,\r\n    Basque: 1069,\r\n    Belarusian: 1059,\r\n    Bulgarian: 1026,\r\n    Catalan: 1027,\r\n    ChineseHongKongSAR: 3076,\r\n    ChineseMacaoSAR: 5124,\r\n    ChinesePRC: 2052,\r\n    ChineseSingapore: 4100,\r\n    ChineseTaiwan: 1028,\r\n    CroatianCroatia: 1050,\r\n    Czech: 1029,\r\n    Danish: 1030,\r\n    Divehi: 1125,\r\n    DutchBelgium: 2067,\r\n    DutchNetherlands: 1043,\r\n    EnglishAustralia: 3081,\r\n    EnglishBelize: 10249,\r\n    EnglishCanada: 4105,\r\n    EnglishCaribbean: 9225,\r\n    EnglishIreland: 6153,\r\n    EnglishJamaica: 8201,\r\n    EnglishNewZealand: 5129,\r\n    EnglishPhilippines: 13321,\r\n    EnglishSouthAfrica: 7177,\r\n    EnglishTrinidad: 11273,\r\n    EnglishUnitedKingdom: 2057,\r\n    EnglishUnitedStates: 1033,\r\n    EnglishZimbabwe: 12297,\r\n    Estonian: 1061,\r\n    Faeroese: 1080,\r\n    Finnish: 1035,\r\n    FrenchBelgium: 2060,\r\n    FrenchCanada: 3084,\r\n    FrenchFrance: 1036,\r\n    FrenchLuxembourg: 5132,\r\n    FrenchMonaco: 6156,\r\n    FrenchSwitzerland: 4108,\r\n    Galician: 1110,\r\n    Georgian: 1079,\r\n    GermanAustria: 3079,\r\n    GermanGermany: 1031,\r\n    GermanLiechtenstein: 5127,\r\n    GermanLuxembourg: 4103,\r\n    GermanSwitzerland: 2055,\r\n    Greek: 1032,\r\n    Gujarati: 1095,\r\n    HebrewIsrael: 1037,\r\n    HindiIndia: 1081,\r\n    Hungarian: 1038,\r\n    Icelandic: 1039,\r\n    Indonesian: 1057,\r\n    ItalianItaly: 1040,\r\n    ItalianSwitzerland: 2064,\r\n    Japanese: 1041,\r\n    Kannada: 1099,\r\n    Kazakh: 1087,\r\n    Konkani: 1111,\r\n    Korean: 1042,\r\n    KyrgyzCyrillic: 1088,\r\n    Latvian: 1062,\r\n    Lithuanian: 1063,\r\n    MacedonianFYROM: 1071,\r\n    Malay: 1086,\r\n    MalayBruneiDarussalam: 2110,\r\n    Marathi: 1102,\r\n    MongolianCyrillic: 1104,\r\n    NorwegianBokmal: 1044,\r\n    NorwegianNynorsk: 2068,\r\n    PersianIran: 1065,\r\n    Polish: 1045,\r\n    PortugueseBrazil: 1046,\r\n    PortuguesePortugal: 2070,\r\n    Punjabi: 1094,\r\n    Romanian: 1048,\r\n    Russian: 1049,\r\n    Sanskrit: 1103,\r\n    SerbianCyrillic: 3098,\r\n    SerbianLatin: 2074,\r\n    Slovak: 1051,\r\n    Slovenian: 1060,\r\n    SpanishArgentina: 11274,\r\n    SpanishBolivia: 16394,\r\n    SpanishChile: 13322,\r\n    SpanishColombia: 9226,\r\n    SpanishCostaRica: 5130,\r\n    SpanishDominicanRepublic: 7178,\r\n    SpanishEcuador: 12298,\r\n    SpanishElSalvador: 17418,\r\n    SpanishGuatemala: 4106,\r\n    SpanishHonduras: 18442,\r\n    SpanishMexico: 2058,\r\n    SpanishNicaragua: 19466,\r\n    SpanishPanama: 6154,\r\n    SpanishParaguay: 15370,\r\n    SpanishPeru: 10250,\r\n    SpanishPuertoRico: 20490,\r\n    SpanishSpain: 3082,\r\n    SpanishUruguay: 14346,\r\n    SpanishVenezuela: 8202,\r\n    Swahili: 1089,\r\n    Swedish: 1053,\r\n    SwedishFinland: 2077,\r\n    Syriac: 1114,\r\n    Tamil: 1097,\r\n    Tatar: 1092,\r\n    Telugu: 1098,\r\n    ThaiThailand: 1054,\r\n    Turkish: 1055,\r\n    Ukrainian: 1058,\r\n    UrduPakistan: 1056,\r\n    UzbekCyrillic: 2115,\r\n    UzbekLatin: 1091,\r\n    Vietnamese: 1066,\r\n};\r\n/**\r\n * Page Types\r\n */\r\nexports.PageType = {\r\n    DefaultView: 0,\r\n    DialogView: 2,\r\n    DisplayForm: 4,\r\n    DisplayFormDialog: 5,\r\n    EditForm: 6,\r\n    EditFormDialog: 7,\r\n    Invalid: -1,\r\n    NewForm: 8,\r\n    NewFormDialog: 9,\r\n    NormalView: 1,\r\n    Page_MAXITEMS: 11,\r\n    SolutionForm: 10,\r\n    View: 3\r\n};\r\n/**\r\n * Personal Site Capabilities\r\n */\r\nexports.PersonalSiteCapabilities = {\r\n    Education: 16,\r\n    Guest: 32,\r\n    MyTasksDashboard: 8,\r\n    None: 0,\r\n    Profile: 1,\r\n    Social: 2,\r\n    Storage: 4\r\n};\r\n/**\r\n * Principal Sources\r\n */\r\nexports.PrincipalSources = {\r\n    All: 15,\r\n    MembershipProvider: 4,\r\n    None: 0,\r\n    RoleProvider: 8,\r\n    UserInfoList: 1,\r\n    Windows: 2\r\n};\r\n/**\r\n * Principal Types\r\n */\r\nexports.PrincipalTypes = {\r\n    All: 15,\r\n    DistributionList: 2,\r\n    None: 0,\r\n    SecurityGroup: 4,\r\n    SharePointGroup: 8,\r\n    User: 1\r\n};\r\n/**\r\n * Relationship Delete Behavior Types\r\n */\r\nexports.RelationshipDeleteBehaviorType = { None: 0, Cascade: 1, Restrict: 2 };\r\n/**\r\n * Reordering Rule Match Types\r\n */\r\nexports.ReorderingRuleMatchType = {\r\n    ContentTypeIs: 5,\r\n    FileExtensionMatches: 6,\r\n    ManualCondition: 8,\r\n    ResultContainsKeyword: 0,\r\n    ResultHasTag: 7,\r\n    TitleContainsKeyword: 1,\r\n    TitleMatchesKeyword: 2,\r\n    UrlExactlyMatches: 4,\r\n    UrlStartsWith: 3\r\n};\r\n/**\r\n * Role Types\r\n */\r\nexports.RoleType = {\r\n    Administrator: 5,\r\n    Contributor: 3,\r\n    Editor: 6,\r\n    Guest: 1,\r\n    None: 0,\r\n    Reader: 2,\r\n    WebDesigner: 4\r\n};\r\n/**\r\n * Status Pri Color\r\n */\r\nexports.StatusPriColor = {\r\n    Blue: \"blue\",\r\n    Green: \"green\",\r\n    Red: \"red\",\r\n    Yellow: \"yellow\"\r\n};\r\n/**\r\n * URL Format Types\r\n */\r\nexports.UrlFormatType = { Hyperlink: 0, Image: 1 };\r\n/**\r\n * URL Zones\r\n */\r\nexports.URLZones = { Default: 0, Intranet: 1, Internet: 2, Custom: 3, Extranet: 4 };\r\n/**\r\n * User Custom Action Registration Types\r\n */\r\nexports.UserCustomActionRegistrationType = { None: 0, List: 1, ContentType: 2, ProgId: 3, FileType: 4 };\r\n/**\r\n * View Types\r\n */\r\nexports.ViewType = {\r\n    Calendar: 524288,\r\n    Chart: 131072,\r\n    Gantt: 67108864,\r\n    Grid: 2048,\r\n    Html: 1,\r\n    Recurrence: 8193\r\n};\r\n//# sourceMappingURL=sptypes.js.map\n\n/***/ }),\n\n/***/ 884:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ComplexTypes = __webpack_require__(885);\r\nexports.ComplexTypes = ComplexTypes;\r\nvar Results = __webpack_require__(886);\r\nexports.Results = Results;\r\nvar SPTypes = __webpack_require__(887);\r\nexports.SPTypes = SPTypes;\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 885:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=complexTypes.js.map\n\n/***/ }),\n\n/***/ 886:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=results.js.map\n\n/***/ }),\n\n/***/ 887:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=sptypes.js.map\n\n/***/ }),\n\n/***/ 888:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = __webpack_require__(858);\r\n/**\r\n * Base Request\r\n */\r\nvar BaseRequest = /** @class */ (function (_super) {\r\n    __extends(BaseRequest, _super);\r\n    function BaseRequest() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    // Method to execute a method\r\n    BaseRequest.prototype.executeMethod = function (methodName, methodConfig, args) {\r\n        var targetInfo = null;\r\n        // See if the metadata is defined for the base object\r\n        var metadata = this[\"d\"] ? this[\"d\"].__metadata : this[\"__metadata\"];\r\n        if (metadata && metadata.uri) {\r\n            // Create the target information and use the url defined for the base object\r\n            targetInfo = {\r\n                url: metadata.uri\r\n            };\r\n            // See if we are inheriting the metadata type\r\n            if (methodConfig.inheritMetadataType) {\r\n                // Copy the metadata type\r\n                methodConfig.metadataType = metadata.type;\r\n            }\r\n            // Update the metadata uri\r\n            this.updateMetadataUri(metadata, targetInfo);\r\n        }\r\n        else {\r\n            // Copy the target information\r\n            targetInfo = Object.create(this.targetInfo);\r\n        }\r\n        // Get the method information\r\n        var methodInfo = new _1.MethodInfo(methodName, methodConfig, args);\r\n        // Update the target information\r\n        targetInfo.bufferFl = methodConfig.requestType == _1.RequestType.GetBuffer;\r\n        targetInfo.data = methodInfo.body;\r\n        targetInfo.defaultToWebFl = typeof (targetInfo.defaultToWebFl) === \"undefined\" && this.base ? this.base.targetInfo.defaultToWebFl : targetInfo.defaultToWebFl;\r\n        targetInfo.method = methodInfo.requestMethod;\r\n        // See if we are replacing the endpoint\r\n        if (methodInfo.replaceEndpointFl) {\r\n            // Replace the endpoint\r\n            targetInfo.endpoint = methodInfo.url;\r\n        }\r\n        else if (methodInfo.url && methodInfo.url.length > 0) {\r\n            // Ensure the end point exists\r\n            targetInfo.endpoint = targetInfo.endpoint ? targetInfo.endpoint : \"\";\r\n            // See if the endpoint exists, and the method is not a query string\r\n            if (targetInfo.endpoint && methodInfo.url && methodInfo.url.indexOf(\"?\") != 0) {\r\n                // Add a \"/\" separator to the url\r\n                targetInfo.endpoint += \"/\";\r\n            }\r\n            // Append the url\r\n            targetInfo.endpoint += methodInfo.url;\r\n        }\r\n        // Create a new object\r\n        var obj = new _1.Base(targetInfo);\r\n        // Set the properties\r\n        obj.base = this.base ? this.base : this;\r\n        obj.getAllItemsFl = methodInfo.getAllItemsFl;\r\n        obj.parent = this;\r\n        obj.requestType = methodConfig.requestType;\r\n        // Ensure the return type exists\r\n        if (methodConfig.returnType) {\r\n            // Add the methods\r\n            this.addMethods(obj, { __metadata: { type: methodConfig.returnType } });\r\n        }\r\n        // Return the object\r\n        return obj;\r\n    };\r\n    // Method to execute the request\r\n    BaseRequest.prototype.executeRequest = function (asyncFl, callback) {\r\n        var _this = this;\r\n        var isBatchRequest = this.base && this.base.batchRequests && this.base.batchRequests.length > 0;\r\n        var targetInfo = isBatchRequest ? _1.Batch.getTargetInfo(this.base.batchRequests) : new _1.TargetInfo(this.targetInfo);\r\n        // See if this is an asynchronous request\r\n        if (asyncFl) {\r\n            // See if the not a batch request, and it already exists\r\n            if (this.xhr && !isBatchRequest) {\r\n                // Execute the callback\r\n                callback ? callback(this) : null;\r\n            }\r\n            else {\r\n                // Create the request\r\n                this.xhr = new _1.XHRRequest(asyncFl, targetInfo, function () {\r\n                    // Update the response and status\r\n                    _this.response = _this.xhr.response;\r\n                    _this.status = _this.xhr.status;\r\n                    // See if we are returning a file buffer\r\n                    if (_this.requestType == _1.RequestType.GetBuffer) {\r\n                        // Execute the callback\r\n                        callback ? callback(_this.response) : null;\r\n                    }\r\n                    else {\r\n                        // Update the data object\r\n                        _this.updateDataObject(isBatchRequest);\r\n                        // Validate the data collection\r\n                        isBatchRequest ? null : _this.validateDataCollectionResults().then(function () {\r\n                            // Execute the callback\r\n                            callback ? callback(_this) : null;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (this.xhr) {\r\n            return this;\r\n        }\r\n        else {\r\n            // Create the request\r\n            this.xhr = new _1.XHRRequest(asyncFl, targetInfo);\r\n            // Update the response and status\r\n            this.response = this.xhr.response;\r\n            this.status = this.xhr.status;\r\n            // See if we are returning a file buffer\r\n            if (this.requestType == _1.RequestType.GetBuffer) {\r\n                // Return the response\r\n                return this.response;\r\n            }\r\n            // Update the base object\r\n            this.updateDataObject(isBatchRequest);\r\n            // See if the base is a collection and has more results\r\n            if (this[\"d\"] && this[\"d\"].__next) {\r\n                // Add the \"next\" method to get the next set of results\r\n                this[\"next\"] = new Function(\"return this.getNextSetOfResults();\");\r\n            }\r\n            // Return the base object\r\n            return this;\r\n        }\r\n    };\r\n    // Method to return a collection\r\n    BaseRequest.prototype.getCollection = function (method, args) {\r\n        // Copy the target information\r\n        var targetInfo = Object.create(this.targetInfo);\r\n        // Clear the target information properties from any previous requests\r\n        targetInfo.data = null;\r\n        targetInfo.method = null;\r\n        // See if the metadata is defined for the base object\r\n        var metadata = this[\"d\"] ? this[\"d\"].__metadata : this[\"__metadata\"];\r\n        if (metadata && metadata.uri) {\r\n            // Update the url of the target information\r\n            targetInfo.url = metadata.uri;\r\n            // Update the metadata uri\r\n            this.updateMetadataUri(metadata, targetInfo);\r\n            // Set the endpoint\r\n            targetInfo.endpoint = method;\r\n        }\r\n        else {\r\n            // Append the method to the endpoint\r\n            targetInfo.endpoint += \"/\" + method;\r\n        }\r\n        // Update the callback\r\n        targetInfo.callback = args && typeof (args[0]) === \"function\" ? args[0] : null;\r\n        // Create a new object\r\n        var obj = new _1.Base(targetInfo);\r\n        // Set the properties\r\n        obj.base = this.base ? this.base : this;\r\n        obj.parent = this;\r\n        // Return the object\r\n        return obj;\r\n    };\r\n    // Method to get the next set of results\r\n    BaseRequest.prototype.getNextSetOfResults = function () {\r\n        // Create the target information to query the next set of results\r\n        var targetInfo = Object.create(this.targetInfo);\r\n        targetInfo.endpoint = \"\";\r\n        targetInfo.url = this[\"d\"].__next;\r\n        // Create a new object\r\n        var obj = new _1.Base(targetInfo);\r\n        // Set the properties\r\n        obj.base = this.base ? this.base : this;\r\n        obj.parent = this;\r\n        // Return the object\r\n        return obj;\r\n    };\r\n    // Method to return a property of the base object\r\n    BaseRequest.prototype.getProperty = function (propertyName, requestType) {\r\n        // Copy the target information\r\n        var targetInfo = Object.create(this.targetInfo);\r\n        // Clear the target information properties from any previous requests\r\n        targetInfo.data = null;\r\n        targetInfo.method = null;\r\n        // See if the metadata is defined for the base object\r\n        var metadata = this[\"d\"] ? this[\"d\"].__metadata : this[\"__metadata\"];\r\n        if (metadata && metadata.uri) {\r\n            // Update the url of the target information\r\n            targetInfo.url = metadata.uri;\r\n            // Update the metadata uri\r\n            this.updateMetadataUri(metadata, targetInfo);\r\n            // Set the endpoint\r\n            targetInfo.endpoint = propertyName;\r\n        }\r\n        else {\r\n            // Append the property name to the endpoint\r\n            targetInfo.endpoint += \"/\" + propertyName;\r\n        }\r\n        // Create a new object\r\n        var obj = new _1.Base(targetInfo);\r\n        // Set the properties\r\n        obj.base = this.base ? this.base : this;\r\n        obj.parent = this;\r\n        // Add the methods\r\n        requestType ? this.addMethods(obj, { __metadata: { type: requestType } }) : null;\r\n        // Return the object\r\n        return obj;\r\n    };\r\n    // Method to update the metadata uri\r\n    BaseRequest.prototype.updateMetadataUri = function (metadata, targetInfo) {\r\n        // See if this is a field\r\n        if (/^SP.Field/.test(metadata.type) || /^SP\\..*Field$/.test(metadata.type)) {\r\n            // Fix the url reference\r\n            targetInfo.url = targetInfo.url.replace(/AvailableFields/, \"fields\");\r\n        }\r\n        else if (/SP.EventReceiverDefinition/.test(metadata.type)) {\r\n            // Fix the url reference\r\n            targetInfo.url = targetInfo.url.replace(/\\/EventReceiver\\//, \"/EventReceivers/\");\r\n        }\r\n        else if (/Microsoft.SharePoint.Marketplace.CorporateCuratedGallery.CorporateCatalogAppMetadata/.test(targetInfo.url)) {\r\n            // Fix the url reference\r\n            targetInfo.url = targetInfo.url.split(\"Microsoft.SharePoint.Marketplace.CorporateCuratedGallery.CorporateCatalogAppMetadata\")[0] + \"web/tenantappcatalog/availableapps/getbyid('\" + this[\"ID\"] + \"')\";\r\n        }\r\n    };\r\n    // Method to validate the data collection results\r\n    BaseRequest.prototype.validateDataCollectionResults = function () {\r\n        var _this = this;\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var request = function (xhr, resolve) {\r\n                // Validate the response\r\n                if (xhr && xhr.status < 400 && typeof (xhr.response) === \"string\" && xhr.response.length > 0) {\r\n                    // Convert the response and ensure the data property exists\r\n                    var data = JSON.parse(xhr.response);\r\n                    // See if there are more items to get\r\n                    if (data.d && data.d.__next) {\r\n                        // See if we are getting all items in the base request\r\n                        if (_this.getAllItemsFl) {\r\n                            // Create the target information to query the next set of results\r\n                            var targetInfo = Object.create(_this.targetInfo);\r\n                            targetInfo.endpoint = \"\";\r\n                            targetInfo.url = data.d.__next;\r\n                            // Create a new object\r\n                            new _1.XHRRequest(true, new _1.TargetInfo(targetInfo), function (xhr) {\r\n                                // Convert the response and ensure the data property exists\r\n                                var data = JSON.parse(xhr.response);\r\n                                if (data.d) {\r\n                                    // Update the data collection\r\n                                    _this.updateDataCollection(_this, data.d.results);\r\n                                    // Append the raw data results\r\n                                    _this[\"d\"].results = _this[\"d\"].results.concat(data.d.results);\r\n                                    // Validate the data collection\r\n                                    request(xhr, resolve);\r\n                                }\r\n                                // Resolve the promise\r\n                                resolve();\r\n                            });\r\n                        }\r\n                        else {\r\n                            // Add a method to get the next set of results\r\n                            _this[\"next\"] = new Function(\"return this.getNextSetOfResults();\");\r\n                            // Resolve the promise\r\n                            resolve();\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    }\r\n                }\r\n                else {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                }\r\n            };\r\n            // Execute the request\r\n            request(_this.xhr, resolve);\r\n        });\r\n    };\r\n    return BaseRequest;\r\n}(_1.BaseHelper));\r\nexports.BaseRequest = BaseRequest;\r\n//# sourceMappingURL=baseRequest.js.map\n\n/***/ }),\n\n/***/ 889:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\nvar _1 = __webpack_require__(858);\r\n/**\r\n * Base Execution\r\n */\r\nvar BaseExecution = /** @class */ (function (_super) {\r\n    __extends(BaseExecution, _super);\r\n    function BaseExecution() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    // Method to execute this request as a batch request\r\n    BaseExecution.prototype.batch = function (arg) {\r\n        var callback = null;\r\n        var appendFl = false;\r\n        // See if the input is a boolean\r\n        if (typeof (arg) === \"boolean\") {\r\n            // Set the flag\r\n            appendFl = arg;\r\n        }\r\n        else {\r\n            // Set the callback\r\n            callback = arg;\r\n        }\r\n        // Set the base\r\n        this.base = this.base ? this.base : this;\r\n        // See if we are appending this request\r\n        if (appendFl && this.base.batchRequests) {\r\n            // Append the request\r\n            this.base.batchRequests[this.base.batchRequests.length - 1].push({\r\n                targetInfo: new _1.TargetInfo(this.targetInfo)\r\n            });\r\n        }\r\n        else {\r\n            // Ensure the batch requests exist\r\n            this.base.batchRequests = this.base.batchRequests || [];\r\n            // Create the request\r\n            this.base.batchRequests.push([{\r\n                    callback: callback,\r\n                    targetInfo: new _1.TargetInfo(this.targetInfo)\r\n                }]);\r\n        }\r\n        // Return this object\r\n        return this;\r\n    };\r\n    // Method to execute the request\r\n    BaseExecution.prototype.execute = function () {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var callback = null;\r\n        var waitFl = false;\r\n        // Set the callback and wait flag\r\n        switch (args.length) {\r\n            case 1:\r\n                callback = typeof (args[0]) === \"boolean\" ? callback : args[0];\r\n                waitFl = typeof (args[0]) === \"boolean\" ? args[0] : waitFl;\r\n                break;\r\n            case 2:\r\n                callback = args[0];\r\n                waitFl = args[1];\r\n                break;\r\n        }\r\n        // Set the base\r\n        this.base = this.base ? this.base : this;\r\n        // Set the response index\r\n        this.responseIndex = this.base.responses.length;\r\n        // Add this object to the responses\r\n        this.base.responses.push(this);\r\n        // See if we are waiting for the responses to complete\r\n        if (waitFl) {\r\n            // Wait for the responses to execute\r\n            this.waitForRequestsToComplete(function () {\r\n                // Execute this request\r\n                _this.executeRequest(true, function (response) {\r\n                    // See if there is a callback\r\n                    if (callback) {\r\n                        // Set the base to this object, and clear requests\r\n                        // This will ensure requests from this object do not conflict w/ this request\r\n                        _this.base = _this;\r\n                        _this.base.responses = [];\r\n                        // Execute the callback and see if it returns a promise\r\n                        var returnVal = callback(response);\r\n                        var waitFunc = returnVal ? returnVal.done || returnVal.then : null;\r\n                        if (waitFunc && typeof (waitFunc) === \"function\") {\r\n                            // Wait for the promise to complete\r\n                            waitFunc(function () {\r\n                                // Reset the base\r\n                                _this.base = _this.parent.base;\r\n                                // Set the wait flag\r\n                                _this.base.waitFlags[_this.responseIndex] = true;\r\n                            });\r\n                            // Wait for the promise to complete\r\n                            return;\r\n                        }\r\n                        // Reset the base\r\n                        _this.base = _this.parent.base;\r\n                    }\r\n                    // Set the wait flag\r\n                    _this.base.waitFlags[_this.responseIndex] = true;\r\n                });\r\n            }, this.responseIndex);\r\n        }\r\n        else {\r\n            // Execute this request\r\n            this.executeRequest(true, function (response) {\r\n                // Execute the callback and see if it returns a promise\r\n                var returnVal = callback ? callback(response) : null;\r\n                if (returnVal && typeof (returnVal.done) === \"function\") {\r\n                    // Wait for the promise to complete\r\n                    returnVal.done(function () {\r\n                        // Set the wait flag\r\n                        _this.base.waitFlags[_this.responseIndex] = true;\r\n                    });\r\n                }\r\n                else {\r\n                    // Set the wait flag\r\n                    _this.base.waitFlags[_this.responseIndex] = true;\r\n                }\r\n            });\r\n        }\r\n        // Return this object\r\n        return this;\r\n    };\r\n    // Method to execute the request synchronously\r\n    BaseExecution.prototype.executeAndWait = function () { return this.executeRequest(false); };\r\n    // Method to wait for the parent requests to complete\r\n    BaseExecution.prototype.waitForRequestsToComplete = function (callback, requestIdx) {\r\n        var _this = this;\r\n        // Loop until the requests have completed\r\n        var intervalId = lib_1.ContextInfo.window.setInterval(function () {\r\n            var counter = 0;\r\n            // Parse the responses to the requests\r\n            for (var i = 0; i < _this.base.responses.length; i++) {\r\n                var response = _this.base.responses[i];\r\n                // See if we are waiting until a specified index\r\n                if (requestIdx == counter++) {\r\n                    break;\r\n                }\r\n                // Return if the request hasn't completed\r\n                if (response.xhr == null || !response.xhr.completedFl) {\r\n                    return;\r\n                }\r\n                // Ensure the wait flag is set for the previous request\r\n                if (counter > 0 && _this.base.waitFlags[counter - 1] != true) {\r\n                    return;\r\n                }\r\n            }\r\n            // Clear the interval\r\n            lib_1.ContextInfo.window.clearInterval(intervalId);\r\n            // Execute the callback\r\n            callback();\r\n        }, 10);\r\n    };\r\n    return BaseExecution;\r\n}(_1.BaseRequest));\r\nexports.BaseExecution = BaseExecution;\r\n//# sourceMappingURL=baseExecution.js.map\n\n/***/ }),\n\n/***/ 890:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = __webpack_require__(858);\r\n/*********************************************************************************************************************************/\r\n// Base\r\n// This is the base class for all objects.\r\n/*********************************************************************************************************************************/\r\nvar Base = /** @class */ (function (_super) {\r\n    __extends(Base, _super);\r\n    /**\r\n     * Constructor\r\n     * @param targetInfo - The target information.\r\n     */\r\n    function Base(targetInfo) {\r\n        var _this = _super.call(this) || this;\r\n        // Default the properties\r\n        _this.targetInfo = Object.create(targetInfo || {});\r\n        _this.responses = [];\r\n        _this.requestType = 0;\r\n        _this.waitFlags = [];\r\n        return _this;\r\n    }\r\n    // Method to wait for the requests to complete\r\n    Base.prototype.done = function (resolve) {\r\n        var _this = this;\r\n        // Ensure the base is set\r\n        this.base = this.base ? this.base : this;\r\n        // Ensure the response index is set\r\n        this.responseIndex = this.responseIndex >= 0 ? this.responseIndex : 0;\r\n        // Wait for the responses to execute\r\n        this.waitForRequestsToComplete(function () {\r\n            var responses = _this.base.responses;\r\n            // Clear the responses\r\n            _this.base.responses = [];\r\n            // Clear the wait flags\r\n            _this.base.waitFlags = [];\r\n            // Resolve the request\r\n            resolve ? resolve.apply(_this, responses) : null;\r\n        });\r\n    };\r\n    // Method to get the request information\r\n    Base.prototype.getInfo = function () { return (new _1.TargetInfo(this.targetInfo)).requestInfo; };\r\n    // Method to stringify the object\r\n    Base.prototype.stringify = function () {\r\n        // Stringify the object\r\n        return JSON.stringify({\r\n            response: this.response,\r\n            status: this.status,\r\n            targetInfo: this.targetInfo\r\n        });\r\n    };\r\n    return Base;\r\n}(_1.BaseExecution));\r\nexports.Base = Base;\r\n//# sourceMappingURL=base.js.map\n\n/***/ }),\n\n/***/ 891:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\nvar _1 = __webpack_require__(858);\r\n/**\r\n * Batch Requests\r\n */\r\nvar Batch = /** @class */ (function () {\r\n    function Batch() {\r\n    }\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to generate a batch request\r\n    Batch.getTargetInfo = function (requests) {\r\n        var batchId = \"batch_\" + lib_1.ContextInfo.generateGUID();\r\n        var batchRequests = [];\r\n        // Parse the requests\r\n        for (var i = 0; i < requests.length; i++) {\r\n            // Create the batch request\r\n            batchRequests.push(this.createBatch(batchId, requests[i]));\r\n        }\r\n        // End the batch request\r\n        batchRequests.push(\"--\" + batchId + \"--\");\r\n        // Return the target info\r\n        return new _1.TargetInfo({\r\n            endpoint: \"$batch\",\r\n            method: \"POST\",\r\n            data: batchRequests.join(\"\\r\\n\"),\r\n            requestHeader: {\r\n                \"Content-Type\": 'multipart/mixed; boundary=\"' + batchId + '\"'\r\n            }\r\n        });\r\n    };\r\n    // Method to generate a batch request\r\n    Batch.createBatch = function (batchId, requests) {\r\n        // Create the batch request\r\n        var batch = [\"--\" + batchId];\r\n        // Determine if the batch requires a change set\r\n        var requiresChangeset = requests[0] && requests[0].targetInfo.requestMethod != \"GET\";\r\n        if (requiresChangeset) {\r\n            var changesets = [];\r\n            var changesetId = \"changeset_\" + lib_1.ContextInfo.generateGUID();\r\n            // Parse the requests\r\n            for (var i = 0; i < requests.length; i++) {\r\n                var request = [];\r\n                var targetInfo = requests[i].targetInfo;\r\n                // Create a change set\r\n                request.push(\"--\" + changesetId);\r\n                request.push(\"Content-Type: application/http\");\r\n                request.push(\"Content-Transfer-Encoding: binary\");\r\n                request.push(\"\");\r\n                request.push(\"POST \" + targetInfo.requestUrl + \" HTTP/1.1\");\r\n                request.push(\"Content-Type: application/json;odata=verbose\");\r\n                request.push(\"\");\r\n                targetInfo.requestData ? request.push(targetInfo.requestData) : null;\r\n                request.push(\"\");\r\n                // Add the request to the change set\r\n                changesets.push(request.join(\"\\r\\n\"));\r\n            }\r\n            // End the change set\r\n            changesets.push(\"--\" + changesetId + \"--\");\r\n            // Generate the change set\r\n            var changeset = changesets.join(\"\\r\\n\");\r\n            // Add the change set information to the batch\r\n            batch.push(\"Content-Type: multipart/mixed; boundary=\" + changesetId);\r\n            batch.push(\"Content-Length: \" + changeset.length);\r\n            batch.push(\"Content-Transfer-Encoding: binary\");\r\n            batch.push(\"\");\r\n            batch.push(changeset);\r\n            batch.push(\"\");\r\n        }\r\n        else if (requests[0]) {\r\n            var targetInfo = requests[0].targetInfo;\r\n            // Add the request to the batch\r\n            batch.push(\"Content-Type: application/http\");\r\n            batch.push(\"Content-Transfer-Encoding: binary\");\r\n            batch.push(\"\");\r\n            batch.push(\"GET \" + targetInfo.requestUrl + \" HTTP/1.1\");\r\n            batch.push(\"Accept: application/json;odata=verbose\");\r\n            batch.push(\"\");\r\n            targetInfo.requestData ? batch.push(targetInfo.requestData) : null;\r\n            batch.push(\"\");\r\n        }\r\n        // Return the batch request\r\n        return batch.join(\"\\r\\n\");\r\n    };\r\n    return Batch;\r\n}());\r\nexports.Batch = Batch;\r\n//# sourceMappingURL=batch.js.map\n\n/***/ }),\n\n/***/ 892:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = __webpack_require__(858);\r\n/*********************************************************************************************************************************/\r\n// Method Information\r\n// This class will create the method information for the request.\r\n/*********************************************************************************************************************************/\r\nvar MethodInfo = /** @class */ (function () {\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function MethodInfo(methodName, methodInfo, args) {\r\n        // Default the properties\r\n        this.methodInfo = methodInfo;\r\n        this.methodInfo.argValues = args;\r\n        this.methodInfo.name = typeof (this.methodInfo.name) === \"string\" ? this.methodInfo.name : methodName;\r\n        // Generate the parameters\r\n        this.generateParams();\r\n        // Generate the url\r\n        this.methodUrl = this.generateUrl();\r\n    }\r\n    Object.defineProperty(MethodInfo.prototype, \"body\", {\r\n        /*********************************************************************************************************************************/\r\n        // Public Properties\r\n        /*********************************************************************************************************************************/\r\n        // The data passed through the body of the request\r\n        get: function () { return this.methodData; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"getAllItemsFl\", {\r\n        // Flag to determine if we are getting all items\r\n        get: function () { return this.methodInfo.getAllItemsFl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"replaceEndpointFl\", {\r\n        // Flag to determine if this method replaces the endpoint\r\n        get: function () { return this.methodInfo.replaceEndpointFl ? true : false; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"requestMethod\", {\r\n        // The request method\r\n        get: function () {\r\n            // Return the request method if it exists\r\n            if (typeof (this.methodInfo.requestMethod) === \"string\") {\r\n                return this.methodInfo.requestMethod;\r\n            }\r\n            // Determine the request method, based on the request type\r\n            switch (this.methodInfo.requestType) {\r\n                case _1.RequestType.Delete:\r\n                case _1.RequestType.Post:\r\n                case _1.RequestType.PostWithArgs:\r\n                case _1.RequestType.PostWithArgsInBody:\r\n                case _1.RequestType.PostWithArgsInQS:\r\n                case _1.RequestType.PostWithArgsValueOnly:\r\n                case _1.RequestType.PostReplace:\r\n                    return \"POST\";\r\n                default:\r\n                    return \"GET\";\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"url\", {\r\n        // The url of the method and parameters\r\n        get: function () { return this.methodUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"passDataInBody\", {\r\n        /*********************************************************************************************************************************/\r\n        // Private Variables\r\n        /*********************************************************************************************************************************/\r\n        get: function () { return this.methodInfo.requestType == _1.RequestType.GetWithArgsInBody || this.methodInfo.requestType == _1.RequestType.PostWithArgsInBody; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"passDataInQS\", {\r\n        get: function () { return this.methodInfo.requestType == _1.RequestType.GetWithArgsInQS || this.methodInfo.requestType == _1.RequestType.PostWithArgsInQS; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"isTemplate\", {\r\n        get: function () { return this.methodInfo.data ? true : false; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"replace\", {\r\n        get: function () { return this.methodInfo.requestType == _1.RequestType.GetReplace || this.methodInfo.requestType == _1.RequestType.PostReplace; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*********************************************************************************************************************************/\r\n    // Private Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to generate the method input parameters\r\n    MethodInfo.prototype.generateParams = function () {\r\n        var params = {};\r\n        // Ensure values exist\r\n        if (this.methodInfo.argValues == null) {\r\n            return;\r\n        }\r\n        // See if the argument names exist\r\n        if (this.methodInfo.argNames) {\r\n            // Parse the argument names\r\n            for (var i = 0; i < this.methodInfo.argNames.length && i < this.methodInfo.argValues.length; i++) {\r\n                var name_1 = this.methodInfo.argNames[i];\r\n                var value = this.methodInfo.argValues[i];\r\n                // Copy the parameter value\r\n                switch (typeof (this.methodInfo.argValues[i])) {\r\n                    case \"boolean\":\r\n                        params[name_1] = this.methodInfo.argValues[i] ? \"true\" : \"false\";\r\n                        break;\r\n                    case \"number\":\r\n                        params[name_1] = this.methodInfo.argValues[i];\r\n                        break;\r\n                    //case \"string\":\r\n                    //params[name] = this.isTemplate || this.replace ? value : \"'\" + value + \"'\";\r\n                    //break;\r\n                    default:\r\n                        params[name_1] = value;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        // See if the method has parameters\r\n        var isEmpty = true;\r\n        for (var k in params) {\r\n            isEmpty = false;\r\n            break;\r\n        }\r\n        this.methodParams = isEmpty ? null : params;\r\n        // See if method parameters exist\r\n        if (this.methodParams) {\r\n            // See if a template is defined for the method data\r\n            if (this.isTemplate) {\r\n                // Ensure the object is a string\r\n                if (typeof (this.methodInfo.data) !== \"string\") {\r\n                    // Stringify the object\r\n                    this.methodInfo.data = JSON.stringify(this.methodInfo.data);\r\n                }\r\n                // Parse the arguments\r\n                for (var key in this.methodParams) {\r\n                    // Replace the argument in the template\r\n                    this.methodInfo.data = this.methodInfo.data.replace(\"[[\" + key + \"]]\", this.methodParams[key].replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\"));\r\n                }\r\n                // Set the method data\r\n                this.methodData = JSON.parse(this.methodInfo.data);\r\n            }\r\n        }\r\n        // See if argument values exist\r\n        if (this.methodInfo.argValues && this.methodInfo.argValues.length > 0) {\r\n            // See if argument names exist\r\n            if (this.methodInfo.argNames == null) {\r\n                // Set the method data to first argument value\r\n                this.methodData = this.methodInfo.argValues[0];\r\n            }\r\n            else if (this.methodInfo.argValues.length > this.methodInfo.argNames.length) {\r\n                // Set the method data to the next available argument value\r\n                this.methodData = this.methodInfo.argValues[this.methodInfo.argNames.length];\r\n            }\r\n        }\r\n        // See if the metadata type exists\r\n        if (this.methodInfo.metadataType) {\r\n            // See if parameters exist\r\n            if (this.methodInfo.argNames) {\r\n                // Append the metadata to the first parameter, if it doesn't exist\r\n                (this.methodData || this.methodParams)[this.methodInfo.argNames[0]][\"__metadata\"] =\r\n                    (this.methodData || this.methodParams)[this.methodInfo.argNames[0]][\"__metadata\"] || { \"type\": this.methodInfo.metadataType };\r\n            }\r\n            else {\r\n                // Append the metadata to the parameters, if it doesn't exist\r\n                (this.methodData || this.methodParams)[\"__metadata\"] =\r\n                    (this.methodData || this.methodParams)[\"__metadata\"] || { \"type\": this.methodInfo.metadataType };\r\n            }\r\n        }\r\n    };\r\n    // Method to generate the method and parameters as a url\r\n    MethodInfo.prototype.generateUrl = function () {\r\n        var url = this.methodInfo.name;\r\n        // See if we are deleting the object\r\n        if (this.methodInfo.requestType == _1.RequestType.Delete) {\r\n            // Update the url\r\n            url = \"deleteObject\";\r\n        }\r\n        // See if we are passing the data in the body\r\n        if (this.passDataInBody) {\r\n            var data = this.methodData || this.methodParams;\r\n            // Stringify the data to be passed in the body\r\n            this.methodData = JSON.stringify(data);\r\n        }\r\n        // See if we are passing the data in the query string\r\n        if (this.passDataInQS) {\r\n            var data = this.methodParams || this.methodData;\r\n            // Append the parameters in the query string\r\n            url += \"(@v)?@v=\" + (typeof (data) === \"string\" ? \"'\" + encodeURIComponent(data) + \"'\" : JSON.stringify(data));\r\n        }\r\n        // See if we are replacing the arguments\r\n        if (this.replace) {\r\n            // Parse the arguments\r\n            for (var key in this.methodParams) {\r\n                // Replace the argument in the url\r\n                url = url.replace(\"[[\" + key + \"]]\", encodeURIComponent(this.methodParams[key]));\r\n            }\r\n        }\r\n        else if (this.methodInfo.requestType == _1.RequestType.OData) {\r\n            var oData = new _1.OData(this.methodParams[\"oData\"]);\r\n            // Update the url\r\n            url = \"?\" + oData.QueryString;\r\n            // Set the get all items Flag\r\n            this.methodInfo.getAllItemsFl = oData.GetAllItems;\r\n        }\r\n        else if (!this.passDataInBody && !this.passDataInQS) {\r\n            var params = \"\";\r\n            // Ensure data exists\r\n            var data = this.methodParams || this.methodData;\r\n            if (data) {\r\n                // Ensure the data is an object\r\n                data = data && typeof (data) === \"object\" ? data : { value: data };\r\n                // Parse the parameters\r\n                for (var name_2 in data) {\r\n                    var value = data[name_2];\r\n                    value = typeof (value) === \"string\" ? \"'\" + value + \"'\" : value;\r\n                    switch (this.methodInfo.requestType) {\r\n                        // Append the value only\r\n                        case _1.RequestType.GetWithArgsValueOnly:\r\n                        case _1.RequestType.PostWithArgsValueOnly:\r\n                            params += value + \", \";\r\n                            break;\r\n                        // Append the parameter and value\r\n                        default:\r\n                            params += name_2 + \"=\" + value + \", \";\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            // Set the url\r\n            url += params.length > 0 ? \"(\" + params.replace(/, $/, \"\") + \")\" : \"\";\r\n        }\r\n        // Return the url\r\n        return url;\r\n    };\r\n    return MethodInfo;\r\n}());\r\nexports.MethodInfo = MethodInfo;\r\n//# sourceMappingURL=methodInfo.js.map\n\n/***/ }),\n\n/***/ 893:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * OData\r\n */\r\nvar OData = /** @class */ (function () {\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    // The class constructor\r\n    function OData(oData) {\r\n        // Default the Variables\r\n        this._custom = oData && oData.Custom ? oData.Custom : null;\r\n        this._expand = oData && oData.Expand ? oData.Expand : [];\r\n        this._filter = oData && oData.Filter ? oData.Filter : null;\r\n        this._getAllItems = oData && oData.GetAllItems ? oData.GetAllItems : false;\r\n        this._orderBy = oData && oData.OrderBy ? oData.OrderBy : [];\r\n        this._select = oData && oData.Select ? oData.Select : [];\r\n        this._skip = oData && oData.Skip ? oData.Skip : null;\r\n        this._top = oData && oData.Top ? oData.Top : null;\r\n    }\r\n    Object.defineProperty(OData.prototype, \"Custom\", {\r\n        /*********************************************************************************************************************************/\r\n        // Properties\r\n        /*********************************************************************************************************************************/\r\n        // Custom\r\n        get: function () { return this._custom; },\r\n        set: function (value) { this._custom = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Expand\", {\r\n        // Expand\r\n        get: function () { return this._expand; },\r\n        set: function (value) { this._expand = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Filter\", {\r\n        // Filter\r\n        get: function () { return this._filter; },\r\n        set: function (value) { this._filter = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"GetAllItems\", {\r\n        // Flag to get all items\r\n        get: function () { return this._getAllItems; },\r\n        set: function (value) { this._getAllItems = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"OrderBy\", {\r\n        // Order By\r\n        get: function () { return this._orderBy; },\r\n        set: function (value) { this._orderBy = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"QueryString\", {\r\n        // Query String\r\n        get: function () {\r\n            var qs = \"\";\r\n            var values = [];\r\n            // Get the query string values for the properties\r\n            values.push(this.getQSValue(\"$select\", this._select));\r\n            values.push(this.getQSValue(\"$orderby\", this._orderBy));\r\n            this._top ? values.push(\"$top=\" + this._top) : null;\r\n            this._skip ? values.push(\"$skip=\" + this._skip) : null;\r\n            this._filter ? values.push(\"$filter=\" + this._filter) : null;\r\n            values.push(this.getQSValue(\"$expand\", this._expand));\r\n            this._custom ? values.push(this._custom) : null;\r\n            // Parse the values\r\n            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\r\n                var value = values_1[_i];\r\n                // Ensure a value exists\r\n                if (value && value != \"\") {\r\n                    // Append the query string value\r\n                    qs += (qs == \"\" ? \"\" : \"&\") + value;\r\n                }\r\n            }\r\n            // Return the query string\r\n            return qs;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Select\", {\r\n        // Select\r\n        get: function () { return this._select; },\r\n        set: function (value) { this._select = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Skip\", {\r\n        // Skip\r\n        get: function () { return this._skip; },\r\n        set: function (value) { this._skip = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Top\", {\r\n        // Top\r\n        get: function () { return this._top; },\r\n        set: function (value) { this._top = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to convert the array of strings to a query string value.\r\n    OData.prototype.getQSValue = function (qsKey, keys) {\r\n        // Return the query string\r\n        return keys.length > 0 ? qsKey + \"=\" + keys.join(\",\") : \"\";\r\n    };\r\n    return OData;\r\n}());\r\nexports.OData = OData;\r\n//# sourceMappingURL=oData.js.map\n\n/***/ }),\n\n/***/ 894:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\n/**\r\n * Target Information\r\n */\r\nvar TargetInfo = /** @class */ (function () {\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function TargetInfo(targetInfo) {\r\n        // Default the properties\r\n        this.request = targetInfo || {};\r\n        this.requestData = this.request.data;\r\n        this.requestHeaders = this.request.requestHeader;\r\n        this.requestMethod = this.request.method ? this.request.method : \"GET\";\r\n        // Set the request url\r\n        this.setRequestUrl();\r\n    }\r\n    Object.defineProperty(TargetInfo.prototype, \"isBatchRequest\", {\r\n        // Flag to determine if this is a batch request\r\n        get: function () { return this.request.endpoint == \"$batch\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TargetInfo.prototype, \"requestInfo\", {\r\n        // The request information\r\n        get: function () {\r\n            // Return the request information\r\n            return {\r\n                data: this.requestData,\r\n                method: this.requestMethod,\r\n                url: this.requestUrl\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to get the domain url\r\n    TargetInfo.prototype.getDomainUrl = function () {\r\n        var url = lib_1.ContextInfo.document.location.href;\r\n        // See if this is an app web\r\n        if (lib_1.ContextInfo.isAppWeb) {\r\n            // Set the url to the host url\r\n            url = TargetInfo.getQueryStringValue(\"SPHostUrl\") + \"\";\r\n        }\r\n        // Split the url and validate it\r\n        url = url.split('/');\r\n        if (url && url.length >= 2) {\r\n            // Set the url\r\n            url = url[0] + \"//\" + url[2];\r\n        }\r\n        // Return the url\r\n        return url;\r\n    };\r\n    // Method to get a query string value\r\n    TargetInfo.getQueryStringValue = function (key) {\r\n        // Get the query string\r\n        var queryString = lib_1.ContextInfo.existsFl ? lib_1.ContextInfo.document.location.href.split('?') : [\"\"];\r\n        queryString = queryString.length > 1 ? queryString[1] : queryString[0];\r\n        // Parse the values\r\n        var values = queryString.split('&');\r\n        for (var i = 0; i < values.length; i++) {\r\n            var keyValue = values[i].split('=');\r\n            // Ensure a value exists\r\n            if (keyValue.length == 1) {\r\n                continue;\r\n            }\r\n            // See if this is the key we are looking for\r\n            if (decodeURIComponent(keyValue[0]) == key) {\r\n                return decodeURIComponent(keyValue[1]);\r\n            }\r\n        }\r\n        // Key was not found\r\n        return null;\r\n    };\r\n    // Method to set the request url\r\n    TargetInfo.prototype.setRequestUrl = function () {\r\n        var endpoint = this.request.endpoint ? \"/\" + this.request.endpoint : \"\";\r\n        var hostUrl = TargetInfo.getQueryStringValue(\"SPHostUrl\");\r\n        var qs = (endpoint.indexOf(\"?\") === -1 ? \"?\" : \"&\") + \"@target='{{Target}}'\";\r\n        var template = \"{{Url}}/_api/{{EndPoint}}{{TargetUrl}}\";\r\n        // See if we are defaulting the url for the app web\r\n        if (lib_1.ContextInfo.existsFl && lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl && lib_1.ContextInfo.isAppWeb && !this.request.overrideDefaultRequestToHostFl && this.request.url == null) {\r\n            // Default the url to the host web\r\n            this.request.url = hostUrl;\r\n        }\r\n        // Ensure the url exists\r\n        if (this.request.url == null) {\r\n            // Default the url to the current site/web url\r\n            this.request.url = this.request.defaultToWebFl == false ? lib_1.ContextInfo.siteAbsoluteUrl : lib_1.ContextInfo.webAbsoluteUrl;\r\n        }\r\n        else if (/\\/_api\\//.test(this.request.url)) {\r\n            // Get the url\r\n            var url = this.request.url.toLowerCase().split(\"/_api/\");\r\n            // See if this is the app web and we are executing against a different web\r\n            if (lib_1.ContextInfo.isAppWeb && url[0] != lib_1.ContextInfo.webAbsoluteUrl.toLowerCase()) {\r\n                // Set the request url\r\n                this.requestUrl = lib_1.ContextInfo.webAbsoluteUrl + \"/_api/SP.AppContextSite(@target)/\" +\r\n                    url[1] + endpoint + qs.replace(/{{Target}}/g, url[0]);\r\n            }\r\n            else {\r\n                // Set the request url\r\n                this.requestUrl = this.request.url + (this.request.endpoint ? \"/\" + this.request.endpoint : \"\");\r\n            }\r\n            return;\r\n        }\r\n        // See if this is a relative url\r\n        if (this.request.url.indexOf(\"http\") != 0) {\r\n            // Add the domain\r\n            this.request.url = this.getDomainUrl() + this.request.url;\r\n        }\r\n        // See if this is the app web, and we are executing against a different web\r\n        if (lib_1.ContextInfo.isAppWeb && this.request.url != lib_1.ContextInfo.webAbsoluteUrl) {\r\n            // Set the request url\r\n            this.requestUrl = template\r\n                .replace(/{{Url}}/g, lib_1.ContextInfo.webAbsoluteUrl)\r\n                .replace(/{{EndPoint}}/g, \"SP.AppContextSite(@target)\" + endpoint)\r\n                .replace(/{{TargetUrl}}/g, qs.replace(/{{Target}}/g, this.request.url));\r\n        }\r\n        else {\r\n            // Set the request url\r\n            this.requestUrl = template\r\n                .replace(/{{Url}}/g, this.request.url)\r\n                .replace(/{{EndPoint}}/g, this.request.endpoint)\r\n                .replace(/{{TargetUrl}}/g, \"\");\r\n        }\r\n    };\r\n    return TargetInfo;\r\n}());\r\nexports.TargetInfo = TargetInfo;\r\n//# sourceMappingURL=targetInfo.js.map\n\n/***/ }),\n\n/***/ 895:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\n/**\r\n * XML HTTP Request Class\r\n */\r\nvar XHRRequest = /** @class */ (function () {\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function XHRRequest(asyncFl, targetInfo, callback) {\r\n        // Default the properties\r\n        this.asyncFl = asyncFl;\r\n        this.onRequestCompleted = callback || targetInfo.request.callback;\r\n        this.targetInfo = targetInfo;\r\n        this.xhr = this.createXHR();\r\n        // Execute the request\r\n        this.execute();\r\n    }\r\n    Object.defineProperty(XHRRequest.prototype, \"completedFl\", {\r\n        /*********************************************************************************************************************************/\r\n        // Public Properties\r\n        /*********************************************************************************************************************************/\r\n        // Flag indicating the request has completed\r\n        get: function () { return this.xhr ? this.xhr.readyState == 4 : false; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"response\", {\r\n        // The response\r\n        get: function () { return this.xhr ? this.xhr.response : null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"request\", {\r\n        // The xml http request\r\n        get: function () { return this.xhr ? this.xhr : null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"requestData\", {\r\n        // The data send in the body of the request\r\n        get: function () { return this.targetInfo.requestData; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"requestUrl\", {\r\n        // The reqest url\r\n        get: function () { return this.xhr ? this.xhr.responseURL : null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"status\", {\r\n        // The request status\r\n        get: function () { return this.xhr ? this.xhr.status : null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*********************************************************************************************************************************/\r\n    // Private Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to create the xml http request\r\n    XHRRequest.prototype.createXHR = function () {\r\n        // See if the generic object doesn't exist\r\n        if (typeof (XMLHttpRequest) !== \"undefined\") {\r\n            // Create an instance of the xml http request object\r\n            return new XMLHttpRequest();\r\n        }\r\n        // Try to create the request\r\n        try {\r\n            return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\r\n        }\r\n        catch (e) { }\r\n        // Try to create the request\r\n        try {\r\n            return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\r\n        }\r\n        catch (e) { }\r\n        // Try to create the request\r\n        try {\r\n            return new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        }\r\n        catch (e) { }\r\n        // Throw an error\r\n        throw new Error(\"This browser does not support xml http requests.\");\r\n    };\r\n    // Method to default the request headers\r\n    XHRRequest.prototype.defaultHeaders = function () {\r\n        // See if the custom headers exist\r\n        if (this.targetInfo.requestHeaders) {\r\n            // Parse the custom headers\r\n            for (var header in this.targetInfo.requestHeaders) {\r\n                // Add the header\r\n                this.xhr.setRequestHeader(header, this.targetInfo.requestHeaders[header]);\r\n            }\r\n        }\r\n        else {\r\n            // Set the default headers\r\n            this.xhr.setRequestHeader(\"Accept\", \"application/json;odata=verbose\");\r\n            this.xhr.setRequestHeader(\"Content-Type\", \"application/json;odata=verbose\");\r\n        }\r\n        // Set the method\r\n        this.xhr.setRequestHeader(\"X-HTTP-Method\", this.targetInfo.requestMethod);\r\n        // See if the request digest has been defined\r\n        if (this.targetInfo.request.requestDigest) {\r\n            // Set the request digest\r\n            this.xhr.setRequestHeader(\"X-RequestDigest\", this.targetInfo.request.requestDigest);\r\n        }\r\n        else {\r\n            // Get the request digest\r\n            var requestDigest = lib_1.ContextInfo.document.querySelector(\"#__REQUESTDIGEST\");\r\n            requestDigest = requestDigest ? requestDigest.value : \"\";\r\n            // Set the request digest\r\n            this.xhr.setRequestHeader(\"X-RequestDigest\", requestDigest);\r\n        }\r\n        // See if we are deleting or updating the data\r\n        if (this.targetInfo.requestMethod == \"DELETE\" || this.targetInfo.requestMethod == \"MERGE\") {\r\n            // Append the header for deleting/updating\r\n            this.xhr.setRequestHeader(\"IF-MATCH\", \"*\");\r\n        }\r\n    };\r\n    // Method to execute the xml http request\r\n    XHRRequest.prototype.execute = function () {\r\n        var _this = this;\r\n        // Ensure the xml http request exists\r\n        if (this.xhr == null) {\r\n            return null;\r\n        }\r\n        // Open the request\r\n        this.xhr.open(this.targetInfo.requestMethod == \"GET\" ? \"GET\" : \"POST\", this.targetInfo.requestUrl, this.asyncFl);\r\n        // See if we are making an asynchronous request\r\n        if (this.asyncFl) {\r\n            // Set the state change event\r\n            this.xhr.onreadystatechange = function () {\r\n                // See if the request has finished\r\n                if (_this.xhr.readyState == 4) {\r\n                    // Execute the request completed event\r\n                    _this.onRequestCompleted ? _this.onRequestCompleted(_this) : null;\r\n                }\r\n            };\r\n        }\r\n        // See if we the response type is an array buffer\r\n        // Note - Updating the response type is only allow for asynchronous requests. Any error will be thrown otherwise.\r\n        if (this.targetInfo.request.bufferFl && this.asyncFl) {\r\n            // Set the response type\r\n            this.xhr.responseType = \"arraybuffer\";\r\n        }\r\n        else {\r\n            // Default the headers\r\n            this.defaultHeaders();\r\n            // Ensure the arguments passed is defaulted as a string, unless it's an array buffer\r\n            if (this.targetInfo.requestData && typeof (this.targetInfo.requestData) !== \"string\") {\r\n                // Stringify the data object, if it's not an array buffer\r\n                this.targetInfo.requestData = this.targetInfo.requestData.byteLength ? this.targetInfo.requestData : JSON.stringify(this.targetInfo.requestData);\r\n            }\r\n        }\r\n        // Execute the request\r\n        this.targetInfo.request.bufferFl || this.targetInfo.requestData == null ? this.xhr.send() : this.xhr.send(this.targetInfo.requestData);\r\n    };\r\n    return XHRRequest;\r\n}());\r\nexports.XHRRequest = XHRRequest;\r\n//# sourceMappingURL=xhrRequest.js.map\n\n/***/ }),\n\n/***/ 896:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 897:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\n/**\r\n * JS Link\r\n */\r\nvar _JSLink = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _JSLink(cfg) {\r\n        // See if the configuration exists\r\n        if (cfg) {\r\n            // Set the properties\r\n            this._baseViewID = cfg.BaseViewID;\r\n            this._listTemplateType = cfg.ListTemplateType;\r\n            this._onPostRender = cfg.OnPostRender;\r\n            this._onPreRender = cfg.OnPreRender;\r\n            this._templates = cfg.Templates;\r\n        }\r\n    }\r\n    Object.defineProperty(_JSLink.prototype, \"BaseViewID\", {\r\n        set: function (value) { this._baseViewID = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_JSLink.prototype, \"ListTemplateType\", {\r\n        set: function (value) { this._listTemplateType = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_JSLink.prototype, \"OnPostRender\", {\r\n        set: function (value) { this._onPostRender = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_JSLink.prototype, \"OnPreRender\", {\r\n        set: function (value) { this._onPreRender = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_JSLink.prototype, \"Templates\", {\r\n        set: function (value) { this._templates = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Methods\r\n     */\r\n    /**\r\n     * Returns the CSR template.\r\n     */\r\n    _JSLink.prototype.getTemplate = function () {\r\n        var template = {};\r\n        // Add the properties\r\n        if (this._baseViewID) {\r\n            template.BaseViewID = this._baseViewID;\r\n        }\r\n        if (this._listTemplateType) {\r\n            template.ListTemplateType = this._listTemplateType;\r\n        }\r\n        if (this._onPostRender) {\r\n            template.OnPostRender = this._onPostRender;\r\n        }\r\n        if (this._onPreRender) {\r\n            template.OnPreRender = this._onPreRender;\r\n        }\r\n        if (this._templates) {\r\n            template.Templates = this._templates;\r\n        }\r\n        // See if there are fields\r\n        if (template.Templates && template.Templates.Fields) {\r\n            var fields = {};\r\n            // Parse the fields\r\n            for (var _i = 0, _a = template.Templates.Fields; _i < _a.length; _i++) {\r\n                var field = _a[_i];\r\n                // Add the field\r\n                fields[field.Name] = {};\r\n                // Add the field properties\r\n                if (field.DisplayForm) {\r\n                    fields[field.Name].DisplayForm = field.DisplayForm;\r\n                }\r\n                if (field.EditForm) {\r\n                    fields[field.Name].EditForm = field.EditForm;\r\n                }\r\n                if (field.NewForm) {\r\n                    fields[field.Name].NewForm = field.NewForm;\r\n                }\r\n                if (field.View) {\r\n                    fields[field.Name].View = field.View;\r\n                }\r\n            }\r\n            // Update the fields\r\n            template.Templates.Fields = fields;\r\n        }\r\n        // Return the template\r\n        return template;\r\n    };\r\n    /**\r\n     * Method to register the CSR override.\r\n     */\r\n    _JSLink.prototype.register = function () {\r\n        // Get the template manager\r\n        var templateManager = lib_1.ContextInfo.window.SPClientTemplates;\r\n        templateManager = templateManager ? templateManager.TemplateManager : null;\r\n        // Ensure it exists\r\n        if (templateManager) {\r\n            // Apply the customization\r\n            templateManager.RegisterTemplateOverrides(this.getTemplate());\r\n        }\r\n    };\r\n    return _JSLink;\r\n}());\r\nexports.JSLink = _JSLink;\r\n//# sourceMappingURL=jslink.js.map\n\n/***/ }),\n\n/***/ 898:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\nvar web_1 = __webpack_require__(862);\r\n/**\r\n * List\r\n */\r\nvar _List = /** @class */ (function (_super) {\r\n    __extends(_List, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _List(listName, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"web/lists/getByTitle('\" + listName + \"')\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"list\" } });\r\n        return _this;\r\n    }\r\n    // Method to get the list by the entity name.\r\n    _List.getByEntityName = function (entityTypeName, callback, targetInfo) {\r\n        // Query for the list\r\n        var query = (new web_1.Web(targetInfo))\r\n            .Lists()\r\n            .query({\r\n            Filter: \"EntityTypeName eq '\" + entityTypeName + \"'\",\r\n            Top: 1\r\n        });\r\n        // See if the callback exists\r\n        if (typeof (callback) != \"function\") {\r\n            // Execute the request synchronously and return it\r\n            var list = query.executeAndWait();\r\n            return list.results ? list.results[0] : list;\r\n        }\r\n        // Execute the request asynchronously\r\n        query.execute(function (lists) {\r\n            // Execute the callback method\r\n            callback(lists.results ? lists.results[0] : lists);\r\n        });\r\n    };\r\n    return _List;\r\n}(utils_1.Base));\r\nexports.List = _List;\r\n//# sourceMappingURL=list.js.map\n\n/***/ }),\n\n/***/ 899:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Navigation\r\n */\r\nvar _Navigation = /** @class */ (function (_super) {\r\n    __extends(_Navigation, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _Navigation(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"navigation\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"navigationservicerest\" } });\r\n        return _this;\r\n    }\r\n    return _Navigation;\r\n}(utils_1.Base));\r\nexports.Navigation = _Navigation;\r\n//# sourceMappingURL=navigation.js.map\n\n/***/ }),\n\n/***/ 900:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/*********************************************************************************************************************************/\r\n// People Manager\r\n/*********************************************************************************************************************************/\r\nvar _PeopleManager = /** @class */ (function (_super) {\r\n    __extends(_PeopleManager, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _PeopleManager(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"sp.userprofiles.peoplemanager\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"peoplemanager\" } });\r\n        return _this;\r\n    }\r\n    return _PeopleManager;\r\n}(utils_1.Base));\r\nexports.PeopleManager = _PeopleManager;\r\n//# sourceMappingURL=peopleManager.js.map\n\n/***/ }),\n\n/***/ 901:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/*********************************************************************************************************************************/\r\n// People Picker\r\n/*********************************************************************************************************************************/\r\nvar _PeoplePicker = /** @class */ (function (_super) {\r\n    __extends(_PeoplePicker, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _PeoplePicker(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface\";\r\n        _this.targetInfo.overrideDefaultRequestToHostFl = true;\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"peoplepicker\" } });\r\n        return _this;\r\n    }\r\n    return _PeoplePicker;\r\n}(utils_1.Base));\r\nexports.PeoplePicker = _PeoplePicker;\r\n//# sourceMappingURL=peoplePicker.js.map\n\n/***/ }),\n\n/***/ 902:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/*********************************************************************************************************************************/\r\n// Profile Loader\r\n/*********************************************************************************************************************************/\r\nvar _ProfileLoader = /** @class */ (function (_super) {\r\n    __extends(_ProfileLoader, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _ProfileLoader(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"sp.userprofiles.profileloader.getprofileloader\";\r\n        _this.targetInfo.method = \"POST\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"profileloader\" } });\r\n        return _this;\r\n    }\r\n    return _ProfileLoader;\r\n}(utils_1.Base));\r\nexports.ProfileLoader = _ProfileLoader;\r\n//# sourceMappingURL=profileLoader.js.map\n\n/***/ }),\n\n/***/ 903:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/*********************************************************************************************************************************/\r\n// Search\r\n/*********************************************************************************************************************************/\r\nvar _Search = /** @class */ (function (_super) {\r\n    __extends(_Search, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _Search(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"search\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"search\" } });\r\n        return _this;\r\n    }\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to compute the query\r\n    _Search.prototype.getQuery = function (parameters) {\r\n        var query = \"\";\r\n        // Parse the parameters\r\n        for (var key in parameters) {\r\n            // Append the parameter to the query\r\n            query += (query == \"\" ? \"\" : \"&\") + key + \"='\" + parameters[key] + \"'\";\r\n        }\r\n        // Return the query\r\n        return [query];\r\n    };\r\n    /** The search query method */\r\n    _Search.prototype.searchquery = function (settings) {\r\n        // Execute the request\r\n        return this.executeMethod(\"query\", {\r\n            argNames: [\"query\"],\r\n            name: \"query?[[query]]\",\r\n            requestType: utils_1.RequestType.GetReplace\r\n        }, this.getQuery(settings));\r\n    };\r\n    /** The suggest method */\r\n    _Search.prototype.suggest = function (settings) {\r\n        // Execute the request\r\n        return this.executeMethod(\"query\", {\r\n            argNames: [\"query\"],\r\n            name: \"suggest?[[query]]\",\r\n            requestType: utils_1.RequestType.GetReplace\r\n        }, this.getQuery(settings));\r\n    };\r\n    return _Search;\r\n}(utils_1.Base));\r\nexports.Search = _Search;\r\n//# sourceMappingURL=search.js.map\n\n/***/ }),\n\n/***/ 904:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\nvar _1 = __webpack_require__(859);\r\n/*********************************************************************************************************************************/\r\n// Site\r\n// The SPSite object.\r\n/*********************************************************************************************************************************/\r\nvar _Site = /** @class */ (function (_super) {\r\n    __extends(_Site, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _Site(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"site\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"site\" } });\r\n        return _this;\r\n    }\r\n    // Method to get the root web\r\n    _Site.prototype.getRootWeb = function () { return new _1.Web(null, this.targetInfo); };\r\n    // Method to determine if the current user has access, based on the permissions.\r\n    _Site.prototype.hasAccess = function (permissions) {\r\n        // TO DO\r\n        return true;\r\n    };\r\n    ;\r\n    return _Site;\r\n}(utils_1.Base));\r\nexports.Site = _Site;\r\n//# sourceMappingURL=site.js.map\n\n/***/ }),\n\n/***/ 905:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/*********************************************************************************************************************************/\r\n// Social Feed\r\n/*********************************************************************************************************************************/\r\nvar _SocialFeed = /** @class */ (function (_super) {\r\n    __extends(_SocialFeed, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _SocialFeed(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"social.feed\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"socialfeed\" } });\r\n        return _this;\r\n    }\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to post to another user's feed\r\n    _SocialFeed.prototype.postToFeed = function (accountName, creationData) {\r\n        var postInfo = { ID: null, creationData: creationData };\r\n        // Set the post metadata\r\n        postInfo[\"__metadata\"] = { type: \"SP.Social.SocialRestPostCreationData\" };\r\n        postInfo.creationData[\"__metadata\"] = { type: \"SP.Social.SocialPostCreationData\" };\r\n        return this.executeMethod(\"postToMyFeed\", {\r\n            argNames: [\"restCreationData\"],\r\n            name: \"actor(item=@v)/feed?@v='\" + encodeURIComponent(accountName) + \"'\",\r\n            requestType: utils_1.RequestType.PostWithArgsInBody\r\n        }, [postInfo]);\r\n    };\r\n    // Method to post to the current user's feed\r\n    _SocialFeed.prototype.postToMyFeed = function (creationData) {\r\n        var postInfo = { ID: null, creationData: creationData };\r\n        // Set the post metadata\r\n        postInfo[\"__metadata\"] = { type: \"SP.Social.SocialRestPostCreationData\" };\r\n        postInfo.creationData[\"__metadata\"] = { type: \"SP.Social.SocialPostCreationData\" };\r\n        return this.executeMethod(\"postToMyFeed\", {\r\n            argNames: [\"restCreationData\"],\r\n            name: \"my/feed/post\",\r\n            requestType: utils_1.RequestType.PostWithArgsInBody\r\n        }, [postInfo]);\r\n    };\r\n    return _SocialFeed;\r\n}(utils_1.Base));\r\nexports.SocialFeed = (new _SocialFeed());\r\n//# sourceMappingURL=socialFeed.js.map\n\n/***/ }),\n\n/***/ 906:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/*********************************************************************************************************************************/\r\n// User Profile\r\n/*********************************************************************************************************************************/\r\nvar _UserProfile = /** @class */ (function (_super) {\r\n    __extends(_UserProfile, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _UserProfile(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"sp.userprofiles.profileloader.getprofileloader/getUserProfile\";\r\n        _this.targetInfo.method = \"POST\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"userprofile\" } });\r\n        return _this;\r\n    }\r\n    return _UserProfile;\r\n}(utils_1.Base));\r\nexports.UserProfile = _UserProfile;\r\n//# sourceMappingURL=userProfile.js.map\n\n/***/ }),\n\n/***/ 907:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = __webpack_require__(858);\r\n/**\r\n * Utility\r\n */\r\nvar _Utility = /** @class */ (function (_super) {\r\n    __extends(_Utility, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _Utility(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"SP.Utilities.Utility\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"utility\" } });\r\n        return _this;\r\n    }\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to create a wiki page\r\n    _Utility.prototype.createWikiPage = function (listUrl, content) {\r\n        if (content === void 0) { content = \"\"; }\r\n        var parameters = {\r\n            ServerRelativeUrl: listUrl,\r\n            WikiHtmlContent: content\r\n        };\r\n        // Execute the method\r\n        return this.executeMethod(\"createWikiPage\", {\r\n            argNames: [\"parameters\"],\r\n            name: \"SP.Utilities.Utility.CreateWikiPageInContextWeb\",\r\n            replaceEndpointFl: true,\r\n            requestType: utils_1.RequestType.PostWithArgsInBody\r\n        }, [parameters]);\r\n    };\r\n    // Method to send an email\r\n    _Utility.prototype.sendEmail = function (properties) {\r\n        // Parse the email properties\r\n        for (var _i = 0, _a = [\"To\", \"CC\", \"BCC\"]; _i < _a.length; _i++) {\r\n            var propName = _a[_i];\r\n            var propValue = properties[propName];\r\n            // Ensure the value exists\r\n            if (propValue) {\r\n                // See if it's a string\r\n                if (typeof (propValue) === \"string\") {\r\n                    // Add the results property\r\n                    properties[propName] = { 'results': [propValue] };\r\n                }\r\n                else {\r\n                    // Add the results property\r\n                    properties[propName] = { 'results': propValue };\r\n                }\r\n            }\r\n        }\r\n        // Execute the method\r\n        return this.executeMethod(\"sendEmail\", {\r\n            argNames: [\"properties\"],\r\n            metadataType: \"SP.Utilities.EmailProperties\",\r\n            name: \"SP.Utilities.Utility.sendEmail\",\r\n            replaceEndpointFl: true,\r\n            requestType: utils_1.RequestType.PostWithArgsInBody\r\n        }, [properties]);\r\n    };\r\n    return _Utility;\r\n}(utils_1.Base));\r\nexports.Utility = _Utility;\r\n//# sourceMappingURL=utility.js.map\n\n/***/ }),\n\n/***/ 908:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 909:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\n/**\r\n * Dependencies\r\n * This class will ensure the core SP scripts are loaded on the page.\r\n */\r\nvar _Dependencies = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     * @param callback - The method to execute after the scripts have been loaded.\r\n     */\r\n    function _Dependencies(callback) {\r\n        this._callback = null;\r\n        // Default the properties\r\n        this._callback = callback;\r\n        this.MAX_WAIT = 5;\r\n        this.SCRIPTS = [\r\n            \"MicrosoftAjax.js\", \"init.js\", \"sp.runtime.js\", \"sp.js\", \"sp.core.js\", \"core.js\"\r\n        ];\r\n        // Load the dependencies\r\n        this.loadDependencies();\r\n    }\r\n    Object.defineProperty(_Dependencies.prototype, \"pageContextExistsFl\", {\r\n        get: function () { return lib_1.ContextInfo.webAbsoluteUrl != \"\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Method to ensure the SP classes are loaded\r\n     */\r\n    _Dependencies.prototype.loadDependencies = function () {\r\n        // See if the page context exists\r\n        if (this.pageContextExistsFl) {\r\n            // Call the callback event\r\n            this._callback ? this._callback() : null;\r\n        }\r\n        else {\r\n            // Load the required scripts\r\n            for (var fileName in this.SCRIPTS) {\r\n                // Create the script element\r\n                var elScript = lib_1.ContextInfo.document.createElement(\"script\");\r\n                // Set the properties\r\n                elScript.setAttribute(\"src\", \"/_layouts/15/\" + fileName);\r\n                elScript.setAttribute(\"type\", \"text/javascript\");\r\n                // Add the script element to the head\r\n                lib_1.ContextInfo.document.head.appendChild(elScript);\r\n            }\r\n            // Wait for the page context to exist\r\n            this.waitForPageContext();\r\n        }\r\n    };\r\n    /**\r\n     * Method to wait for the page context to be loaded\r\n     */\r\n    _Dependencies.prototype.waitForPageContext = function () {\r\n        var counter = 0;\r\n        // Check every 10ms\r\n        var intervalId = lib_1.ContextInfo.window.setInterval(function () {\r\n            // See if the page context exists, and ensure we haven't hit the max attempts\r\n            if (this.pageContextExists || ++counter >= this.MAX_WAIT) {\r\n                // Clear the interval\r\n                lib_1.ContextInfo.window.clearInterval(intervalId);\r\n                // Call the callback event\r\n                this._callback ? this._callback() : null;\r\n            }\r\n        }, 10);\r\n    };\r\n    return _Dependencies;\r\n}());\r\nexports.Dependencies = _Dependencies;\r\n//# sourceMappingURL=dependencies.js.map\n\n/***/ }),\n\n/***/ 910:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\nvar __1 = __webpack_require__(857);\r\nvar spCfg_1 = __webpack_require__(863);\r\n/**\r\n * Field Schema XML\r\n * Helper class for generating the field schema xml\r\n */\r\nexports.FieldSchemaXML = function (fieldInfo) {\r\n    var _resolve = null;\r\n    // Returns the schema xml for a boolean field.\r\n    var createBoolean = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Boolean\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \">\";\r\n        if (fieldInfo.defaultValue) {\r\n            schemaXml += \"<Default>\" + fieldInfo.defaultValue + \"</Default>\";\r\n        }\r\n        schemaXml += \"</Field>\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a calculated field.\r\n    var createCalculated = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Calculated\";\r\n        // Set the result type\r\n        switch (fieldInfo.resultType) {\r\n            case __1.SPTypes.FieldResultType.Boolean:\r\n                props[\"ResultType\"] = \"Boolean\";\r\n                break;\r\n            case __1.SPTypes.FieldResultType.Currency:\r\n                props[\"ResultType\"] = \"Currency\";\r\n                break;\r\n            case __1.SPTypes.FieldResultType.DateOnly:\r\n                props[\"Format\"] = \"DateOnly\";\r\n                props[\"ResultType\"] = \"DateTime\";\r\n                break;\r\n            case __1.SPTypes.FieldResultType.DateTime:\r\n                props[\"Format\"] = \"DateTime\";\r\n                props[\"ResultType\"] = \"DateTime\";\r\n                break;\r\n            case __1.SPTypes.FieldResultType.Number:\r\n                props[\"ResultType\"] = \"Number\";\r\n                break;\r\n            default:\r\n                props[\"ResultType\"] = \"Text\";\r\n                break;\r\n        }\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \">\";\r\n        if (fieldInfo.formula) {\r\n            schemaXml += \"<Formula>\" + fieldInfo.formula + \"</Formula>\";\r\n        }\r\n        if (fieldInfo.fieldRefs) {\r\n            schemaXml += \"<FieldRefs>\";\r\n            for (var i = 0; i < fieldInfo.fieldRefs.length; i++) {\r\n                schemaXml += \"<FieldRef Name=\\\"\" + fieldInfo.fieldRefs[i] + \"\\\" />\";\r\n            }\r\n            schemaXml += \"</FieldRefs>\";\r\n        }\r\n        schemaXml += \"</Field>\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a choice field.\r\n    var createChoice = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = fieldInfo.multi ? \"MultiChoice\" : \"Choice\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \">\";\r\n        if (fieldInfo.defaultValue) {\r\n            schemaXml += \"<Default>\" + fieldInfo.defaultValue + \"</Default>\";\r\n        }\r\n        if (fieldInfo.choices) {\r\n            schemaXml += \"<CHOICES>\";\r\n            for (var i = 0; i < fieldInfo.choices.length; i++) {\r\n                schemaXml += \"<CHOICE>\" + fieldInfo.choices[i] + \"</CHOICE>\";\r\n            }\r\n            schemaXml += \"</CHOICES>\";\r\n        }\r\n        schemaXml += \"</Field>\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a date field.\r\n    var createDate = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"DateTime\";\r\n        // Set the date/time properties\r\n        props[\"Format\"] = fieldInfo.format == __1.SPTypes.DateFormat.DateTime ? \"DateTime\" : \"DateOnly\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a lookup field.\r\n    var createLookup = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = fieldInfo.multi ? \"LookupMulti\" : \"Lookup\";\r\n        // Set the lookup properties\r\n        if (fieldInfo.fieldRef) {\r\n            props[\"FieldRef\"] = fieldInfo.fieldRef;\r\n        }\r\n        if (fieldInfo.multi) {\r\n            props[\"Mult\"] = \"TRUE\";\r\n        }\r\n        if (fieldInfo.showField) {\r\n            props[\"ShowField\"] = fieldInfo.showField;\r\n        }\r\n        // See if the lookup name exists\r\n        if (fieldInfo.listName) {\r\n            // Get the web containing the list\r\n            (new lib_1.Web(fieldInfo.webUrl))\r\n                .Lists(fieldInfo.listName)\r\n                .query({\r\n                Expand: [\"ParentWeb\"]\r\n            })\r\n                .execute(function (list) {\r\n                // Set the list and web ids\r\n                props[\"List\"] = list.Id;\r\n                if (fieldInfo.webUrl) {\r\n                    props[\"WebId\"] = list.ParentWeb.Id;\r\n                }\r\n                // Resolve the request\r\n                _resolve(\"<Field \" + toString(props) + \" />\");\r\n            });\r\n        }\r\n        else {\r\n            // Set the list id\r\n            props[\"List\"] = fieldInfo.listId;\r\n            // Resolve the request\r\n            _resolve(\"<Field \" + toString(props) + \" />\");\r\n        }\r\n    };\r\n    // Returns the schema xml for a managed metadata field.\r\n    var createMMS = function (fieldInfo, props) {\r\n        // Create the value field\r\n        var valueProps = {\r\n            ID: \"{\" + lib_1.ContextInfo.generateGUID() + \"}\",\r\n            Name: fieldInfo.name + \"_0\",\r\n            StaticName: fieldInfo.name + \"_0\",\r\n            DisplayName: fieldInfo.title + \" Value\",\r\n            Type: \"Note\",\r\n            Hidden: \"TRUE\",\r\n            Required: \"FALSE\",\r\n            ShowInViewForms: \"FALSE\",\r\n            CanToggleHidden: \"TRUE\"\r\n        };\r\n        // Generate the value field schema xml\r\n        var schemaXmlValue = \"<Field \" + toString(valueProps) + \" />\";\r\n        // Set the mms properties\r\n        props[\"Type\"] = \"TaxonomyFieldType\";\r\n        props[\"ShowField\"] = \"Term\" + (fieldInfo.locale ? fieldInfo.locale.toString() : \"1033\");\r\n        // Generate the mms field schema xml\r\n        var schemaXml = [\r\n            \"<Field \" + toString(props) + \">\",\r\n            \"<Customization>\",\r\n            \"<ArrayOfProperty>\",\r\n            \"<Property>\",\r\n            \"<Name>TextField</Name>\",\r\n            \"<Value xmlns:q6=\\\"http://www.w3.org/2001/XMLSchema\\\" p4:type=\\\"q6:string\\\" xmlns:p4=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\" + valueProps.ID + \"</Value>\",\r\n            \"</Property>\",\r\n            \"</ArrayOfProperty>\",\r\n            \"</Customization>\",\r\n            \"</Field>\"\r\n        ].join(\"\");\r\n        // Resolve the request\r\n        _resolve([schemaXmlValue, schemaXml]);\r\n    };\r\n    // Returns the schema xml for a note field.\r\n    var createNote = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Note\";\r\n        // Set the note properties\r\n        if (fieldInfo.appendFl) {\r\n            props[\"AppendOnly\"] = \"TRUE\";\r\n        }\r\n        if (fieldInfo.noteType == __1.SPTypes.FieldNoteType.EnhancedRichText || fieldInfo.noteType == __1.SPTypes.FieldNoteType.RichText) {\r\n            props[\"RichText\"] = \"TRUE\";\r\n        }\r\n        if (fieldInfo.noteType == __1.SPTypes.FieldNoteType.EnhancedRichText) {\r\n            props[\"RichTextMode\"] = \"FullHtml\";\r\n        }\r\n        if (fieldInfo.numberOfLines > 0) {\r\n            props[\"NumLines\"] = fieldInfo.numberOfLines;\r\n        }\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a number field.\r\n    var createNumber = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Number\";\r\n        // Set the number properties\r\n        if (fieldInfo.decimals >= 0) {\r\n            props[\"Decimals\"] = fieldInfo.decimals;\r\n        }\r\n        if (fieldInfo.max != null) {\r\n            props[\"Max\"] = fieldInfo.max;\r\n        }\r\n        if (fieldInfo.min != null) {\r\n            props[\"Min\"] = fieldInfo.min;\r\n        }\r\n        if (fieldInfo.numberType == __1.SPTypes.FieldNumberType.Integer) {\r\n            props[\"Decimals\"] = 0;\r\n        }\r\n        if (fieldInfo.numberType == __1.SPTypes.FieldNumberType.Percentage) {\r\n            props[\"ShowPercentage\"] = \"TRUE\";\r\n        }\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a text field.\r\n    var createText = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Text\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a url field.\r\n    var createUrl = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"URL\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a user field.\r\n    var createUser = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"User\";\r\n        // Set the user properties\r\n        if (fieldInfo.multi) {\r\n            props[\"Mult\"] = \"TRUE\";\r\n        }\r\n        if (fieldInfo.selectionMode != null) {\r\n            props[\"UserSelectionMode\"] = fieldInfo.selectionMode;\r\n        }\r\n        if (fieldInfo.selectionScope != null) {\r\n            props[\"UserSelectionScope\"] = fieldInfo.selectionScope;\r\n        }\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Method to convert the properties to a string\r\n    var toString = function (props) {\r\n        var properties = \"\";\r\n        // Parse the properties\r\n        for (var key in props) {\r\n            var value = props[key];\r\n            // Add the property\r\n            properties += (properties ? \" \" : \"\") + key + \"=\\\"\" + props[key] + \"\\\"\";\r\n        }\r\n        // Return the string value\r\n        return properties;\r\n    };\r\n    // Return a promise\r\n    return new Promise(function (resolve, reject) {\r\n        // Set the resolve method\r\n        _resolve = resolve;\r\n        // See if the schema xml has been defined\r\n        if (fieldInfo.schemaXml) {\r\n            // Resolve the promise\r\n            resolve(fieldInfo.schemaXml);\r\n        }\r\n        else {\r\n            // Set the base properties\r\n            var props = {};\r\n            props[\"ID\"] = \"{\" + lib_1.ContextInfo.generateGUID() + \"}\";\r\n            props[\"Name\"] = fieldInfo.name;\r\n            props[\"Required\"] = fieldInfo.required ? \"TRUE\" : \"FALSE\";\r\n            props[\"StaticName\"] = fieldInfo.name;\r\n            props[\"DisplayName\"] = fieldInfo.title;\r\n            // Set the type\r\n            switch (fieldInfo.type) {\r\n                // Boolean\r\n                case spCfg_1.SPCfgFieldType.Boolean:\r\n                    createBoolean(fieldInfo, props);\r\n                    break;\r\n                // Calculated\r\n                case spCfg_1.SPCfgFieldType.Calculated:\r\n                    createCalculated(fieldInfo, props);\r\n                    break;\r\n                // Choice\r\n                case spCfg_1.SPCfgFieldType.Choice:\r\n                    createChoice(fieldInfo, props);\r\n                    break;\r\n                // Date/Time\r\n                case spCfg_1.SPCfgFieldType.Date:\r\n                    createDate(fieldInfo, props);\r\n                    break;\r\n                // Lookup\r\n                case spCfg_1.SPCfgFieldType.Lookup:\r\n                    createLookup(fieldInfo, props);\r\n                    break;\r\n                // MMS\r\n                case spCfg_1.SPCfgFieldType.MMS:\r\n                    createMMS(fieldInfo, props);\r\n                    break;\r\n                // Note\r\n                case spCfg_1.SPCfgFieldType.Note:\r\n                    createNote(fieldInfo, props);\r\n                    break;\r\n                // Number\r\n                case spCfg_1.SPCfgFieldType.Number:\r\n                    createNumber(fieldInfo, props);\r\n                    break;\r\n                // Text\r\n                case spCfg_1.SPCfgFieldType.Text:\r\n                    createText(fieldInfo, props);\r\n                    break;\r\n                // URL\r\n                case spCfg_1.SPCfgFieldType.Url:\r\n                    createUrl(fieldInfo, props);\r\n                    break;\r\n                // User\r\n                case spCfg_1.SPCfgFieldType.User:\r\n                    createUser(fieldInfo, props);\r\n                    break;\r\n                // Field type not supported\r\n                default:\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n};\r\n//# sourceMappingURL=fieldSchemaXML.js.map\n\n/***/ }),\n\n/***/ 911:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * SharePoint Configuration Field Types\r\n */\r\nexports.SPCfgFieldType = {\r\n    Boolean: 0,\r\n    Calculated: 1,\r\n    Choice: 2,\r\n    Date: 3,\r\n    Lookup: 4,\r\n    MMS: 5,\r\n    Note: 6,\r\n    Number: 7,\r\n    Text: 8,\r\n    Url: 9,\r\n    User: 10\r\n};\r\n/**\r\n * SharePoint Configuration Types\r\n * The value determines the order to install the object type.\r\n */\r\nexports.SPCfgType = {\r\n    Fields: 0,\r\n    ContentTypes: 1,\r\n    Lists: 2,\r\n    SiteUserCustomActions: 3,\r\n    WebParts: 5,\r\n    WebUserCustomActions: 4\r\n};\r\n//# sourceMappingURL=spCfgTypes.js.map\n\n/***/ }),\n\n/***/ 912:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\nvar mapper_1 = __webpack_require__(860);\r\n/**\r\n * JSLink Helper Methods\r\n */\r\nexports.JSLink = {\r\n    // Hide event flag\r\n    _hideEventFl: false,\r\n    /**\r\n     * Field to Method Mapper\r\n     * 1 - Display Form\r\n     * 2 - Edit Form\r\n     * 3 - New Form\r\n     * 4 - View\r\n     */\r\n    _fieldToMethodMapper: {\r\n        'Attachments': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldAttachments_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldAttachments_Default\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldAttachments_Default\"]\r\n        },\r\n        'Boolean': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_DefaultNoEncode\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldBoolean_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldBoolean_Edit\"]\r\n        },\r\n        'Currency': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"]\r\n        },\r\n        'Calculated': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPField_FormDisplay_Empty\"],\r\n            3: lib_1.ContextInfo.window[\"SPField_FormDisplay_Empty\"]\r\n        },\r\n        'Choice': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldChoice_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldChoice_Edit\"]\r\n        },\r\n        'Computed': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            3: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"]\r\n        },\r\n        'DateTime': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldDateTime_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldDateTime_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldDateTime_Edit\"]\r\n        },\r\n        'File': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldFile_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldFile_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldFile_Edit\"]\r\n        },\r\n        'Integer': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"]\r\n        },\r\n        'Lookup': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldLookup_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldLookup_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldLookup_Edit\"]\r\n        },\r\n        'LookupMulti': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldLookup_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldLookup_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldLookup_Edit\"]\r\n        },\r\n        'MultiChoice': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldMultiChoice_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldMultiChoice_Edit\"]\r\n        },\r\n        'Note': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldNote_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldNote_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldNote_Edit\"]\r\n        },\r\n        'Number': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"]\r\n        },\r\n        'Text': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldText_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldText_Edit\"]\r\n        },\r\n        'URL': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldUrl_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldUrl_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldUrl_Edit\"]\r\n        },\r\n        'User': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldUser_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPClientPeoplePickerCSRTemplate\"],\r\n            3: lib_1.ContextInfo.window[\"SPClientPeoplePickerCSRTemplate\"]\r\n        },\r\n        'UserMulti': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldUserMulti_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPClientPeoplePickerCSRTemplate\"],\r\n            3: lib_1.ContextInfo.window[\"SPClientPeoplePickerCSRTemplate\"]\r\n        }\r\n    },\r\n    /**\r\n     * Methods\r\n     */\r\n    /**\r\n     * Disables edit for the specified field.\r\n     * @param ctx - The client context.\r\n     * @param field - The field to disable edit.\r\n     * @param requireValueFl - Flag to only disable the field, if a value exists.\r\n     */\r\n    disableEdit: function (ctx, field, requireValueFl) {\r\n        var fieldValue = ctx.CurrentFieldValue;\r\n        // Ensure a value exists\r\n        if (fieldValue) {\r\n            // Update the context, based on the field type\r\n            switch (ctx.CurrentFieldSchema.Type) {\r\n                case \"MultiChoice\":\r\n                    var regExp = new RegExp(mapper_1.SPTypes.ClientTemplatesUtility.UserLookupDelimitString, \"g\");\r\n                    // Update the field value\r\n                    fieldValue = ctx.CurrentFieldValue\r\n                        .replace(regExp, \"; \")\r\n                        .replace(/^; /g, \"\")\r\n                        .replace(/; $/g, \"\");\r\n                    break;\r\n                case \"Note\":\r\n                    // Replace the return characters\r\n                    fieldValue = \"<div>\" + ctx.CurrentFieldValue.replace(/\\n/g, \"<br />\") + \"</div>\";\r\n                    break;\r\n                case \"User\":\r\n                case \"UserMulti\":\r\n                    for (var i = 0; i < ctx.CurrentFieldValue.length; i++) {\r\n                        var userValue = ctx.CurrentFieldValue[i];\r\n                        // Add the user value\r\n                        fieldValue +=\r\n                            // User Lookup ID\r\n                            userValue.EntityData.SPUserID +\r\n                                // Delimiter\r\n                                mapper_1.SPTypes.ClientTemplatesUtility.UserLookupDelimitString +\r\n                                // User Lookup Value\r\n                                userValue.DisplayText +\r\n                                // Optional Delimiter\r\n                                ((i == ctx.CurrentFieldValue.length - 1 ? \"\" : mapper_1.SPTypes.ClientTemplatesUtility.UserLookupDelimitString));\r\n                    }\r\n                    break;\r\n            }\r\n            ;\r\n            // Update the current field value\r\n            ctx.CurrentFieldValue = fieldValue;\r\n        }\r\n        // Determine the control mode\r\n        var controlMode = mapper_1.SPTypes.ControlMode.Display;\r\n        if (requireValueFl && (fieldValue == null || fieldValue == \"\")) {\r\n            // Inherit the control mode\r\n            controlMode = ctx.ControlMode;\r\n        }\r\n        // Return the display value of the field\r\n        return exports.JSLink.renderField(ctx, field, controlMode);\r\n    },\r\n    /**\r\n     * Disable quick edit for the specified field.\r\n     * @param ctx - The client context.\r\n     * @param field - The field to disable edit.\r\n     */\r\n    disableQuickEdit: function (ctx, field) {\r\n        // Ensure we are in grid edit mode\r\n        if (ctx.inGridMode) {\r\n            // Disable editing for this field\r\n            field.AllowGridEditing = false;\r\n            return \"\";\r\n        }\r\n        // Return the default field value html\r\n        return exports.JSLink.renderField(ctx, field);\r\n    },\r\n    /**\r\n     * Returns the list view.\r\n     * @param ctx - The client context.\r\n     */\r\n    getListView: function (ctx) {\r\n        // Get the webpart\r\n        var wp = exports.JSLink.getWebPart(ctx);\r\n        if (wp) {\r\n            // Find the list form table\r\n            wp = wp.querySelector(\".ms-formtable\");\r\n        }\r\n        // Return the list view\r\n        return wp;\r\n    },\r\n    /**\r\n     * Returns the list view items.\r\n     * @param ctx - The client context.\r\n     */\r\n    getListViewItems: function (ctx) {\r\n        // Return the list view items\r\n        return ctx.ListData ? ctx.ListData.Row : [];\r\n    },\r\n    /**\r\n     * Returns the selected list view items\r\n     */\r\n    getListViewSelectedItems: function () {\r\n        // Return the selected items\r\n        return lib_1.ContextInfo.window[\"SP\"].ListOperation.Selection.getSelectedItems();\r\n    },\r\n    /**\r\n     * Returns the webpart containing the JSLink field/form/view.\r\n     * @param ctx - The client context.\r\n     */\r\n    getWebPart: function (ctx) {\r\n        // Return the webpart\r\n        return lib_1.ContextInfo.document.querySelector(\"#WebPart\" + (ctx.FormUniqueId || ctx.wpq));\r\n    },\r\n    /**\r\n     * Hides the specified field.\r\n     * @param ctx - The client context.\r\n     * @param field - The field to hide.\r\n     */\r\n    hideField: function (ctx, field) {\r\n        // Ensure the hide event has been created\r\n        if (!exports.JSLink._hideEventFl) {\r\n            // Set the flag\r\n            exports.JSLink._hideEventFl = true;\r\n            // Create the event\r\n            lib_1.ContextInfo.window.addEventListener(\"load\", function () {\r\n                // Query for the elements to hide\r\n                var fieldElements = lib_1.ContextInfo.document.querySelectorAll(\".hide-field\");\r\n                for (var _i = 0, fieldElements_1 = fieldElements; _i < fieldElements_1.length; _i++) {\r\n                    var fieldElement = fieldElements_1[_i];\r\n                    // Get the parent row\r\n                    var parentRow = fieldElement.parentNode && fieldElement.parentNode.parentNode ? fieldElement.parentNode.parentNode : null;\r\n                    if (parentRow) {\r\n                        // Ensure the parent row exists\r\n                        if (fieldElement.parentNode.getAttribute(\"data-field-name\") != parentRow.getAttribute(\"data-field-name\")) {\r\n                            // Find the parent row\r\n                            while (parentRow && parentRow.nodeName.toLowerCase() != \"tr\") {\r\n                                // Update the parent node\r\n                                parentRow = parentRow.parentNode;\r\n                            }\r\n                        }\r\n                        // Hide the parent row\r\n                        if (parentRow) {\r\n                            parentRow.style.display = \"none\";\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n    /**\r\n     * Removes the field and html from the page.\r\n     * @param ctx - The client context.\r\n     * @param field - The field to remove.\r\n     */\r\n    removeField: function (ctx, field) {\r\n        // Hide the field\r\n        exports.JSLink.hideField(ctx, field);\r\n        // Return an empty element\r\n        return \"<div class='hide-field'></div>\";\r\n    },\r\n    /**\r\n     * Method to render the default html for a field.\r\n     * @param ctx - The client context.\r\n     * @param field - The form field.\r\n     * @param formType - The form type. (Display, Edit, New or View)\r\n     */\r\n    renderField: function (ctx, field, formType) {\r\n        // Determine the field type\r\n        var fieldType = field ? field.Type : (ctx.CurrentFieldSchema ? ctx.CurrentFieldSchema.Type : null);\r\n        // Ensure the form type is set\r\n        formType = formType ? formType : ctx.ControlMode;\r\n        // Ensure a field to method mapper exists\r\n        if (exports.JSLink._fieldToMethodMapper[fieldType] && exports.JSLink._fieldToMethodMapper[fieldType][formType]) {\r\n            // Return the default html for this field\r\n            var defaultHtml = exports.JSLink._fieldToMethodMapper[fieldType][formType](ctx);\r\n            if (defaultHtml) {\r\n                return defaultHtml;\r\n            }\r\n        }\r\n        // Set the field renderer based on the field type\r\n        var field = ctx.CurrentFieldSchema;\r\n        var fieldRenderer = null;\r\n        switch (field.Type) {\r\n            case \"AllDayEvent\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"AllDayEventFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Attachments\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"AttachmentFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"BusinessData\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"BusinessDataFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Computed\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"ComputedFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"CrossProjectLink\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"ProjectLinkFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Currency\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"NumberFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"DateTime\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"DateTimeFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Lookup\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"LookupFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"LookupMulti\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"LookupFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Note\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"NoteFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Number\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"NumberFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Recurrence\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"RecurrenceFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Text\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"TextFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"URL\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"UrlFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"User\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"UserFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"UserMulti\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"UserFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"WorkflowStatus\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"RawFieldRenderer\"](field.Name);\r\n                break;\r\n        }\r\n        ;\r\n        // Get the current item\r\n        var currentItem = ctx.CurrentItem || ctx.ListData.Items[0];\r\n        // Return the item's field value html\r\n        return fieldRenderer ? fieldRenderer.RenderField(ctx, field, currentItem, ctx.ListSchema) : currentItem[field.Name];\r\n    }\r\n};\r\n//# sourceMappingURL=jslink.js.map\n\n/***/ }),\n\n/***/ 913:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\nvar parse_1 = __webpack_require__(864);\r\n/**\r\n * List Form\r\n */\r\nvar _ListForm = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n    */\r\n    function _ListForm(props) {\r\n        var _this = this;\r\n        this._cacheData = null;\r\n        this._info = null;\r\n        this._props = null;\r\n        this._resolve = null;\r\n        // Method to load the list data\r\n        this.load = function () {\r\n            // Clear the information\r\n            _this._info = {\r\n                item: _this._props.item,\r\n                query: _this._props.query || {}\r\n            };\r\n            // Load the data from cache\r\n            _this.loadFromCache();\r\n            // Load the list data\r\n            _this.loadListData().then(function () {\r\n                // See if the fields have been defined\r\n                if (_this._props.fields) {\r\n                    // Process the fields\r\n                    _this.processFields();\r\n                    // Load the item data\r\n                    _this.loadItem();\r\n                }\r\n                else {\r\n                    // Load the content type\r\n                    _this.loadDefaultContentType();\r\n                }\r\n            });\r\n        };\r\n        // Method to load the default content type\r\n        this.loadDefaultContentType = function () {\r\n            // See if the content type info exists\r\n            if (_this._cacheData && _this._cacheData.ct) {\r\n                // Try to parse the data\r\n                try {\r\n                    // Parse the content type\r\n                    var ct = parse_1.parse(_this._cacheData.ct);\r\n                    // Load the default fields\r\n                    _this.loadDefaultFields(ct.results[0]);\r\n                    return;\r\n                }\r\n                catch (_a) {\r\n                    // Clear the cache data\r\n                    sessionStorage.removeItem(_this._props.cacheKey);\r\n                }\r\n            }\r\n            // Load the content types\r\n            _this._info.list.ContentTypes()\r\n                .query({\r\n                Expand: [\"FieldLinks\"],\r\n                Top: 1\r\n            })\r\n                .execute(function (ct) {\r\n                // See if we are storing data in cache\r\n                if (_this._props.cacheKey) {\r\n                    // Update the cache data\r\n                    _this._cacheData = _this._cacheData || {};\r\n                    _this._cacheData.ct = ct.stringify();\r\n                    // Update the cache\r\n                    sessionStorage.setItem(_this._props.cacheKey, JSON.stringify(_this._cacheData));\r\n                }\r\n                // Resolve the promise\r\n                _this.loadDefaultFields(ct.results[0]);\r\n            });\r\n        };\r\n        // Method to load the default fields\r\n        this.loadDefaultFields = function (ct) {\r\n            var fields = ct ? ct.FieldLinks.results : [];\r\n            var formFields = {};\r\n            // Parse the field links\r\n            for (var i = 0; i < fields.length; i++) {\r\n                var fieldLink = fields[i];\r\n                // Get the field\r\n                var field = _this._info.fields[fieldLink.Name];\r\n                if (field) {\r\n                    // Skip the content type field\r\n                    if (field.InternalName == \"ContentType\") {\r\n                        continue;\r\n                    }\r\n                    // Skip hidden fields\r\n                    if (field.Hidden || fieldLink.Hidden) {\r\n                        continue;\r\n                    }\r\n                    // Save the form field\r\n                    formFields[field.InternalName] = field;\r\n                }\r\n            }\r\n            // Update the fields\r\n            _this._info.fields = formFields;\r\n            // Load the item data\r\n            _this.loadItem();\r\n        };\r\n        // Method to load the field data\r\n        this.loadFieldData = function (fields) {\r\n            // Clear the fields\r\n            _this._info.fields = {};\r\n            // Parse the fields\r\n            for (var i = 0; i < fields.results.length; i++) {\r\n                var field = fields.results[i];\r\n                // Save the field\r\n                _this._info.fields[field.InternalName] = field;\r\n            }\r\n        };\r\n        // Method to load the data from cache\r\n        this.loadFromCache = function () {\r\n            // See if we are loading from cache\r\n            if (_this._props.cacheKey) {\r\n                // Get the data\r\n                var data = sessionStorage.getItem(_this._props.cacheKey);\r\n                if (data) {\r\n                    // Try to parse the data\r\n                    try {\r\n                        // Set the cache data\r\n                        _this._cacheData = JSON.parse(data);\r\n                        // Update the list information\r\n                        _this._info = _this._info || {};\r\n                        _this._info.list = parse_1.parse(_this._cacheData.list);\r\n                        // Load the field data\r\n                        _this.loadFieldData(parse_1.parse(_this._cacheData.fields));\r\n                    }\r\n                    catch (_a) {\r\n                        // Clear the cache data\r\n                        sessionStorage.removeItem(_this._props.cacheKey);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        // Method to load the item\r\n        this.loadItem = function () {\r\n            // See if the item already exist\r\n            if (_this._info.item) {\r\n                // Resolve the promise\r\n                _this._resolve(_this._info);\r\n            }\r\n            else if (_this._props.itemId > 0) {\r\n                // Default the select query to get all the fields by default\r\n                _this._info.query = _this._props.query || {};\r\n                _this._info.query.Select = _this._info.query.Select || [\"*\"];\r\n                // See if we are loading the attachments\r\n                if (_this._props.loadAttachments) {\r\n                    // Expand the attachment files collection\r\n                    _this._info.query.Expand = _this._info.query.Expand || [];\r\n                    _this._info.query.Expand.push(\"AttachmentFiles\");\r\n                    // Select the attachment files\r\n                    _this._info.query.Select.push(\"Attachments\");\r\n                    _this._info.query.Select.push(\"AttachmentFiles\");\r\n                }\r\n                // Get the list item\r\n                _this._info.list.Items(_this._props.itemId)\r\n                    .query(_this._info.query)\r\n                    .execute(function (item) {\r\n                    // Save the attachments\r\n                    _this._info.attachments = item.AttachmentFiles.results;\r\n                    // Save the item\r\n                    _this._info.item = item;\r\n                    // Resolve the promise\r\n                    _this._resolve(_this._info);\r\n                });\r\n            }\r\n            else {\r\n                // Resolve the promise\r\n                _this._resolve(_this._info);\r\n            }\r\n        };\r\n        // Method to load the list data\r\n        this.loadListData = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the list & fields already exist\r\n                if (_this._info.list && _this._info.fields) {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Get the web\r\n                var list = (new lib_1.Web(_this._props.webUrl))\r\n                    .Lists(_this._props.listName)\r\n                    .execute(function (list) {\r\n                    // Save the list\r\n                    _this._info.list = list;\r\n                });\r\n                // Load the fields\r\n                list.Fields()\r\n                    .execute(function (fields) {\r\n                    // See if we are caching the data\r\n                    if (_this._props.cacheKey) {\r\n                        // Update the cache\r\n                        _this._cacheData = _this._cacheData || {};\r\n                        _this._cacheData.fields = fields.stringify();\r\n                        _this._cacheData.list = _this._info.list.stringify();\r\n                        // Cache the data\r\n                        sessionStorage.setItem(_this._props.cacheKey, JSON.stringify(_this._cacheData));\r\n                    }\r\n                    // Load the field data\r\n                    _this.loadFieldData(fields);\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to process the fields\r\n        this.processFields = function () {\r\n            var formFields = {};\r\n            // Parse the fields provided\r\n            for (var i = 0; i < _this._props.fields.length; i++) {\r\n                var field = _this._info.fields[_this._props.fields[i]];\r\n                // Ensure the field exists\r\n                if (field) {\r\n                    // Save the field\r\n                    formFields[field.InternalName] = field;\r\n                }\r\n            }\r\n            // Update the fields\r\n            _this._info.fields = formFields;\r\n        };\r\n        // Save the properties\r\n        this._props = props || {};\r\n        this._props.fields = this._props.fields;\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Save the resolve method\r\n            _this._resolve = resolve;\r\n            // Load the list data\r\n            _this.load();\r\n        });\r\n    }\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to create an instance of the list form\r\n    _ListForm.create = function (props) {\r\n        // Return an instance of the list form\r\n        return new _ListForm(props);\r\n    };\r\n    // Method to load the item attachments\r\n    _ListForm.loadAttachments = function (info) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Ensure the item id exists\r\n            var itemId = info.item ? info.item.Id : info.itemId;\r\n            if (itemId > 0) {\r\n                // Get the web\r\n                (new lib_1.Web(info.webUrl))\r\n                    .Lists(info.listName)\r\n                    .Items(itemId)\r\n                    .AttachmentFiles()\r\n                    .execute(function (attachments) {\r\n                    // Resolve the promise\r\n                    resolve(attachments.results || []);\r\n                });\r\n            }\r\n            else {\r\n                // Resolve the promise\r\n                resolve([]);\r\n            }\r\n        });\r\n    };\r\n    // Method to refresh an item\r\n    _ListForm.refreshItem = function (info) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the item\r\n            info.list.Items(info.item.Id).query(info.query).execute(function (item) {\r\n                // Update the item\r\n                info.item = item;\r\n                // Resolve the promise\r\n                resolve(info);\r\n            });\r\n        });\r\n    };\r\n    // Method to remove attachments from an item\r\n    _ListForm.prototype.removeAttachments = function (info, attachments) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var web = new lib_1.Web(info.webUrl);\r\n            // Parse the attachments\r\n            for (var i = 0; i < attachments.length; i++) {\r\n                var attachment = attachments[i];\r\n                // Get the file\r\n                web.getFileByServerRelativeUrl(attachment.ServerRelativeUrl)\r\n                    .delete()\r\n                    .execute(true);\r\n            }\r\n            // Wait for the requests to complete\r\n            web.done(function () {\r\n                // Resolve the request\r\n                resolve();\r\n            });\r\n        });\r\n    };\r\n    // Method to save attachments to an existing item\r\n    _ListForm.saveAttachments = function (info, attachmentInfo) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var itemId = info.item ? info.item.Id : info.itemId;\r\n            if (itemId > 0) {\r\n                // Get the web\r\n                var attachments = (new lib_1.Web(info.webUrl))\r\n                    .Lists(info.listName)\r\n                    .Items(itemId)\r\n                    .AttachmentFiles();\r\n                // Parse the attachment information\r\n                for (var i = 0; i < attachmentInfo.length; i++) {\r\n                    var attachment = attachmentInfo[i];\r\n                    // Add the attachment\r\n                    attachments.add(attachment.name, attachment.data).execute(true);\r\n                }\r\n                // Wait for the requests to complete\r\n                attachments.done(function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Resolve the promise\r\n                    resolve(args);\r\n                });\r\n            }\r\n            else {\r\n                // Resolve the promise\r\n                resolve();\r\n            }\r\n        });\r\n    };\r\n    // Method to save a new or existing item\r\n    _ListForm.saveItem = function (info, formValues) {\r\n        var _this = this;\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if this is an existing item\r\n            if (info.item && info.item.update) {\r\n                // Update the item\r\n                info.item.update(formValues).execute(function (response) {\r\n                    // Refresh the item\r\n                    _this.refreshItem(info).then(function (info) {\r\n                        // Resolve the promise\r\n                        resolve(info);\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                // Set the metadata type\r\n                formValues[\"__metadata\"] = { type: info.list.ListItemEntityTypeFullName };\r\n                // Add the item\r\n                info.list.Items().add(formValues)\r\n                    .execute(function (item) {\r\n                    // Update the info\r\n                    info.item = item;\r\n                    // Refresh the item\r\n                    _this.refreshItem(info).then(function (info) {\r\n                        // Resolve the promise\r\n                        resolve(info);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n    return _ListForm;\r\n}());\r\nexports.ListForm = _ListForm;\r\n//# sourceMappingURL=listForm.js.map\n\n/***/ }),\n\n/***/ 914:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\nvar __1 = __webpack_require__(857);\r\nvar taxonomy_1 = __webpack_require__(865);\r\n/**\r\n * List Form Field\r\n */\r\nvar _ListFormField = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _ListFormField(props) {\r\n        var _this = this;\r\n        this._fieldInfo = null;\r\n        this._resolve = null;\r\n        // Load the field\r\n        this.load = function () {\r\n            // See if the field exists\r\n            if (_this._fieldInfo.field) {\r\n                // Process the field\r\n                _this.processField();\r\n            }\r\n            else {\r\n                // Get the web\r\n                (new lib_1.Web(_this._fieldInfo.webUrl))\r\n                    .Lists(_this._fieldInfo.listName)\r\n                    .Fields()\r\n                    .getByInternalNameOrTitle(_this._fieldInfo.name)\r\n                    .execute(function (field) {\r\n                    // Save the field\r\n                    _this._fieldInfo.field = field;\r\n                    // Process the field\r\n                    _this.processField();\r\n                });\r\n            }\r\n        };\r\n        // Method to proces the field and save its information\r\n        this.processField = function () {\r\n            // Update the field information\r\n            _this._fieldInfo.defaultValue = _this._fieldInfo.field.DefaultValue;\r\n            _this._fieldInfo.readOnly = _this._fieldInfo.field.ReadOnlyField;\r\n            _this._fieldInfo.required = _this._fieldInfo.field.Required ? true : false;\r\n            _this._fieldInfo.title = _this._fieldInfo.field.Title;\r\n            _this._fieldInfo.type = _this._fieldInfo.field.FieldTypeKind;\r\n            _this._fieldInfo.typeAsString = _this._fieldInfo.field.TypeAsString;\r\n            // Update the field info, based on the type\r\n            switch (_this._fieldInfo.type) {\r\n                // Choice\r\n                case __1.SPTypes.FieldType.Choice:\r\n                case __1.SPTypes.FieldType.MultiChoice:\r\n                    var choices = _this._fieldInfo.field.Choices;\r\n                    _this._fieldInfo.choices = (choices ? choices.results : null) || [];\r\n                    _this._fieldInfo.multi = _this._fieldInfo.type == __1.SPTypes.FieldType.MultiChoice;\r\n                    break;\r\n                // Date/Time\r\n                case __1.SPTypes.FieldType.DateTime:\r\n                    var fldDate = _this._fieldInfo.field;\r\n                    _this._fieldInfo.showTime = fldDate.DisplayFormat == __1.SPTypes.DateFormat.DateTime;\r\n                    break;\r\n                // Lookup\r\n                case __1.SPTypes.FieldType.Lookup:\r\n                    var fldLookup = _this._fieldInfo.field;\r\n                    _this._fieldInfo.lookupField = fldLookup.LookupField;\r\n                    _this._fieldInfo.lookupListId = fldLookup.LookupList;\r\n                    _this._fieldInfo.lookupWebId = fldLookup.LookupWebId;\r\n                    _this._fieldInfo.multi = fldLookup.AllowMultipleValues;\r\n                    break;\r\n                // Number\r\n                case __1.SPTypes.FieldType.Number:\r\n                    var fldNumber = _this._fieldInfo.field;\r\n                    var startIdx = fldNumber.SchemaXml.indexOf('Decimals=\"') + 10;\r\n                    _this._fieldInfo.decimals = startIdx > 10 ? parseInt(fldNumber.SchemaXml.substr(startIdx, fldNumber.SchemaXml.substr(startIdx).indexOf('\"'))) : 0;\r\n                    _this._fieldInfo.maxValue = fldNumber.MaximumValue;\r\n                    _this._fieldInfo.minValue = fldNumber.MinimumValue;\r\n                    _this._fieldInfo.showAsPercentage = fldNumber.SchemaXml.indexOf('Percentage=\"TRUE\"') > 0;\r\n                    break;\r\n                // Note\r\n                case __1.SPTypes.FieldType.Note:\r\n                    var fldNote = _this._fieldInfo.field;\r\n                    _this._fieldInfo.multiline = true;\r\n                    _this._fieldInfo.richText = fldNote.RichText;\r\n                    _this._fieldInfo.rows = fldNote.NumberOfLines;\r\n                    break;\r\n                // Text\r\n                case __1.SPTypes.FieldType.Text:\r\n                    _this._fieldInfo.multiline = false;\r\n                    _this._fieldInfo.richText = false;\r\n                    _this._fieldInfo.rows = 1;\r\n                    break;\r\n                // User\r\n                case __1.SPTypes.FieldType.User:\r\n                    var fldUser = _this._fieldInfo.field;\r\n                    _this._fieldInfo.allowGroups = fldUser.SelectionMode == __1.SPTypes.FieldUserSelectionType.PeopleAndGroups;\r\n                    _this._fieldInfo.multi = fldUser.AllowMultipleValues;\r\n                    break;\r\n                // Default\r\n                default:\r\n                    // See if this is an MMS field\r\n                    if (_this._fieldInfo.typeAsString.startsWith(\"TaxonomyFieldType\")) {\r\n                        var fldMMS = _this._fieldInfo.field;\r\n                        _this._fieldInfo.multi = fldMMS.AllowMultipleValues;\r\n                        _this._fieldInfo.termId = fldMMS.IsAnchorValid ? fldMMS.AnchorId : fldMMS.TermSetId;\r\n                        _this._fieldInfo.termSetId = fldMMS.TermSetId;\r\n                        _this._fieldInfo.termStoreId = fldMMS.SspId;\r\n                    }\r\n                    break;\r\n            }\r\n            // Resolve the promise\r\n            _this._resolve(_this._fieldInfo);\r\n        };\r\n        // Save the properties and field information\r\n        this._fieldInfo = props || {};\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Save the resolve method\r\n            _this._resolve = resolve;\r\n            // See if the field exists\r\n            if (_this._fieldInfo.field) {\r\n                // Process the field\r\n                _this.processField();\r\n            }\r\n            else {\r\n                // Load the field\r\n                _this.load();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to create an instance of the list form field\r\n    _ListFormField.create = function (props) {\r\n        // Return an instance of the list form field\r\n        return new _ListFormField(props);\r\n    };\r\n    // Method to load the lookup data\r\n    _ListFormField.loadLookupData = function (info, queryTop) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the current site collection\r\n            (new lib_1.Site())\r\n                .openWebById(info.lookupWebId)\r\n                .execute(function (web) {\r\n                // Get the list\r\n                web.Lists()\r\n                    .getById(info.lookupListId)\r\n                    .Items()\r\n                    .query({\r\n                    GetAllItems: true,\r\n                    Select: [\"ID\", info.lookupField],\r\n                    Top: queryTop > 0 && queryTop <= 5000 ? queryTop : 500\r\n                })\r\n                    .execute(function (items) {\r\n                    // Resolve the promise\r\n                    resolve(items.results);\r\n                });\r\n            });\r\n        });\r\n    };\r\n    // Method to load the mms data\r\n    _ListFormField.loadMMSData = function (info) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the term set\r\n            taxonomy_1.Taxonomy.getTermSetById(info.termStoreId, info.termSetId).then(function (termSet) {\r\n                // Get the target root term\r\n                var root = taxonomy_1.Taxonomy.findById(termSet, info.termId);\r\n                // See if the root node doesn't exist\r\n                if (root == null) {\r\n                    // Set the root to the term set\r\n                    root = taxonomy_1.Taxonomy.findById(termSet, info.termSetId);\r\n                }\r\n                // Resolve the request\r\n                resolve(taxonomy_1.Taxonomy.toArray(root));\r\n            });\r\n        });\r\n    };\r\n    // Method to load the mms value field\r\n    _ListFormField.loadMMSValueField = function (info) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if we are allowing multiple values\r\n            if (info.multi) {\r\n                // Get the web\r\n                (new lib_1.Web(info.webUrl))\r\n                    .Lists(info.listName)\r\n                    .Fields()\r\n                    .getByInternalNameOrTitle(info.name + \"_0\")\r\n                    .execute(function (field) {\r\n                    // See if the field exists\r\n                    if (field.existsFl) {\r\n                        // Resolve the promise\r\n                        resolve(field);\r\n                    }\r\n                    else {\r\n                        // Log\r\n                        console.log(\"[gd-sprest] Unable to find the hidden value field for '\" + info.name + \"'.\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // Resolve the promise\r\n                resolve();\r\n            }\r\n        });\r\n    };\r\n    return _ListFormField;\r\n}());\r\nexports.ListFormField = _ListFormField;\r\n//# sourceMappingURL=listFormField.js.map\n\n/***/ }),\n\n/***/ 915:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar _this = this;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\n/**\r\n * Loader\r\n */\r\nexports.Loader = {\r\n    // Flag to determine if the SharePoint core libraries have been loaded\r\n    loaded: false,\r\n    // Method to wait for the SharePoint core libraries to be loaded\r\n    waitForSPLibs: function (callback, timeout, loadLibraries) {\r\n        var counter = 0;\r\n        // Default the flag to load the libraries\r\n        loadLibraries = typeof (loadLibraries) === \"boolean\" ? loadLibraries : false;\r\n        // Default the timeout (5 seconds)\r\n        timeout = typeof (timeout) === \"number\" ? timeout : 2500;\r\n        // Determine the number of iterations\r\n        var maxLoops = timeout / 25;\r\n        // See if the flag has already been set\r\n        if (_this.loaded) {\r\n            // Execute the callback\r\n            callback();\r\n            return;\r\n        }\r\n        // See if we are loading the libraries\r\n        if (loadLibraries) {\r\n            // Parse the files to load\r\n            [\"MicrosoftAjax.js\", \"init.js\", \"sp.runtime.js\", \"sp.js\", \"sp.core.js\", \"core.js\"].every(function (fileName) {\r\n                // Create the script element\r\n                var el = lib_1.ContextInfo.document.createElement(\"script\");\r\n                // Set the properties\r\n                el.setAttribute(\"src\", \"/_layouts/15/\" + fileName);\r\n                el.setAttribute(\"type\", \"text/javascript\");\r\n                // Add the element to the head\r\n                lib_1.ContextInfo.document.head.appendChild(el);\r\n                // Continue the loop\r\n                return true;\r\n            });\r\n        }\r\n        // Loop until the libraries are loaded\r\n        var intervalId = setInterval(function () {\r\n            var maxLoopFl = ++counter > maxLoops;\r\n            // See if the page context exists or if we have hit the max attempts\r\n            if (lib_1.ContextInfo.existsFl || maxLoopFl) {\r\n                // Stop the loop\r\n                clearInterval(intervalId);\r\n                // Execute the callback\r\n                callback();\r\n            }\r\n        }, 25);\r\n    }\r\n};\r\n//# sourceMappingURL=loader.js.map\n\n/***/ }),\n\n/***/ 916:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Ribbon Link\r\n */\r\nexports.RibbonLink = function (props) {\r\n    var link = null;\r\n    // Default the append flag\r\n    var appendFl = typeof (props.appendFl) === \"boolean\" ? props.appendFl : false;\r\n    // Get the ribbon top bar\r\n    var topBar = document.querySelector(\"#RibbonContainer-TabRowRight\");\r\n    if (topBar) {\r\n        // Get the link\r\n        link = topBar.querySelector(\"#\" + props.id);\r\n        if (link == null) {\r\n            // Create the link\r\n            link = document.createElement(\"a\");\r\n            link.className = \"ms-promotedActionButton \" + (props.className || \"\");\r\n            link.href = props.href ? props.href : \"javascript:void()\";\r\n            link.innerHTML = \"<span class='ms-promotedActionButton-text'>\" + props.title + \"</span>\";\r\n            link.id = props.id;\r\n            link.onclick = props.onClick;\r\n            // Add the link\r\n            appendFl ? topBar.appendChild(link) : topBar.insertBefore(link, topBar.firstChild);\r\n        }\r\n    }\r\n    // Return the link\r\n    return link;\r\n};\r\n//# sourceMappingURL=ribbonLink.js.map\n\n/***/ }),\n\n/***/ 917:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Suite Bar Link\r\n */\r\nexports.SuiteBarLink = function (props) {\r\n    var link = null;\r\n    // Default the append flag\r\n    var appendFl = typeof (props.appendFl) === \"boolean\" ? props.appendFl : true;\r\n    // Get the suite bar top links\r\n    var topLinks = document.querySelector(\"#suiteLinksBox > ul\");\r\n    if (topLinks) {\r\n        // Query for the link, and ensure it exists\r\n        link = topLinks.querySelector(\"#\" + props.id);\r\n        if (link == null) {\r\n            // Create a list link\r\n            link = document.createElement(\"a\");\r\n            link.className = \"ms-core-suiteLink-a \" + (props.className || \"\");\r\n            link.href = props.href ? props.href : \"javascript:void()\";\r\n            link.id = props.id;\r\n            link.innerHTML = props.title;\r\n            link.onclick = props.onClick;\r\n            // Create the suite bar link\r\n            var sbLink = document.createElement(\"li\");\r\n            sbLink.className = \"ms-core-suiteLink\";\r\n            sbLink.appendChild(link);\r\n            // Append the item to the list\r\n            appendFl ? topLinks.appendChild(sbLink) : topLinks.insertBefore(sbLink, topLinks.firstChild);\r\n        }\r\n    }\r\n    // Return the link\r\n    return link;\r\n};\r\n//# sourceMappingURL=sbLink.js.map\n\n/***/ }),\n\n/***/ 918:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = __webpack_require__(859);\r\n/**\r\n * Web Part\r\n */\r\nvar _WebPart = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     * @param props - The webpart properties.\r\n     */\r\n    function _WebPart(props) {\r\n        var _this = this;\r\n        this._props = null;\r\n        this._wp = null;\r\n        /**\r\n         * Method to add the help link to a script part editor.\r\n         * @wpId - The webpart id.\r\n         */\r\n        this.addHelpLink = function () {\r\n            // Ensure the help properties exist\r\n            if (_this._props.helpProps) {\r\n                // Get the webpart's \"Snippet\"\r\n                var link = document.querySelector(\"div[webpartid='\" + _this._wp.wpId + \"'] a[title='Edit Snippet']\");\r\n                if (link) {\r\n                    // Create the help link\r\n                    var helpLink = document.createElement(\"a\");\r\n                    helpLink.href = _this._props.helpProps.url || \"#\";\r\n                    helpLink.style.paddingLeft = \"10px\";\r\n                    helpLink.setAttribute(\"role\", \"button\");\r\n                    helpLink.title = _this._props.helpProps.title || \"Help\";\r\n                    helpLink.innerHTML = \"<span class='ms-metadata'>\" + helpLink.title + \"</span>\";\r\n                    helpLink.target = \"_blank\";\r\n                    // Append the link\r\n                    link.parentElement.appendChild(helpLink);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Method to get the webpart\r\n         */\r\n        this.getWebPart = function (wpId) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Get the current context\r\n                var context = SP.ClientContext.get_current();\r\n                // Get the webpart from the current page\r\n                var page = context.get_web().getFileByServerRelativeUrl(lib_1.ContextInfo.serverRequestPath);\r\n                var wpMgr = page.getLimitedWebPartManager(SP.WebParts.PersonalizationScope.shared);\r\n                var wpDef = wpMgr.get_webParts().getById(wpId);\r\n                var wp = wpDef.get_webPart();\r\n                context.load(wp, \"Properties\");\r\n                // Execute the request\r\n                context.executeQueryAsync(\r\n                // Success\r\n                function () {\r\n                    // Resolve the promise\r\n                    resolve({\r\n                        Context: context,\r\n                        Properties: wp.get_properties(),\r\n                        WebPart: wp,\r\n                        WebPartDefinition: wpDef,\r\n                        WebPartId: wp.get_id()\r\n                    });\r\n                }, \r\n                // Error\r\n                function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Reject the promise\r\n                    reject(args[1] ? args[1].get_message() : \"\");\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Method to get the webpart id for a specified element\r\n         * @param el - The target element.\r\n         */\r\n        this.getWebPartId = function (el) {\r\n            // Loop until we find the webpart id\r\n            while (el) {\r\n                // See if this element contains the webpart id\r\n                var wpId = el.getAttribute(\"webpartid\");\r\n                if (wpId) {\r\n                    // Return the webpart id\r\n                    return wpId;\r\n                }\r\n                // Check the parent\r\n                el = el.parentElement;\r\n            }\r\n            // Unable to detect\r\n            return \"\";\r\n        };\r\n        /**\r\n         * Method to get the webpart information\r\n         */\r\n        this.getWebPartInfo = function () {\r\n            var targetInfo = {\r\n                cfg: null,\r\n                el: null,\r\n                wpId: null\r\n            };\r\n            // Ensure the element id exists\r\n            if (_this._props.elementId) {\r\n                // Get the webpart elements\r\n                var elements = document.querySelectorAll(\"#\" + _this._props.elementId);\r\n                for (var i = 0; i < elements.length; i++) {\r\n                    var elWebPart = elements[i];\r\n                    // See if we have already configured this element\r\n                    if (elWebPart.getAttribute(\"data-isConfigured\")) {\r\n                        continue;\r\n                    }\r\n                    // Get the webpart id\r\n                    var wpId = _this.getWebPartId(elWebPart);\r\n                    if (wpId) {\r\n                        // See if the configuration element exists\r\n                        var elCfg = _this._props.cfgElementId ? elWebPart.parentElement.querySelector(\"#\" + _this._props.cfgElementId) : null;\r\n                        if (elCfg) {\r\n                            try {\r\n                                // Parse the configuration\r\n                                var cfg = JSON.parse(elCfg.innerText.trim());\r\n                                // See if the webaprt id exists\r\n                                if (cfg.WebPartId) {\r\n                                    // See if it's for this webpart\r\n                                    if (cfg.WebPartId == wpId) {\r\n                                        // Set the target information\r\n                                        targetInfo = {\r\n                                            cfg: cfg,\r\n                                            el: elWebPart,\r\n                                            wpId: wpId\r\n                                        };\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // Set the target information\r\n                                    targetInfo = {\r\n                                        cfg: {\r\n                                            WebPartId: wpId\r\n                                        },\r\n                                        el: elWebPart,\r\n                                        wpId: wpId\r\n                                    };\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (ex) {\r\n                                // Set the target information\r\n                                targetInfo = {\r\n                                    cfg: {\r\n                                        WebPartId: wpId\r\n                                    },\r\n                                    el: elWebPart,\r\n                                    wpId: wpId\r\n                                };\r\n                                // Log\r\n                                console.log(\"[sp-webpart] Error parsing the configuration for element '\" + _this._props.cfgElementId + \"'.\");\r\n                            }\r\n                            // Break from the loop\r\n                            break;\r\n                        }\r\n                        else {\r\n                            // Set the target information\r\n                            targetInfo = {\r\n                                cfg: {\r\n                                    WebPartId: wpId\r\n                                },\r\n                                el: elWebPart,\r\n                                wpId: wpId\r\n                            };\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                // Ensure elements were found\r\n                if (elements.length == 0) {\r\n                    // Log\r\n                    console.log(\"[sp-webpart] Error - Unable to find elements with id '\" + _this._props.elementId + \"'.\");\r\n                }\r\n            }\r\n            else {\r\n                // Log\r\n                console.log(\"[sp-webpart] The target element id is not defined.\");\r\n            }\r\n            // Ensure the target element exists\r\n            if (targetInfo.el) {\r\n                // Set the configuration flag\r\n                targetInfo.el.setAttribute(\"data-isConfigured\", \"true\");\r\n            }\r\n            // Return the target information\r\n            return targetInfo;\r\n        };\r\n        /**\r\n         * Method to detect if a page is being edited\r\n         */\r\n        this.isEditMode = function () {\r\n            var formName = MSOWebPartPageFormName ? MSOWebPartPageFormName : \"\";\r\n            // Get the form\r\n            var form = document.forms[MSOWebPartPageFormName];\r\n            if (form) {\r\n                // Get the wiki page mode\r\n                var wikiPageMode = form._wikiPageMode ? form._wikiPageMode.value : null;\r\n                // Get the webpart page mode\r\n                var wpPageMode = form.MSOLayout_InDesignMode ? form.MSOLayout_InDesignMode.value : null;\r\n                // Determine if the page is being edited\r\n                return wikiPageMode == \"Edit\" || wpPageMode == \"1\";\r\n            }\r\n            // Unable to determine\r\n            return false;\r\n        };\r\n        /**\r\n         * Method to render the webpart\r\n         */\r\n        this.render = function () {\r\n            var element = null;\r\n            // Get the webpart information\r\n            _this._wp = _this.getWebPartInfo();\r\n            if (_this._wp == null || _this._wp.el == null) {\r\n                // Log\r\n                console.log(\"[sp-webpart] The target webpart element '\" + _this._props.elementId + \"' was not found.\");\r\n                return;\r\n            }\r\n            // See if the page is being edited\r\n            var returnVal = null;\r\n            if (_this.isEditMode()) {\r\n                // Add the help link\r\n                _this.addHelpLink();\r\n                // Call the render event\r\n                if (_this._props.onRenderEdit) {\r\n                    // Execute the render edit event\r\n                    returnVal = _this._props.onRenderEdit(_this._wp);\r\n                }\r\n            }\r\n            else {\r\n                // See if the configuration is defined, but has no value\r\n                if (_this._wp.cfg || (_this._props.cfgElementId || \"\").length == 0) {\r\n                    // Execute the render edit event\r\n                    returnVal = _this._props.onRenderDisplay(_this._wp);\r\n                }\r\n                else {\r\n                    // Render a message\r\n                    _this._wp.el.innerHTML = '<h3>Please edit the page and configure the webpart.</h3>';\r\n                }\r\n            }\r\n            // See if a promise was returned\r\n            if (returnVal && returnVal.then) {\r\n                // Wait for the request to complete\r\n                returnVal.then(function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Execute the post render event\r\n                    _this._props.onPostRender ? _this._props.onPostRender(_this._wp) : null;\r\n                });\r\n            }\r\n            else {\r\n                // Execute the post render event\r\n                _this._props.onPostRender ? _this._props.onPostRender(_this._wp) : null;\r\n            }\r\n        };\r\n        // Set the properties\r\n        this._props = props || {};\r\n        // Add a load event\r\n        window.addEventListener(\"load\", function () {\r\n            // Render the component\r\n            _this.render();\r\n        });\r\n    }\r\n    // Method to create an instance of the webpart\r\n    _WebPart.create = function (props) {\r\n        // Return an instance of the webpart\r\n        return new _WebPart(props);\r\n    };\r\n    return _WebPart;\r\n}());\r\nexports.WebPart = _WebPart;\r\n//# sourceMappingURL=webpart.js.map\n\n/***/ }),\n\n/***/ 919:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Modal Dialog\r\n */\r\nexports.ModalDialog = {\r\n    // Closes the dialog\r\n    close: function (dialogResult) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.close(dialogResult); });\r\n    },\r\n    // Close the dialog\r\n    commonModalDialogClose: function (dialogResult, returnVal) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.commonModalDialogClose(dialogResult, returnVal); });\r\n    },\r\n    // Open a dialog\r\n    commonModalDialogOpen: function (url, options, callback, args) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.commonModalDialogOpen(url, options, callback, args); });\r\n    },\r\n    // Method to ensure the core library is loaded\r\n    load: function () {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if the class exists\r\n            if (SP && SP.UI && SP.UI.ModalDialog) {\r\n                resolve();\r\n            }\r\n            else {\r\n                // Wait for the core script to be loaded\r\n                SP.SOD.executeFunc(\"sp.js\", \"SP.UI.ModalDialog\", function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    },\r\n    // Opens a pop-up page\r\n    OpenPopUpPage: function (url, callback, width, height) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.OpenPopUpPage(url, callback, width, height); });\r\n    },\r\n    // Refreshes the page\r\n    RefreshPage: function (dialogResult) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.RefreshPage(dialogResult); });\r\n    },\r\n    // Shows a modal dialog\r\n    showModalDialog: function (options) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.showModalDialog(options); });\r\n    },\r\n    // Shows a pop-up dialog\r\n    ShowPopupDialog: function (url) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.ShowPopupDialog(url); });\r\n    },\r\n    // Shows a wait screen\r\n    showWaitScreenSize: function (title, message, callback, height, width) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.showWaitScreenSize(title, message, callback, height, width); });\r\n    },\r\n    // Shows a wait screen w/ no close button\r\n    showWaitScreenWithNoClose: function (title, message, height, width) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.showWaitScreenWithNoClose(title, message, height, width); });\r\n    }\r\n};\r\n/**\r\n * Notification\r\n */\r\nexports.Notify = {\r\n    // Adds a notification\r\n    addNotification: function (html, sticky) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the library and call the method\r\n            exports.Notify.load().then(function () { resolve(SP.UI.Notify.addNotification(html, sticky)); });\r\n        });\r\n    },\r\n    // Method to ensure the core library is loaded\r\n    load: function () {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if the class exists\r\n            if (SP && SP.UI && SP.UI.Notify) {\r\n                resolve();\r\n            }\r\n            else {\r\n                // Wait for the core script to be loaded\r\n                SP.SOD.executeFunc(\"sp.js\", \"SP.UI.Notify\", function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    },\r\n    // Removes a notification\r\n    removeNotification: function (id) {\r\n        // Load the library and call the method\r\n        exports.Notify.load().then(function () { SP.UI.Notify.removeNotification(id); });\r\n    }\r\n};\r\n/**\r\n * Status\r\n */\r\nexports.Status = {\r\n    // Adds a status\r\n    addStatus: function (title, html, prepend) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the library\r\n            exports.Status.load().then(function () {\r\n                // Add the status and resolve the promise\r\n                resolve(SP.UI.Status.addStatus(title, html, prepend));\r\n            });\r\n        });\r\n    },\r\n    // Appends a status\r\n    appendStatus: function (id, title, html) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the library\r\n            exports.Status.load().then(function () {\r\n                // Add the status and resolve the promise\r\n                resolve(SP.UI.Status.appendStatus(id, title, html));\r\n            });\r\n        });\r\n    },\r\n    // Method to ensure the core library is loaded\r\n    load: function () {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if the class exists\r\n            if (SP && SP.UI && SP.UI.Status) {\r\n                resolve();\r\n            }\r\n            else {\r\n                // Wait for the core script to be loaded\r\n                SP.SOD.executeFunc(\"sp.js\", \"SP.UI.Status\", function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    },\r\n    // Removes all status messages\r\n    removeAllStatus: function (hide) {\r\n        // Load the library and call the method\r\n        exports.Status.load().then(function () { SP.UI.Status.removeAllStatus(hide); });\r\n    },\r\n    // Removes a status\r\n    removeStatus: function (id) {\r\n        // Load the library and call the method\r\n        exports.Status.load().then(function () { SP.UI.Status.removeStatus(id); });\r\n    },\r\n    // Sets the status color\r\n    setStatusPriColor: function (id, color) {\r\n        // Load the library and call the method\r\n        exports.Status.load().then(function () { SP.UI.Status.setStatusPriColor(id, color); });\r\n    },\r\n    // Updates the status\r\n    updateStatus: function (id, html) {\r\n        // Load the library and call the method\r\n        exports.Status.load().then(function () { SP.UI.Status.updateStatus(id, html); });\r\n    }\r\n};\r\n//# sourceMappingURL=sp.js.map\n\n/***/ }),\n\n/***/ 920:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 921:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar helper_1 = __webpack_require__(861);\r\nexports.Helper = helper_1.Types;\r\nvar mapper_1 = __webpack_require__(860);\r\nexports.SP = mapper_1.Types;\r\nvar utils_1 = __webpack_require__(858);\r\nexports.Util = utils_1.Types;\r\n//# sourceMappingURL=types.js.map\n\n/***/ }),\n\n/***/ 922:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Helper = __webpack_require__(861);\r\nvar Lib = __webpack_require__(859);\r\nvar Mapper = __webpack_require__(860);\r\n/**\r\n * SharePoint REST Library\r\n */\r\nexports.$REST = {\r\n    __ver: 3.53,\r\n    ContextInfo: Lib.ContextInfo,\r\n    DefaultRequestToHostFl: false,\r\n    Helper: {\r\n        App: Helper.App,\r\n        Dependencies: Helper.Dependencies,\r\n        FieldSchemaXML: Helper.FieldSchemaXML,\r\n        JSLink: Helper.JSLink,\r\n        ListForm: Helper.ListForm,\r\n        ListFormField: Helper.ListFormField,\r\n        Loader: Helper.Loader,\r\n        parse: Helper.parse,\r\n        RibbonLink: Helper.RibbonLink,\r\n        SP: Helper.SP,\r\n        SPConfig: Helper.SPConfig,\r\n        SuiteBarLink: Helper.SuiteBarLink,\r\n        Taxonomy: Helper.Taxonomy,\r\n        WebPart: Helper.WebPart\r\n    },\r\n    List: function (listName, targetInfo) { return new Lib.List(listName, targetInfo); },\r\n    Navigation: function (url, targetInfo) { return new Lib.Navigation(url, targetInfo); },\r\n    PeopleManager: function (targetInfo) { return new Lib.PeopleManager(targetInfo); },\r\n    PeoplePicker: function (targetInfo) { return new Lib.PeoplePicker(targetInfo); },\r\n    ProfileLoader: function (targetInfo) { return new Lib.ProfileLoader(targetInfo); },\r\n    Search: function (url, targetInfo) { return new Lib.Search(url, targetInfo); },\r\n    Site: function (url, targetInfo) { return new Lib.Site(url, targetInfo); },\r\n    SPTypes: Mapper.SPTypes,\r\n    SocialFeed: Lib.SocialFeed,\r\n    UserProfile: function (targetInfo) { return new Lib.UserProfile(targetInfo); },\r\n    Utility: function (url, targetInfo) { return new Lib.Utility(url, targetInfo); },\r\n    Web: function (url, targetInfo) { return new Lib.Web(url, targetInfo); }\r\n};\r\n// See if the library doesn't exist, or is an older version\r\nvar global = Lib.ContextInfo.window.$REST;\r\nif (global == null || global.__ver == null || global.__ver < exports.$REST.__ver) {\r\n    // Set the global variable\r\n    Lib.ContextInfo.window.$REST = exports.$REST;\r\n    // Alert other scripts this library is loaded\r\n    SP && SP.SOD ? SP.SOD.notifyScriptLoadedAndExecuteWaitingJobs(\"gd-sprest.js\") : null;\r\n}\r\n//# sourceMappingURL=rest.js.map\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.dceb80be.chunk.js","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Type definitions for gd-sprest\r\n// Project: https://gunjandatta.github.io/sprest\r\n// Definitions by: Gunjan Datta <https://github.com/gunjandatta>\r\n/***************************************************************************************************\r\nMIT License\r\n\r\nCopyright (c) 2016 Dattabase, LLC.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n***************************************************************************************************/\r\nvar Helper = require(\"./helper\");\r\nexports.Helper = Helper;\r\nvar mapper_1 = require(\"./mapper\");\r\nexports.SPTypes = mapper_1.SPTypes;\r\nvar Types = require(\"./types\");\r\nexports.Types = Types;\r\n__export(require(\"./lib\"));\r\n__export(require(\"./rest\"));\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/index.js\n// module id = 857\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./requestType\"));\r\n__export(require(\"./baseHelper\"));\r\n__export(require(\"./baseRequest\"));\r\n__export(require(\"./baseExecution\"));\r\n__export(require(\"./base\"));\r\n__export(require(\"./batch\"));\r\n__export(require(\"./methodInfo\"));\r\n__export(require(\"./oData\"));\r\n__export(require(\"./targetInfo\"));\r\n__export(require(\"./xhrRequest\"));\r\nvar Types = require(\"./types\");\r\nexports.Types = Types;\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/index.js\n// module id = 858\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./contextInfo\"));\r\n__export(require(\"./jslink\"));\r\n__export(require(\"./list\"));\r\n__export(require(\"./navigation\"));\r\n__export(require(\"./peopleManager\"));\r\n__export(require(\"./peoplePicker\"));\r\n__export(require(\"./profileLoader\"));\r\n__export(require(\"./search\"));\r\n__export(require(\"./site\"));\r\n__export(require(\"./socialFeed\"));\r\n__export(require(\"./userProfile\"));\r\n__export(require(\"./utility\"));\r\n__export(require(\"./web\"));\r\nvar Types = require(\"./types\");\r\nexports.Types = Types;\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/index.js\n// module id = 859\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Mapper = require(\"./mapper\");\r\nexports.Mapper = Mapper;\r\nvar SPTypes = require(\"./sptypes\");\r\nexports.SPTypes = SPTypes;\r\nvar Types = require(\"./types\");\r\nexports.Types = Types;\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/index.js\n// module id = 860\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./app\"));\r\n__export(require(\"./dependencies\"));\r\n__export(require(\"./fieldSchemaXML\"));\r\n__export(require(\"./jslink\"));\r\n__export(require(\"./listForm\"));\r\n__export(require(\"./listFormField\"));\r\n__export(require(\"./loader\"));\r\n__export(require(\"./parse\"));\r\n__export(require(\"./ribbonLink\"));\r\n__export(require(\"./sbLink\"));\r\n__export(require(\"./spCfg\"));\r\n__export(require(\"./taxonomy\"));\r\n__export(require(\"./webpart\"));\r\nvar SP = require(\"./sp\");\r\nexports.SP = SP;\r\nvar Types = require(\"./types\");\r\nexports.Types = Types;\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/index.js\n// module id = 861\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/*********************************************************************************************************************************/\r\n// Web\r\n/*********************************************************************************************************************************/\r\nvar _Web = /** @class */ (function (_super) {\r\n    __extends(_Web, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _Web(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"web\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"web\" } });\r\n        return _this;\r\n    }\r\n    return _Web;\r\n}(utils_1.Base));\r\nexports.Web = _Web;\r\n//# sourceMappingURL=web.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/web.js\n// module id = 862\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./spCfgTypes\"));\r\nvar lib_1 = require(\"../lib\");\r\nvar _1 = require(\".\");\r\n/**\r\n * SharePoint Configuration\r\n */\r\nvar _SPConfig = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _SPConfig(cfg, webUrl) {\r\n        var _this = this;\r\n        // Method to install by configuration type\r\n        this.installByType = function (cfgType, callback, targetName) { return _this.install(callback, cfgType, targetName); };\r\n        // Method to uninstall by the configuration type\r\n        this.uninstallByType = function (cfgType, callback, targetName) { return _this.uninstall(callback, cfgType, targetName); };\r\n        /**\r\n         * Methods\r\n         */\r\n        // Method to create the content types\r\n        this.createContentTypes = function (contentTypes, cfgContentTypes) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the content types exist\r\n                if (cfgContentTypes == null || cfgContentTypes.length == 0) {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_1 = function (i) {\r\n                    var cfgContentType = cfgContentTypes[i];\r\n                    // See if this content type already exists\r\n                    var ct = _this.isInCollection(\"Name\", cfgContentType.Name, contentTypes.results);\r\n                    if (ct) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' already exists.\");\r\n                        // Update the configuration\r\n                        cfgContentType.ContentType = ct;\r\n                    }\r\n                    else {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Content Type] Creating the '\" + cfgContentType.Name + \"' content type.\");\r\n                        // See if the parent name exists\r\n                        if (cfgContentType.ParentName) {\r\n                            // Get the web containing the parent content type\r\n                            (new lib_1.Web(cfgContentType.ParentWebUrl || _this._webUrl))\r\n                                .ContentTypes()\r\n                                .query({\r\n                                Filter: \"Name eq '\" + cfgContentType.ParentName + \"'\"\r\n                            })\r\n                                .execute(function (parent) {\r\n                                // See if the parent exists\r\n                                if (parent.results[0]) {\r\n                                    // Add the available content type\r\n                                    contentTypes.addAvailableContentType(parent.results[0].Id.StringValue).execute(function (ct) {\r\n                                        // See if it was successful\r\n                                        if (ct.existsFl) {\r\n                                            // Log\r\n                                            console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' was created successfully.\");\r\n                                            // Update the configuration\r\n                                            cfgContentType.ContentType = ct;\r\n                                            // Trigger the event\r\n                                            cfgContentType.onCreated ? cfgContentType.onCreated(ct) : null;\r\n                                        }\r\n                                        else {\r\n                                            // Log\r\n                                            console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' failed to be created.\");\r\n                                            console.error(\"[gd-sprest][Field] Error: \" + ct.response);\r\n                                        }\r\n                                    }, true);\r\n                                }\r\n                                else {\r\n                                    // Log\r\n                                    console.log(\"[gd-sprest][Content Type] The parent content type '\" + cfgContentType.Name + \"' was not found.\");\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            // Create the content type\r\n                            contentTypes.add({\r\n                                Description: cfgContentType.Description,\r\n                                Group: cfgContentType.Group,\r\n                                Name: cfgContentType.Name\r\n                            }).execute(function (ct) {\r\n                                // See if it was successful\r\n                                if (ct.existsFl) {\r\n                                    // Log\r\n                                    console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' was created successfully.\");\r\n                                    // Update the configuration\r\n                                    cfgContentType.ContentType = ct;\r\n                                    // Trigger the event\r\n                                    cfgContentType.onCreated ? cfgContentType.onCreated(ct) : null;\r\n                                }\r\n                                else {\r\n                                    // Log\r\n                                    console.log(\"[gd-sprest][Content Type] The content type '\" + cfgContentType.Name + \"' failed to be created.\");\r\n                                    console.error(\"[gd-sprest][Field] Error: \" + ct.response);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgContentTypes.length; i++) {\r\n                    _loop_1(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                contentTypes.done(function () {\r\n                    var _loop_2 = function (i) {\r\n                        var cfgContentType = cfgContentTypes[i];\r\n                        var cfgUpdate = {};\r\n                        var updateFl = false;\r\n                        // Ensure the content type exists\r\n                        if (cfgContentType.ContentType == null) {\r\n                            return \"continue\";\r\n                        }\r\n                        /**\r\n                         * See if we need to update the properties\r\n                         */\r\n                        // Description\r\n                        if (cfgContentType.ContentType.Description != cfgContentType.Description) {\r\n                            // Update the configuration\r\n                            cfgUpdate.Description = cfgContentType.Description;\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Description requires update.\");\r\n                            // Set the flag\r\n                            updateFl = true;\r\n                        }\r\n                        // Group\r\n                        if (cfgContentType.ContentType.Group != cfgContentType.Group) {\r\n                            // Update the configuration\r\n                            cfgUpdate.Group = cfgContentType.Group;\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Group requires update.\");\r\n                            // Set the flag\r\n                            updateFl = true;\r\n                        }\r\n                        // JSLink\r\n                        if (cfgContentType.ContentType.JSlink != cfgContentType.JSLink) {\r\n                            // Update the configuration\r\n                            cfgUpdate.JSLink = cfgContentType.JSLink;\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] JSLink requires update.\");\r\n                            // Set the flag\r\n                            updateFl = true;\r\n                        }\r\n                        // Name\r\n                        if (cfgContentType.ContentType.Name != cfgContentType.Name) {\r\n                            // Update the configuration\r\n                            cfgUpdate.Name = cfgContentType.Name;\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Name requires update.\");\r\n                            // Set the flag\r\n                            updateFl = true;\r\n                        }\r\n                        // See if an update is needed\r\n                        if (updateFl) {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Updating the webpart.\");\r\n                            // Update the content type\r\n                            cfgContentType.ContentType.update({ JSLink: cfgContentType.JSLink }).execute(function () {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Content Type][\" + cfgContentType.ContentType.Name + \"] Update request completed.\");\r\n                                // Trigger the event\r\n                                cfgContentType.onUpdated ? cfgContentType.onUpdated(cfgContentType.ContentType) : null;\r\n                            });\r\n                        }\r\n                        else {\r\n                            // Trigger the event\r\n                            cfgContentType.onUpdated ? cfgContentType.onUpdated(cfgContentType.ContentType) : null;\r\n                        }\r\n                    };\r\n                    // Parse the configuration\r\n                    for (var i = 0; i < cfgContentTypes.length; i++) {\r\n                        _loop_2(i);\r\n                    }\r\n                    // Wait for the requests to complete\r\n                    contentTypes.done(function () {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to create the fields\r\n        this.createFields = function (fields, cfgFields) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the fields exist\r\n                if (cfgFields == null || cfgFields.length == 0) {\r\n                    // Resolve the promise and return\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_3 = function (i) {\r\n                    var cfgField = cfgFields[i];\r\n                    // See if this field already exists\r\n                    var field = _this.isInCollection(\"InternalName\", cfgField.name, fields.results);\r\n                    if (field) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Field] The field '\" + cfgField.name + \"' already exists.\");\r\n                        // Trigger the event\r\n                        cfgField.onUpdated ? cfgField.onUpdated(field) : null;\r\n                    }\r\n                    else {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Field] Creating the '\" + cfgField.name + \"' field.\");\r\n                        //\r\n                        var onFieldCreated_1 = function (field) {\r\n                            // See if it was successful\r\n                            if (field.existsFl) {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Field] The field '\" + field.InternalName + \"' was created successfully.\");\r\n                                // Trigger the event\r\n                                cfgField.onCreated ? cfgField.onCreated(field) : null;\r\n                            }\r\n                            else {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Field] The field '\" + cfgField.name + \"' failed to be created.\");\r\n                                console.error(\"[gd-sprest][Field] Error: \" + field.response);\r\n                            }\r\n                        };\r\n                        // Compute the schema xml\r\n                        _1.FieldSchemaXML(cfgField).then(function (response) {\r\n                            var schemas = typeof (response) === \"string\" ? [response] : response;\r\n                            // Parse the fields to add\r\n                            for (var i_1 = 0; i_1 < schemas.length; i_1++) {\r\n                                // Add the field\r\n                                fields.createFieldAsXml(schemas[i_1]).execute(onFieldCreated_1, true);\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n                // Parse the fields\r\n                for (var i = 0; i < cfgFields.length; i++) {\r\n                    _loop_3(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                fields.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to create the lists\r\n        this.createLists = function (lists, cfgLists) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.Lists) {\r\n                        // Resolve the promise and return\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the lists exist\r\n                if (cfgLists == null || cfgLists.length == 0) {\r\n                    // Resolve the promise and return\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_4 = function (i) {\r\n                    var cfgList = cfgLists[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this list\r\n                        if (cfgList.ListInformation.Title.toLowerCase() != _this._targetName) {\r\n                            return \"continue\";\r\n                        }\r\n                    }\r\n                    // See if this content type already exists\r\n                    var list = _this.isInCollection(\"Title\", cfgList.ListInformation.Title, lists.results);\r\n                    if (list) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][List] The list '\" + cfgList.ListInformation.Title + \"' already exists.\");\r\n                    }\r\n                    else {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][List] Creating the '\" + cfgList.ListInformation.Title + \"' list.\");\r\n                        // Update the list name and remove spaces\r\n                        var listInfo_1 = cfgList.ListInformation;\r\n                        var listName_1 = listInfo_1.Title;\r\n                        listInfo_1.Title = listName_1.replace(/ /g, \"\");\r\n                        // Add the list\r\n                        lists.add(listInfo_1)\r\n                            .execute(function (list) {\r\n                            // Restore the list name in the configuration\r\n                            listInfo_1.Title = listName_1;\r\n                            // See if the request was successful\r\n                            if (list.existsFl) {\r\n                                // See if we need to update the list\r\n                                if (list.existsFl && list.Title != listName_1) {\r\n                                    // Update the list\r\n                                    list.update({ Title: listName_1 }).execute(function () {\r\n                                        // Log\r\n                                        console.log(\"[gd-sprest][List] The list '\" + list.Title + \"' was created successfully.\");\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    // Log\r\n                                    console.log(\"[gd-sprest][List] The list '\" + list.Title + \"' was created successfully.\");\r\n                                }\r\n                                // Trigger the event\r\n                                cfgList.onCreated ? cfgList.onCreated(list) : null;\r\n                            }\r\n                            else {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][List] The list '\" + listInfo_1.Title + \"' failed to be created.\");\r\n                                console.log(\"[gd-sprest][List] Error: '\" + list.response);\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n                // Parse the content types\r\n                for (var i = 0; i < cfgLists.length; i++) {\r\n                    _loop_4(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                lists.done(function () {\r\n                    // Update the lists\r\n                    _this.updateLists(cfgLists).then(function () {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to create the user custom actions\r\n        this.createUserCustomActions = function (customActions, cfgCustomActions) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.SiteUserCustomActions || _this._cfgType != _1.SPCfgType.WebUserCustomActions) {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the lists exist\r\n                if (cfgCustomActions == null || cfgCustomActions.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Parse the custom actions\r\n                for (var i = 0; i < cfgCustomActions.length; i++) {\r\n                    var cfgCustomAction = cfgCustomActions[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this custom action\r\n                        if (cfgCustomAction.Name.toLowerCase() != _this._targetName ||\r\n                            cfgCustomAction.Title.toLowerCase() != _this._targetName) {\r\n                            // Skip this custom action\r\n                            continue;\r\n                        }\r\n                    }\r\n                    // See if this custom action already exists\r\n                    if (_this.isInCollection(\"Name\", cfgCustomAction.Name, customActions.results)) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][Custom Action] The custom action '\" + cfgCustomAction.Name + \"' already exists.\");\r\n                    }\r\n                    else {\r\n                        // Add the custom action\r\n                        customActions.add(cfgCustomAction).execute(function (ca) {\r\n                            // Ensure it exists\r\n                            if (ca.existsFl) {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Custom Action] The custom action '\" + ca.Name + \"' was created successfully.\");\r\n                            }\r\n                            else {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][Custom Action] The custom action '\" + ca.Name + \"' failed to be created.\");\r\n                                console.log(\"[gd-sprest][Custom Action] Error: \" + ca.response);\r\n                            }\r\n                        }, true);\r\n                    }\r\n                }\r\n                // Wait for the requests to complete\r\n                customActions.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to create the list views\r\n        this.createViews = function (views, cfgViews) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the list views exist\r\n                if (cfgViews == null || cfgViews.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_5 = function (i) {\r\n                    var cfgView = cfgViews[i];\r\n                    // See if this view exists\r\n                    var view = _this.isInCollection(\"Title\", cfgView.ViewName, views.results);\r\n                    if (view) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][View] The view '\" + cfgView.ViewName + \"' already exists.\");\r\n                    }\r\n                    else {\r\n                        // Add the view\r\n                        views.add({\r\n                            Title: cfgView.ViewName,\r\n                            ViewQuery: cfgView.ViewQuery\r\n                        }).execute(function (view) {\r\n                            // Ensure it exists\r\n                            if (view.existsFl) {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][View] The view '\" + cfgView.ViewName + \"' was created successfully.\");\r\n                                // Trigger the event\r\n                                cfgView.onCreated ? cfgView.onCreated(view) : null;\r\n                            }\r\n                            else {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][View] The view '\" + cfgView.ViewName + \"' failed to be created.\");\r\n                                console.log(\"[gd-sprest][View] Error: \" + view.response);\r\n                            }\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the views\r\n                for (var i = 0; i < cfgViews.length; i++) {\r\n                    _loop_5(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                views.done(function () {\r\n                    // Update the views\r\n                    _this.updateViews(views, cfgViews).then(function () {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to create the web parts\r\n        this.createWebParts = function () {\r\n            var cfgWebParts = _this._configuration.WebPartCfg;\r\n            // See if the configuration type exists\r\n            if (_this._cfgType) {\r\n                // Ensure it's for this type\r\n                if (_this._cfgType != _1.SPCfgType.WebParts) {\r\n                    return;\r\n                }\r\n            }\r\n            // Ensure the configuration exists\r\n            if (cfgWebParts == null || cfgWebParts.length == 0) {\r\n                return;\r\n            }\r\n            // Log\r\n            console.log(\"[gd-sprest][WebPart] Creating the web parts.\");\r\n            // Get the root web\r\n            (new lib_1.Web(lib_1.ContextInfo.siteServerRelativeUrl))\r\n                .Lists(\"Web Part Gallery\")\r\n                .RootFolder()\r\n                .query({\r\n                Expand: [\"Files\"]\r\n            })\r\n                .execute(function (folder) {\r\n                var _loop_6 = function (i) {\r\n                    var cfgWebPart = cfgWebParts[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this list\r\n                        if (cfgWebPart.FileName.toLowerCase() != _this._targetName) {\r\n                            return \"continue\";\r\n                        }\r\n                    }\r\n                    // See if this webpart exists\r\n                    var file = _this.isInCollection(\"Name\", cfgWebPart.FileName, folder.Files.results);\r\n                    if (file.existsFl) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][WebPart] The webpart '\" + cfgWebPart.FileName + \"' already exists.\");\r\n                        // Trigger the event\r\n                        cfgWebPart.onUpdated ? cfgWebPart.onUpdated(file) : null;\r\n                    }\r\n                    else {\r\n                        // Trim the xml\r\n                        var xml = cfgWebPart.XML.trim();\r\n                        // Convert the string to an array buffer\r\n                        var buffer = new ArrayBuffer(xml.length * 2);\r\n                        var bufferView = new Uint16Array(buffer);\r\n                        for (var j = 0; j < xml.length; j++) {\r\n                            bufferView[j] = xml.charCodeAt(j);\r\n                        }\r\n                        // Create the webpart, but execute the requests one at a time\r\n                        folder.Files.add(true, cfgWebPart.FileName, buffer).execute(function (file) {\r\n                            // See if group exists\r\n                            if (cfgWebPart.Group) {\r\n                                // Set the target to the root web\r\n                                (new lib_1.Web(lib_1.ContextInfo.siteServerRelativeUrl))\r\n                                    .Lists(\"Web Part Gallery\")\r\n                                    .Items()\r\n                                    .query({\r\n                                    Filter: \"FileLeafRef eq '\" + cfgWebPart.FileName + \"'\"\r\n                                })\r\n                                    .execute(function (items) {\r\n                                    // Update the item\r\n                                    items.results[0].update({\r\n                                        Group: cfgWebPart.Group\r\n                                    }).execute();\r\n                                });\r\n                            }\r\n                            // Log\r\n                            console.log(\"[gd-sprest][WebPart] The '\" + file.Name + \"' webpart file was uploaded successfully.\");\r\n                            // Trigger the event\r\n                            cfgWebPart.onCreated ? cfgWebPart.onCreated(file) : null;\r\n                        });\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgWebParts.length; i++) {\r\n                    _loop_6(i);\r\n                }\r\n            });\r\n        };\r\n        // Method to install the site components\r\n        this.installSite = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure site actions exist\r\n                if (_this._configuration.CustomActionCfg == null || _this._configuration.CustomActionCfg.Site == null) {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Log\r\n                console.log(\"[gd-sprest] Loading the site information...\");\r\n                // Get the site\r\n                (new lib_1.Site(_this._webUrl))\r\n                    .query({\r\n                    Expand: [\"UserCustomActions\"]\r\n                })\r\n                    .execute(function (site) {\r\n                    // Install the user custom actions\r\n                    _this.createUserCustomActions(site.UserCustomActions, _this._configuration.CustomActionCfg ? _this._configuration.CustomActionCfg.Site : []).then(function () {\r\n                        // Resolve the promise\r\n                        resolve(site);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to install the web components\r\n        this.installWeb = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Log\r\n                console.log(\"[gd-sprest] Loading the web information...\");\r\n                // Get the web\r\n                (new lib_1.Web(_this._webUrl))\r\n                    .query({\r\n                    Expand: [\"ContentTypes\", \"Fields\", \"Lists\", \"UserCustomActions\"]\r\n                })\r\n                    .execute(function (web) {\r\n                    // Create the fields\r\n                    _this.createFields(web.Fields, _this._configuration.Fields).then(function () {\r\n                        // Create the content types\r\n                        _this.createContentTypes(web.ContentTypes, _this._configuration.ContentTypes).then(function () {\r\n                            // Create the lists\r\n                            _this.createLists(web.Lists, _this._configuration.ListCfg).then(function () {\r\n                                // Create the web custom actions\r\n                                _this.createUserCustomActions(web.UserCustomActions, _this._configuration.CustomActionCfg ? _this._configuration.CustomActionCfg.Web : null).then(function () {\r\n                                    // Resolve the promise\r\n                                    resolve();\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to see if an object exists in a collection\r\n        this.isInCollection = function (key, value, collection) {\r\n            var valueLower = value.toLowerCase();\r\n            // Parse the collection\r\n            for (var i = 0; i < collection.length; i++) {\r\n                var keyValue = collection[i][key];\r\n                keyValue = keyValue ? keyValue.toLowerCase() : \"\";\r\n                // See if the item exists\r\n                if (valueLower == keyValue) {\r\n                    // Return true\r\n                    return collection[i];\r\n                }\r\n            }\r\n            // Not in the collection\r\n            return false;\r\n        };\r\n        // Method to remove the content type\r\n        this.removeContentTypes = function (contentTypes, cfgContentTypes) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the content types exist\r\n                if (cfgContentTypes == null || cfgContentTypes.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_7 = function (i) {\r\n                    var cfgContentType = cfgContentTypes[i];\r\n                    // Get the field\r\n                    var ct = _this.isInCollection(\"Name\", cfgContentType.Name, contentTypes.results);\r\n                    if (ct) {\r\n                        // Remove the field\r\n                        ct.delete().execute(function () {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Field] The content type '\" + ct.Name + \"' was removed.\");\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgContentTypes.length; i++) {\r\n                    _loop_7(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                contentTypes.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to remove the fields\r\n        this.removeFields = function (fields, cfgFields) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Ensure the fields exist\r\n                if (cfgFields == null || cfgFields.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_8 = function (i) {\r\n                    var cfgField = cfgFields[i];\r\n                    // Get the field\r\n                    var field = _this.isInCollection(\"InternalName\", cfgField.name, fields.results);\r\n                    if (field) {\r\n                        // Remove the field\r\n                        field.delete().execute(function () {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Field] The field '\" + field.InternalName + \"' was removed.\");\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgFields.length; i++) {\r\n                    _loop_8(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                fields.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to remove the lists\r\n        this.removeLists = function (lists, cfgLists) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.Lists) {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the lists exist\r\n                if (cfgLists == null || cfgLists.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_9 = function (i) {\r\n                    var cfgList = cfgLists[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this list\r\n                        if (cfgList.ListInformation.Title.toLowerCase() != _this._targetName) {\r\n                            return \"continue\";\r\n                        }\r\n                    }\r\n                    // Get the list\r\n                    var list = _this.isInCollection(\"Title\", cfgList.ListInformation.Title, lists.results);\r\n                    if (list) {\r\n                        // Remove the list\r\n                        list.delete().execute(function () {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][List] The list '\" + list.Title + \"' was removed.\");\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgLists.length; i++) {\r\n                    _loop_9(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                lists.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to remove the user custom actions\r\n        this.removeUserCustomActions = function (customActions, cfgCustomActions) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.SiteUserCustomActions || _this._cfgType != _1.SPCfgType.WebUserCustomActions) {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the custom actions exist\r\n                if (cfgCustomActions == null || cfgCustomActions.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var _loop_10 = function (i) {\r\n                    var cfgCustomAction = cfgCustomActions[i];\r\n                    // See if the target name exists\r\n                    if (_this._cfgType && _this._targetName) {\r\n                        // Ensure it's for this custom action\r\n                        if (cfgCustomAction.Name.toLowerCase() != _this._targetName ||\r\n                            cfgCustomAction.Title.toLowerCase() != _this._targetName) {\r\n                            return \"continue\";\r\n                        }\r\n                    }\r\n                    // Get the custom action\r\n                    var ca = _this.isInCollection(\"Name\", cfgCustomAction.Name, customActions.results);\r\n                    if (ca) {\r\n                        // Remove the custom action\r\n                        ca.delete().execute(function () {\r\n                            // Log\r\n                            console.log(\"[gd-sprest][Custom Action] The custom action '\" + ca.Name + \"' was removed.\");\r\n                        }, true);\r\n                    }\r\n                };\r\n                // Parse the configuration\r\n                for (var i = 0; i < cfgCustomActions.length; i++) {\r\n                    _loop_10(i);\r\n                }\r\n                // Wait for the requests to complete\r\n                customActions.done(function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to remove the web parts\r\n        this.removeWebParts = function () {\r\n            var cfgWebParts = _this._configuration.WebPartCfg;\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the configuration type exists\r\n                if (_this._cfgType) {\r\n                    // Ensure it's for this type\r\n                    if (_this._cfgType != _1.SPCfgType.WebParts) {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                }\r\n                // Ensure the configuration exists\r\n                if (cfgWebParts == null || cfgWebParts.length == 0) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Log\r\n                console.log(\"[gd-sprest][WebPart] Creating the web parts.\");\r\n                // Get the root web\r\n                (new lib_1.Web(lib_1.ContextInfo.siteServerRelativeUrl))\r\n                    .Lists(\"Web Part Gallery\")\r\n                    .RootFolder()\r\n                    .Files()\r\n                    .execute(function (files) {\r\n                    var _loop_11 = function (i) {\r\n                        var cfgWebPart = cfgWebParts[i];\r\n                        // See if the target name exists\r\n                        if (_this._cfgType && _this._targetName) {\r\n                            // Ensure it's for this list\r\n                            if (cfgWebPart.FileName.toLowerCase() != _this._targetName) {\r\n                                return \"continue\";\r\n                            }\r\n                        }\r\n                        // Get the file\r\n                        var file = _this.isInCollection(\"Name\", cfgWebPart.FileName, files.results);\r\n                        if (file) {\r\n                            // Remove the file\r\n                            file.delete().execute(function () {\r\n                                // Log\r\n                                console.log(\"[gd-sprest][WebPart] The webpart '\" + file.Name + \"' file was removed.\");\r\n                            }, true);\r\n                        }\r\n                    };\r\n                    // Parse the configuration\r\n                    for (var i = 0; i < cfgWebParts.length; i++) {\r\n                        _loop_11(i);\r\n                    }\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to update the lists\r\n        this.updateLists = function (cfgLists) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                var request = function (idx, resolve) {\r\n                    // Get the list configuration\r\n                    var cfgList = cfgLists[idx];\r\n                    // See if the target name exists\r\n                    if (_this._targetName) {\r\n                        // Ensure it's for this list\r\n                        if (cfgList.ListInformation.Title.toLowerCase() != _this._targetName) {\r\n                            // Update the next list\r\n                            request(idx + 1, resolve);\r\n                            return;\r\n                        }\r\n                    }\r\n                    // Ensure the configuration exists\r\n                    if (cfgList) {\r\n                        // Get the web\r\n                        (new lib_1.Web(_this._webUrl))\r\n                            .Lists(cfgList.ListInformation.Title)\r\n                            .query({\r\n                            Expand: [\"ContentTypes\", \"Fields\", \"UserCustomActions\", \"Views\"]\r\n                        })\r\n                            .execute(function (list) {\r\n                            // See if the title field is being updated\r\n                            if (cfgList.TitleFieldDisplayName) {\r\n                                // Parse the fields\r\n                                for (var i = 0; i < list.Fields.results.length; i++) {\r\n                                    var field = list.Fields.results[i];\r\n                                    // See if this is the title field\r\n                                    if (field.InternalName == \"Title\") {\r\n                                        // See if an update is required\r\n                                        if (field.Title != cfgList.TitleFieldDisplayName) {\r\n                                            // Update the field name\r\n                                            field.update({ Title: cfgList.TitleFieldDisplayName }).execute(function () {\r\n                                                // Log\r\n                                                console.log(\"[gd-sprest][List] The 'Title' field's display name was updated to '\" + cfgList.TitleFieldDisplayName + \"'.\");\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            // Update the list fields\r\n                            _this.createFields(list.Fields, cfgList.CustomFields).then(function () {\r\n                                // Update the content types\r\n                                _this.createContentTypes(list.ContentTypes, cfgList.ContentTypes).then(function () {\r\n                                    // Update the views\r\n                                    _this.createViews(list.Views, cfgList.ViewInformation).then(function () {\r\n                                        // Trigger the event\r\n                                        cfgList.onUpdated ? cfgList.onUpdated(list) : null;\r\n                                        // Update the next list\r\n                                        request(idx + 1, resolve);\r\n                                    });\r\n                                });\r\n                            });\r\n                            // Update the user custom actions\r\n                            _this.createUserCustomActions(list.UserCustomActions, cfgList.UserCustomActions);\r\n                        });\r\n                    }\r\n                    else {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    }\r\n                };\r\n                // Execute the request\r\n                request(0, resolve);\r\n            });\r\n        };\r\n        // Method to update the views\r\n        this.updateViews = function (views, cfgViews) {\r\n            var counter = 0;\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                var _loop_12 = function (i) {\r\n                    var cfgView = cfgViews[i];\r\n                    // Get the view\r\n                    var view = views.getByTitle(cfgView.ViewName);\r\n                    // See if the view fields are defined\r\n                    if (cfgView.ViewFields && cfgView.ViewFields.length > 0) {\r\n                        // Log\r\n                        console.log(\"[gd-sprest][View] Updating the view fields for the '\" + cfgView.ViewName + \"' view.\");\r\n                        // Clear the view fields\r\n                        view.ViewFields().removeAllViewFields().execute(true);\r\n                        // Parse the view fields\r\n                        for (var i_2 = 0; i_2 < cfgView.ViewFields.length; i_2++) {\r\n                            // Add the view field\r\n                            view.ViewFields().addViewField(cfgView.ViewFields[i_2]).execute(true);\r\n                        }\r\n                    }\r\n                    // See if we are updating the view properties\r\n                    if (cfgView.JSLink || cfgView.ViewQuery) {\r\n                        var props = {};\r\n                        // Log\r\n                        console.log(\"[gd-sprest][View] Updating the view properties for the '\" + cfgView.ViewName + \"' view.\");\r\n                        // Set the properties\r\n                        cfgView.JSLink ? props[\"JSLink\"] = cfgView.JSLink : null;\r\n                        cfgView.ViewQuery ? props[\"ViewQuery\"] = cfgView.ViewQuery : null;\r\n                        // Update the view\r\n                        view.update(props).execute(true);\r\n                    }\r\n                    // Wait for the requests to complete\r\n                    view.done(function () {\r\n                        var args = [];\r\n                        for (var _i = 0; _i < arguments.length; _i++) {\r\n                            args[_i] = arguments[_i];\r\n                        }\r\n                        // Trigger the event\r\n                        cfgView.onUpdated ? cfgView.onUpdated(view) : null;\r\n                        // See if we are done\r\n                        if (++counter >= cfgViews.length) {\r\n                            // Resolve the promise\r\n                            resolve();\r\n                        }\r\n                    });\r\n                };\r\n                // Parse the views\r\n                for (var i = 0; i < cfgViews.length; i++) {\r\n                    _loop_12(i);\r\n                }\r\n            });\r\n        };\r\n        // Method to uninstall the site components\r\n        this.uninstallSite = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Log\r\n                console.log(\"[gd-sprest][uninstall] Loading the site information...\");\r\n                // Ensure site actions exist\r\n                if (_this._configuration.CustomActionCfg == null || _this._configuration.CustomActionCfg.Site == null) {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Get the site\r\n                (new lib_1.Site(_this._webUrl))\r\n                    .query({\r\n                    Expand: [\"UserCustomActions\"]\r\n                })\r\n                    .execute(function (site) {\r\n                    // Remove the user custom actions\r\n                    _this.removeUserCustomActions(site.UserCustomActions, _this._configuration.CustomActionCfg ? _this._configuration.CustomActionCfg.Site : []).then(function () {\r\n                        // Resolve the promise\r\n                        resolve(site);\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Method to uninstall the web components\r\n        this.uninstallWeb = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Log\r\n                console.log(\"[gd-sprest][uninstall] Loading the web information...\");\r\n                // Get the web\r\n                (new lib_1.Web(_this._webUrl))\r\n                    .query({\r\n                    Expand: [\"ContentTypes\", \"Fields\", \"Lists\", \"UserCustomActions\"]\r\n                })\r\n                    .execute(function (web) {\r\n                    // Remove the fields\r\n                    _this.removeFields(web.Fields, _this._configuration.Fields).then(function () {\r\n                        // Remove the content types\r\n                        _this.removeContentTypes(web.ContentTypes, _this._configuration.ContentTypes).then(function () {\r\n                            // Remove the lists\r\n                            _this.removeLists(web.Lists, _this._configuration.ListCfg).then(function () {\r\n                                // Remove the web custom actions\r\n                                _this.removeUserCustomActions(web.UserCustomActions, _this._configuration.CustomActionCfg ? _this._configuration.CustomActionCfg.Web : null).then(function () {\r\n                                    // Resolve the promise\r\n                                    resolve();\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        // Save the configuration\r\n        this._configuration = cfg;\r\n        // Save the target web url\r\n        this._webUrl = webUrl;\r\n    }\r\n    /**\r\n     * Public Methods\r\n     */\r\n    // Method to install the configuration\r\n    _SPConfig.prototype.install = function (callback, cfgType, targetName) {\r\n        var _this = this;\r\n        // Update the global variables\r\n        this._cfgType = cfgType;\r\n        this._targetName = targetName ? targetName.toLowerCase() : null;\r\n        // Install the web components\r\n        this.installWeb().then(function () {\r\n            // Install the site components\r\n            _this.installSite().then(function () {\r\n                // Create the webparts\r\n                _this.createWebParts();\r\n                // Log\r\n                console.log(\"[gd-sprest] The configuration script completed, but some requests may still be running.\");\r\n                // See if the callback exists\r\n                if (callback && typeof (callback) === \"function\") {\r\n                    // Execute the callback\r\n                    callback();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Method to uninstall the configuration\r\n    _SPConfig.prototype.uninstall = function (callback, cfgType, targetName) {\r\n        var _this = this;\r\n        // Update the global variables\r\n        this._cfgType = cfgType;\r\n        this._targetName = targetName;\r\n        // Uninstall the web components\r\n        this.uninstallWeb().then(function () {\r\n            // Uninstall the site components\r\n            _this.uninstallSite().then(function () {\r\n                // Remove the webparts\r\n                _this.removeWebParts().then(function () {\r\n                    // Log\r\n                    console.log(\"[gd-sprest] The configuration script completed, but some requests may still be running.\");\r\n                    // See if the callback exists\r\n                    if (callback && typeof (callback) === \"function\") {\r\n                        // Execute the callback\r\n                        callback();\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n    return _SPConfig;\r\n}());\r\n;\r\nexports.SPConfig = _SPConfig;\r\n//# sourceMappingURL=spCfg.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/spCfg.js\n// module id = 863\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Convert a JSON string to a base object\r\n */\r\nexports.parse = function (jsonString) {\r\n    // Try to parse the string\r\n    try {\r\n        var obj = JSON.parse(jsonString);\r\n        // Create a base object\r\n        var base = new utils_1.Base(obj.props);\r\n        // Set the properties\r\n        base.response = obj.response;\r\n        base.status = obj.status;\r\n        // Update the object\r\n        base.updateDataObject(false);\r\n        // Return the base object\r\n        return base;\r\n    }\r\n    catch (_a) { }\r\n    return null;\r\n};\r\n//# sourceMappingURL=parse.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/parse.js\n// module id = 864\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Taxonomy Helper Class\r\n */\r\nexports.Taxonomy = {\r\n    /**\r\n     * Method to find a term by id\r\n     */\r\n    findById: function (term, termId) {\r\n        // See if this is the root node\r\n        if (term.info && term.info.id == termId) {\r\n            // Return the root node\r\n            return term;\r\n        }\r\n        // Parse the child nodes\r\n        for (var prop in term) {\r\n            // Skip the info and parent\r\n            if (prop == \"info\" || prop == \"parent\") {\r\n                continue;\r\n            }\r\n            // Find the term by id\r\n            var childTerm = exports.Taxonomy.findById(term[prop], termId);\r\n            if (childTerm) {\r\n                return childTerm;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * Method to find a term by name\r\n     */\r\n    findByName: function (term, termName) {\r\n        // See if this is the root node\r\n        if (term.info && term.info.name == termName) {\r\n            // Return the root node\r\n            return term;\r\n        }\r\n        // Parse the child nodes\r\n        for (var prop in term) {\r\n            // Skip the info and parent\r\n            if (prop == \"info\" || prop == \"parent\") {\r\n                continue;\r\n            }\r\n            // Find the term by id\r\n            var childTerm = exports.Taxonomy.findByName(term[prop], termName);\r\n            if (childTerm) {\r\n                return childTerm;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * Method to get the terms\r\n     */\r\n    getTerms: function (termSet, termSetTerms) {\r\n        var terms = [];\r\n        // Add the root term\r\n        terms.push({\r\n            description: termSet.get_description(),\r\n            id: termSet.get_id().toString(),\r\n            name: termSet.get_name(),\r\n            path: [],\r\n            pathAsString: \"\",\r\n            props: termSet.get_customProperties()\r\n        });\r\n        // Parse the term sets terms\r\n        var enumerator = termSetTerms.getEnumerator();\r\n        while (enumerator.moveNext()) {\r\n            var term = enumerator.get_current();\r\n            // Create the terms\r\n            terms.push({\r\n                description: term.get_description(),\r\n                id: term.get_id().toString(),\r\n                name: term.get_name(),\r\n                path: term.get_pathOfTerm().split(\";\"),\r\n                pathAsString: term.get_pathOfTerm(),\r\n                props: term.get_customProperties()\r\n            });\r\n        }\r\n        // Sort the terms\r\n        terms = terms.sort(function (a, b) {\r\n            if (a.pathAsString < b.pathAsString) {\r\n                return -1;\r\n            }\r\n            if (a.pathAsString > b.pathAsString) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        // Return the terms\r\n        return terms;\r\n    },\r\n    /**\r\n     * Method to get the term group\r\n     */\r\n    getTermGroup: function (groupName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the scripts\r\n            exports.Taxonomy.loadScripts().then(function () {\r\n                // Get the taxonomy session\r\n                var context = SP.ClientContext.get_current();\r\n                var session = SP.Taxonomy.TaxonomySession.getTaxonomySession(context);\r\n                // See if we are getting a specific group name\r\n                if (groupName) {\r\n                    // Resolve the promise\r\n                    var termStores_1 = session.get_termStores();\r\n                    context.load(termStores_1, \"Include(Groups)\");\r\n                    context.executeQueryAsync(function () {\r\n                        // Get the default store\r\n                        var enumerator = termStores_1.getEnumerator();\r\n                        var termStore = enumerator.moveNext() ? enumerator.get_current() : null;\r\n                        if (termStore) {\r\n                            // Get the term group\r\n                            var termGroup = termStore.get_groups().getByName(groupName);\r\n                            context.load(termGroup);\r\n                            // Resolve the promise\r\n                            resolve({ context: context, termGroup: termGroup });\r\n                        }\r\n                        else {\r\n                            // Reject the promise\r\n                            reject(\"Unable to find the taxonomy store.\");\r\n                        }\r\n                    }, function () {\r\n                        var args = [];\r\n                        for (var _i = 0; _i < arguments.length; _i++) {\r\n                            args[_i] = arguments[_i];\r\n                        }\r\n                        // Reject the promise\r\n                        reject(args[1].get_message());\r\n                    });\r\n                }\r\n                else {\r\n                    // Get the default site collection group\r\n                    var termStore = session.getDefaultSiteCollectionTermStore();\r\n                    var termGroup = termStore.getSiteCollectionGroup(context.get_site());\r\n                    context.load(termGroup);\r\n                    // Resolve the promise\r\n                    resolve({ context: context, termGroup: termGroup });\r\n                }\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the terms by id\r\n     */\r\n    getTermsById: function (termStoreId, termSetId) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the scripts\r\n            exports.Taxonomy.loadScripts().then(function () {\r\n                // Get the taxonomy session\r\n                var context = SP.ClientContext.get_current();\r\n                var session = SP.Taxonomy.TaxonomySession.getTaxonomySession(context);\r\n                // Get the term set terms\r\n                var termStore = session.get_termStores().getById(termStoreId);\r\n                var termSet = termStore.getTermSet(termSetId);\r\n                var terms = termSet.getAllTerms();\r\n                context.load(termSet);\r\n                context.load(terms, \"Include(CustomProperties, Description, Id, Name, PathOfTerm)\");\r\n                // Execute the request\r\n                context.executeQueryAsync(function () {\r\n                    // Resolve the promise\r\n                    resolve(exports.Taxonomy.getTerms(termSet, terms));\r\n                }, function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Reject the promise\r\n                    reject(args[1].get_message());\r\n                });\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the term set by id\r\n     */\r\n    getTermSetById: function (termStoreId, termSetId) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the terms\r\n            exports.Taxonomy.getTermsById(termStoreId, termSetId).then(\r\n            // Success\r\n            function (terms) {\r\n                // Resolve the promise\r\n                resolve(exports.Taxonomy.toObject(terms));\r\n            }, \r\n            // Error\r\n            function (reason) {\r\n                // Reject the promise\r\n                reject(reason);\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the terms from the default site collection\r\n     */\r\n    getTermsFromDefaultSC: function (termSetName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the term group\r\n            exports.Taxonomy.getTermGroup().then(\r\n            // Success\r\n            function (_a) {\r\n                var context = _a.context, termGroup = _a.termGroup;\r\n                // Get the term set terms\r\n                var termSet = termGroup.get_termSets().getByName(termSetName);\r\n                var terms = termSet.getAllTerms();\r\n                context.load(termSet);\r\n                context.load(terms, \"Include(CustomProperties, Description, Id, Name, PathOfTerm)\");\r\n                // Execute the request\r\n                context.executeQueryAsync(function () {\r\n                    // Resolve the promise\r\n                    resolve(exports.Taxonomy.getTerms(termSet, terms));\r\n                }, function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Reject the promise\r\n                    reject(args[1].get_message());\r\n                });\r\n            }, \r\n            // Error\r\n            function (reason) {\r\n                // Reject the promise\r\n                reject(reason);\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the term set from the default site collection\r\n     */\r\n    getTermSetFromDefaultSC: function (termSetName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the terms\r\n            exports.Taxonomy.getTermsFromDefaultSC(termSetName).then(\r\n            // Success\r\n            function (terms) {\r\n                // Resolve the object\r\n                resolve(exports.Taxonomy.toObject(terms));\r\n            }, \r\n            // Error\r\n            function (reason) {\r\n                // Reject the promise\r\n                reject(reason);\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get a terms from a specified group\r\n     */\r\n    getTermsByGroupName: function (termSetName, groupName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the term group\r\n            exports.Taxonomy.getTermGroup(groupName).then(function (_a) {\r\n                var context = _a.context, termGroup = _a.termGroup;\r\n                // Get the term set terms\r\n                var termSet = termGroup.get_termSets().getByName(termSetName);\r\n                var terms = termSet.getAllTerms();\r\n                context.load(termSet);\r\n                context.load(terms, \"Include(CustomProperties, Description, Id, Name, PathOfTerm)\");\r\n                // Execute the request\r\n                context.executeQueryAsync(function () {\r\n                    // Resolve the promise\r\n                    resolve(exports.Taxonomy.getTerms(termSet, terms));\r\n                }, function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Reject the promise\r\n                    reject(args[1].get_message());\r\n                });\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to get the term set from the default site collection\r\n     */\r\n    getTermSetByGroupName: function (termSetName, groupName) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the terms\r\n            exports.Taxonomy.getTermsByGroupName(termSetName, groupName).then(\r\n            // Success\r\n            function (terms) {\r\n                // Resolve the object\r\n                resolve(exports.Taxonomy.toObject(terms));\r\n            }, \r\n            // Error\r\n            function (reason) {\r\n                // Reject the promise\r\n                reject(reason);\r\n            });\r\n        });\r\n    },\r\n    /**\r\n     * Method to ensure the taxonomy script references are loaded.\r\n     */\r\n    loadScripts: function () {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Ensure the core script is loaded\r\n            SP.SOD.executeFunc(\"sp.js\", \"SP.Utilities.Utility\", function () {\r\n                // Ensure the taxonomy script is loaded\r\n                SP.SOD.registerSod(\"sp.taxonomy.js\", SP.Utilities.Utility.getLayoutsPageUrl(\"sp.taxonomy.js\"));\r\n                SP.SOD.executeFunc(\"sp.taxonomy.js\", \"SP.Taxonomy.TaxonomySession\", function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            }, \"sp.js\");\r\n        });\r\n    },\r\n    /**\r\n     * Method to convert a term to an array of term information\r\n     */\r\n    toArray: function (term) {\r\n        var terms = [];\r\n        // Recursive method to extract the child terms\r\n        var getChildTerms = function (term, terms) {\r\n            // Parse the properties\r\n            for (var prop in term) {\r\n                // Skip the info and parent properties\r\n                if (prop == \"info\" || prop == \"parent\") {\r\n                    continue;\r\n                }\r\n                // Add the child term\r\n                var childTerm = term[prop];\r\n                terms.push(childTerm.info);\r\n                // Add the child terms\r\n                getChildTerms(childTerm, terms);\r\n            }\r\n        };\r\n        // Ensure the term exists\r\n        if (term) {\r\n            // See if the root node contains term information\r\n            if (term.info) {\r\n                // Add the root term\r\n                terms.push(term.info);\r\n            }\r\n            // Get the child terms\r\n            getChildTerms(term, terms);\r\n        }\r\n        // Return the child terms\r\n        return terms;\r\n    },\r\n    /**\r\n     * Method to convert a term to a field value\r\n     */\r\n    toFieldValue: function (term) {\r\n        var termInfo = term ? term[\"info\"] || term : null;\r\n        // Ensure the term exists\r\n        if (termInfo) {\r\n            return {\r\n                __metadata: { \"type\": \"SP.Taxonomy.TaxonomyFieldValue\" },\r\n                Label: termInfo.name,\r\n                TermGuid: termInfo.id,\r\n                WssId: -1\r\n            };\r\n        }\r\n        // Return nothing\r\n        return null;\r\n    },\r\n    /**\r\n     * Method to convert a collection of terms to a field value\r\n     */\r\n    toFieldMultiValue: function (terms) {\r\n        var results = [];\r\n        // Ensure terms exist\r\n        if (terms && terms.length > 0) {\r\n            // Parse the terms\r\n            for (var i = 0; i < terms.length; i++) {\r\n                var termInfo = terms[i][\"info\"] || terms[i];\r\n                // Add the term\r\n                results.push(\";#\" + termInfo.name + \"|\" + termInfo.id);\r\n            }\r\n        }\r\n        // Return a blank array\r\n        return {\r\n            __metadata: { type: \"Collection(SP.Taxonomy.TaxonomyFieldValue)\" },\r\n            results: results\r\n        };\r\n    },\r\n    /**\r\n     * Method to convert the terms to an object\r\n     */\r\n    toObject: function (terms) {\r\n        var root = {};\r\n        // Recursive method to add terms\r\n        var addTerm = function (node, info, path) {\r\n            var term = node;\r\n            var termName = \"\";\r\n            // Loop for each term\r\n            while (path.length > 0) {\r\n                // Ensure the term exists\r\n                termName = path[0];\r\n                if (term[termName] == null) {\r\n                    // Create the term\r\n                    term[termName] = {};\r\n                }\r\n                // Set the term\r\n                var parent_1 = term;\r\n                term = term[termName];\r\n                // Set the parent\r\n                term.parent = parent_1;\r\n                // Remove the term from the path\r\n                path.splice(0, 1);\r\n            }\r\n            // Set the info\r\n            term.info = info;\r\n        };\r\n        // Ensure the terms exist\r\n        if (terms && terms.length > 0) {\r\n            // Parse the terms\r\n            for (var i = 0; i < terms.length; i++) {\r\n                var term = terms[i];\r\n                // See if this is the root term\r\n                if (term.pathAsString == \"\") {\r\n                    // Set the root information\r\n                    root.info = term;\r\n                }\r\n                else {\r\n                    // Add the term\r\n                    addTerm(root, term, term.pathAsString.split(\";\"));\r\n                }\r\n            }\r\n            // Return the root term\r\n            return exports.Taxonomy.findById(root, terms[0].id);\r\n        }\r\n        // Return nothing\r\n        return null;\r\n    }\r\n};\r\n//# sourceMappingURL=taxonomy.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/taxonomy.js\n// module id = 865\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\n/**\r\n * App Helper Methods\r\n * Helper methods designed to be run from the app web.\r\n */\r\nexports.App = {\r\n    // Method to copy a file in this app web to the host web\r\n    copyFileToHostWeb: function (fileUrl, dstFolder, overwriteFl, rootWebFl) {\r\n        var srcFile = null;\r\n        var origVal = lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl;\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Ensure the current web is an app web\r\n            if (!lib_1.ContextInfo.isAppWeb) {\r\n                // Error\r\n                console.error(\"[gd-sprest] The current web is not an app web.\");\r\n                reject();\r\n                return;\r\n            }\r\n            // Get the host web\r\n            lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl = true;\r\n            var web = (new lib_1.Web(rootWebFl ? lib_1.ContextInfo.siteServerRelativeUrl : null));\r\n            // See if the folder url was given\r\n            if (typeof (dstFolder) === \"string\") {\r\n                // Get the folder\r\n                exports.App.getFolder(web, dstFolder, true)\r\n                    .then(function (folder) {\r\n                    // Copy the file to the host web\r\n                    exports.App.copyFileToHostWeb(fileUrl, folder, overwriteFl)\r\n                        .then(function (_a) {\r\n                        var file = _a.file, folder = _a.folder;\r\n                        resolve({ file: file, folder: folder });\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                // Get the file name\r\n                var fileName = fileUrl.split(\"/\");\r\n                fileName = fileName[fileName.length - 1];\r\n                // Set the file urls\r\n                var dstFileUrl = lib_1.ContextInfo.window.SP.Utilities.UrlBuilder.urlCombine(dstFolder.ServerRelativeUrl, fileName);\r\n                var srcFileUrl_1 = lib_1.ContextInfo.window.SP.Utilities.UrlBuilder.urlCombine(lib_1.ContextInfo.webServerRelativeUrl, fileUrl.substr(fileUrl[0] == \"/\" ? 1 : 0));\r\n                // Get the destination file\r\n                web.getFileByServerRelativeUrl(dstFileUrl)\r\n                    .execute(function (file) {\r\n                    // Return a promise\r\n                    return new Promise(function (resolve, reject) {\r\n                        // See if the file exists\r\n                        if (file.Exists) {\r\n                            // Check out the file, and resolve the promise\r\n                            file.checkout().execute(resolve);\r\n                        }\r\n                        else {\r\n                            // Resolve the promise\r\n                            resolve();\r\n                        }\r\n                    });\r\n                });\r\n                // Target the current web\r\n                lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl = false;\r\n                // Get the current web\r\n                (new lib_1.Web())\r\n                    .getFileByServerRelativeUrl(srcFileUrl_1)\r\n                    .content()\r\n                    .execute(function (content) {\r\n                    // Return a promise\r\n                    return new Promise(function (resolve, reject) {\r\n                        // Get the file name\r\n                        var fileName = srcFileUrl_1.split(\"/\");\r\n                        fileName = fileName[fileName.length - 1];\r\n                        // Target the host web\r\n                        lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl = true;\r\n                        // Add the file to the folder\r\n                        (dstFolder).Files().add(true, fileName, content)\r\n                            .execute(function (file) {\r\n                            // Save a reference to this file\r\n                            srcFile = file;\r\n                            // Check in the file\r\n                            file.checkin(\"\", 1).execute();\r\n                            // Publish the file\r\n                            file.publish(\"\").execute(true);\r\n                            // Wait for the requests to complete\r\n                            file.done(function () {\r\n                                // Resolve the promise\r\n                                resolve();\r\n                            });\r\n                        });\r\n                    });\r\n                }, true);\r\n                // Wait for the requests to complete, and resolve the promise\r\n                web.done(function () { resolve({ file: srcFile, folder: dstFolder }); });\r\n            }\r\n        });\r\n    },\r\n    // Method to copy a file in this app web to the host web\r\n    copyFilesToHostWeb: function (fileUrls, folderUrls, overwriteFl, rootWebFl) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var request = function (files, folders, idx) {\r\n                // Ensure the array is not empty\r\n                if (fileUrls.length == idx || folderUrls.length == idx) {\r\n                    // Resolve the promise and return it\r\n                    resolve({ files: files, folders: folders });\r\n                    return;\r\n                }\r\n                // Copy the file\r\n                exports.App.copyFileToHostWeb(fileUrls[idx], folderUrls[idx], overwriteFl, rootWebFl)\r\n                    .then(function (_a) {\r\n                    var file = _a.file, folder = _a.folder;\r\n                    // Save a reference to the file and folder\r\n                    files.push(file);\r\n                    folders.push(folder);\r\n                    // Copy the files\r\n                    request(files, folders, ++idx);\r\n                });\r\n            };\r\n            // Execute the request\r\n            request([], [], 0);\r\n        });\r\n    },\r\n    // Method to create sub-folders\r\n    createSubFolders: function (folder, subFolderUrl) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var request = function (resolve) {\r\n                // Get the sub-folder name\r\n                var subFolderName = subFolderUrl.split(\"/\")[0];\r\n                // Update the sub folder url\r\n                subFolderUrl = subFolderUrl.substr(subFolderName.length + 1);\r\n                // Get the sub-folder\r\n                var subFolder = folder.Folders(subFolderName).execute(function (subFolder) {\r\n                    // Method to add additional sub folders\r\n                    var addSubFolders = function (subFolder) {\r\n                        // See if we are done\r\n                        if (subFolderUrl.length == 0) {\r\n                            // Resolve the promise\r\n                            resolve(subFolder);\r\n                        }\r\n                        else {\r\n                            // Create the sub folder\r\n                            request(resolve);\r\n                        }\r\n                    };\r\n                    // Ensure the sub-folder exists\r\n                    if (subFolder.Exists) {\r\n                        // Add the rest of the sub folders\r\n                        addSubFolders(subFolder);\r\n                    }\r\n                    else {\r\n                        // Create the sub folder\r\n                        folder.Folders().add(subFolderName).execute(addSubFolders);\r\n                    }\r\n                });\r\n            };\r\n            // Execute the request\r\n            request(resolve);\r\n        });\r\n    },\r\n    // Method to get a folder\r\n    getFolder: function (web, folderUrl, createFl) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var dstFolder = null;\r\n            // Ensure the web exists\r\n            if (!web.existsFl) {\r\n                // Get the web\r\n                web.execute();\r\n            }\r\n            // Wait for the requests to complete\r\n            web.done(function () {\r\n                // Set the destination folder url\r\n                var dstFolderUrl = lib_1.ContextInfo.window.SP.Utilities.UrlBuilder.urlCombine(web.ServerRelativeUrl, folderUrl.substr(folderUrl[0] == \"/\" ? 1 : 0));\r\n                // Get the folder\r\n                web.getFolderByServerRelativeUrl(folderUrl)\r\n                    .execute(function (folder) {\r\n                    // Return a promise\r\n                    return new Promise(function (resolve, reject) {\r\n                        // Ensure the folder exists\r\n                        if (folder.Exists) {\r\n                            // Save a reference to the folder\r\n                            dstFolder = folder;\r\n                            // Resolve the promise\r\n                            resolve();\r\n                        }\r\n                        else {\r\n                            // Create the folder\r\n                            exports.App.createSubFolders(web.RootFolder(), folderUrl).then(function (folder) {\r\n                                // Save a reference to the folder\r\n                                dstFolder = folder;\r\n                                // Resolve the promise\r\n                                resolve();\r\n                            });\r\n                        }\r\n                    });\r\n                }, true);\r\n                // Wait for the request to complete\r\n                web.done(function () {\r\n                    // Resolve the promise\r\n                    resolve(dstFolder);\r\n                });\r\n            });\r\n        });\r\n    },\r\n    // Method to remove empty folders\r\n    removeEmptyFolders: function (web, folderUrls) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Ensure folder urls exist\r\n            if (folderUrls.length == 0) {\r\n                // Resolve the promise and return it\r\n                resolve();\r\n            }\r\n            else {\r\n                var prevFolderUrl = null;\r\n                // Sort the urls alphabetically, then from longest to shortest\r\n                folderUrls.sort().sort(function (a, b) { return a.length > b.length ? -1 : 1; });\r\n                // Parse the folders\r\n                for (var _i = 0, folderUrls_1 = folderUrls; _i < folderUrls_1.length; _i++) {\r\n                    var folderUrl = folderUrls_1[_i];\r\n                    var folder = null;\r\n                    // See if we already removed this folder\r\n                    if (folderUrl == prevFolderUrl) {\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        prevFolderUrl = folderUrl;\r\n                    }\r\n                    // Parse the folder names\r\n                    var folderNames = folderUrl.split('/');\r\n                    for (var _a = 0, folderNames_1 = folderNames; _a < folderNames_1.length; _a++) {\r\n                        var folderName = folderNames_1[_a];\r\n                        // Get the sub-folder\r\n                        folder = folder ? folder.Folders(folderName) : web.Folders(folderName);\r\n                    }\r\n                    // Execute the request\r\n                    folder.execute(function (folder) {\r\n                        // Return a promise\r\n                        return new Promise(function (resolve, reject) {\r\n                            // See if the folder is empty\r\n                            if (folder.ItemCount == 0) {\r\n                                // Delete the folder, and resolve the promise\r\n                                folder.delete().execute(resolve);\r\n                            }\r\n                            else {\r\n                                // Resolve the promise\r\n                                resolve();\r\n                            }\r\n                        });\r\n                    }, true);\r\n                }\r\n                // Wait for the requests to complete, and resolve the promise\r\n                web.done(function () { resolve(); });\r\n            }\r\n        });\r\n    },\r\n    // Method to remove a file\r\n    removeFile: function (web, fileUrl) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var folder = null;\r\n            var folders = fileUrl.split('/');\r\n            // Parse the folders\r\n            for (var i = 0; i < folders.length - 1; i++) {\r\n                // Get the folder\r\n                folder = folder ? folder.Folders(folders[i]) : web.Folders(folders[i]);\r\n            }\r\n            // Get the file\r\n            folder.Files(folders[folders.length - 1]).execute(function (file) {\r\n                // See if it exists\r\n                if (file.Exists) {\r\n                    // Delete it and resolve the promise\r\n                    file.delete().execute(resolve);\r\n                }\r\n                else {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                }\r\n            }, true);\r\n        });\r\n    },\r\n    // Method to remove files\r\n    removeFiles: function (web, fileUrls, idx) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var request = function (idx, resolve) {\r\n                // See if we have removed all files\r\n                if (fileUrls.length == idx) {\r\n                    // Resolve the promise and return it\r\n                    resolve();\r\n                }\r\n                else {\r\n                    // Remove the file\r\n                    exports.App.removeFile(web, fileUrls[idx]).then(function () {\r\n                        // Remove the files\r\n                        request(++idx, resolve);\r\n                    });\r\n                }\r\n            };\r\n            // Execute the request\r\n            request(0, resolve);\r\n        });\r\n    }\r\n};\r\n//# sourceMappingURL=app.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/app.js\n// module id = 866\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Context Information\r\n */\r\nvar _ContextInfo = /** @class */ (function () {\r\n    function _ContextInfo() {\r\n    }\r\n    Object.defineProperty(_ContextInfo, \"_contextInfo\", {\r\n        // The current context information\r\n        get: function () {\r\n            return this.window[\"_spPageContextInfo\"] ||\r\n                {\r\n                    existsFl: false,\r\n                    isAppWeb: false,\r\n                    isHubSite: false,\r\n                    isSPO: false,\r\n                    siteAbsoluteUrl: \"\",\r\n                    siteServerRelativeUrl: \"\",\r\n                    userId: 0,\r\n                    webAbsoluteUrl: \"\",\r\n                    webServerRelativeUrl: \"\"\r\n                };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ;\r\n    Object.defineProperty(_ContextInfo, \"aadInstanceUrl\", {\r\n        /**\r\n         * Properties\r\n         */\r\n        get: function () { return this._contextInfo.aadInstanceUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"aadTenantId\", {\r\n        get: function () { return this._contextInfo.aadTenantId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"alertsEnabled\", {\r\n        get: function () { return this._contextInfo.alertsEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"allowSilverlightPrompt\", {\r\n        get: function () { return this._contextInfo.allowSilverlightPrompt == \"True\" ? true : false; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"canUserCreateMicrosoftForm\", {\r\n        get: function () { return this._contextInfo.canUserCreateMicrosoftForm; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"canUserCreateVisioDrawing\", {\r\n        get: function () { return this._contextInfo.canUserCreateVisioDrawing; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"cdnPrefix\", {\r\n        get: function () { return this._contextInfo.cdnPrefix; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"clientServerTimeDelta\", {\r\n        get: function () { return this._contextInfo.clientServerTimeDelta; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"CorrelationId\", {\r\n        get: function () { return this._contextInfo.CorrelationId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"crossDomainPhotosEnabled\", {\r\n        get: function () { return this._contextInfo.crossDomainPhotosEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"currentCultureName\", {\r\n        get: function () { return this._contextInfo.currentCultureName; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"currentLanguage\", {\r\n        get: function () { return this._contextInfo.currentLanguage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"currentUICultureName\", {\r\n        get: function () { return this._contextInfo.currentUICultureName; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"departmentId\", {\r\n        get: function () { return this._contextInfo.departmentId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"DesignPackageId\", {\r\n        get: function () { return this._contextInfo.DesignPackageId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"disableAppViews\", {\r\n        get: function () { return this._contextInfo.disableAppViews; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"disableFlows\", {\r\n        get: function () { return this._contextInfo.disableFlows; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"document\", {\r\n        get: function () { return this.window.document; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"env\", {\r\n        get: function () { return this._contextInfo.env; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"existsFl\", {\r\n        get: function () { return this._contextInfo.existsFl == null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"farmLabel\", {\r\n        get: function () { return this._contextInfo.farmLabel; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"fid\", {\r\n        get: function () { return this._contextInfo.fid; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"formDigestTimeoutSeconds\", {\r\n        get: function () { return this._contextInfo.formDigestTimeoutSeconds; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"formDigestValue\", {\r\n        get: function () { return this._contextInfo.formDigestValue; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"groupColor\", {\r\n        get: function () { return this._contextInfo.groupColor; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"groupHasHomepage\", {\r\n        get: function () { return this._contextInfo.groupHasHomepage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"groupId\", {\r\n        get: function () { return this._contextInfo.groupId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"groupType\", {\r\n        get: function () { return this._contextInfo.groupType; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"guestsEnabled\", {\r\n        get: function () { return this._contextInfo.guestsEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"hasManageWebPermissions\", {\r\n        get: function () { return this._contextInfo.hasManageWebPermissions; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"hasPendingWebTemplateExtension\", {\r\n        get: function () { return this._contextInfo.hasPendingWebTemplateExtension; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"hideSyncButtonOnODB\", {\r\n        get: function () { return this._contextInfo.hideSyncButtonOnODB; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"hubSiteId\", {\r\n        get: function () { return this._contextInfo.hubSiteId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"idleSessionSignOutEnabled\", {\r\n        get: function () { return this._contextInfo.idleSessionSignOutEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isAnonymousGuestUser\", {\r\n        get: function () { return this._contextInfo.isAnonymousGuestUser; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isAppWeb\", {\r\n        get: function () { return this._contextInfo.isAppWeb; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isEmailAuthenticatinoGuesUser\", {\r\n        get: function () { return this._contextInfo.isEmailAuthenticatinoGuesUser; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isExternalGuestUser\", {\r\n        get: function () { return this._contextInfo.isExternalGuestUser; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isHubSite\", {\r\n        get: function () { return this._contextInfo.isHubSite; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isMultiGeoTenant\", {\r\n        get: function () { return this._contextInfo.isMultiGeoTenant; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isNoScriptEnabled\", {\r\n        get: function () { return this._contextInfo.isNoScriptEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isSiteAdmin\", {\r\n        get: function () { return this._contextInfo.isSiteAdmin; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isSPO\", {\r\n        get: function () { return this._contextInfo.isSPO; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isTenantDevSite\", {\r\n        get: function () { return this._contextInfo.isTenantDevSite; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"isWebWelcomePage\", {\r\n        get: function () { return this._contextInfo.isWebWelcomePage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"layoutsUrl\", {\r\n        get: function () { return this._contextInfo.layoutsUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listBaseTemplate\", {\r\n        get: function () { return this._contextInfo.listBaseTemplate; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listId\", {\r\n        get: function () { return this._contextInfo.listId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listTitle\", {\r\n        get: function () { return this._contextInfo.listTitle; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listPermMask\", {\r\n        get: function () { return this._contextInfo.listPermMask; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"listUrl\", {\r\n        get: function () { return this._contextInfo.listUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"maximumFileSize\", {\r\n        get: function () { return this._contextInfo.maximumFileSize; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"nid\", {\r\n        get: function () { return this._contextInfo.nid; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"openInClient\", {\r\n        get: function () { return this._contextInfo.openInClient; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"pageItemId\", {\r\n        get: function () { return this._contextInfo.pageItemId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"pageListId\", {\r\n        get: function () { return this._contextInfo.pageListId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"pagePermMask\", {\r\n        get: function () { return this._contextInfo.pagePermMask; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"pagePersonalizationScope\", {\r\n        get: function () { return this._contextInfo.pagePersonalizationScope; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"preferUserTimeZone\", {\r\n        get: function () { return this._contextInfo.preferUserTimeZone; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"PreviewFeaturesEnabled\", {\r\n        get: function () { return this._contextInfo.PreviewFeaturesEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"profileUrl\", {\r\n        get: function () { return this._contextInfo.profileUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"PublishingFeatureOn\", {\r\n        get: function () { return this._contextInfo.PublishingFeatureOn; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"RecycleBinItemCount\", {\r\n        get: function () { return this._contextInfo.RecycleBinItemCount; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"serverRedirectedUrl\", {\r\n        get: function () { return this._contextInfo.serverRedirectedUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"serverRequestPath\", {\r\n        get: function () { return this._contextInfo.serverRequestPath; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"serverTime\", {\r\n        get: function () { return this._contextInfo.serverTime; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"showNGSCDialogForSyncOnODB\", {\r\n        get: function () { return this._contextInfo.showNGSCDialogForSyncOnODB; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"showNGSCDialogForSyncOnTS\", {\r\n        get: function () { return this._contextInfo.showNGSCDialogForSyncOnTS; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteAbsoluteUrl\", {\r\n        get: function () { return this._contextInfo.siteAbsoluteUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteClassification\", {\r\n        get: function () { return this._contextInfo.siteClassification; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteClientTag\", {\r\n        get: function () { return this._contextInfo.siteClientTag; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteColor\", {\r\n        get: function () { return this._contextInfo.siteColor; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteId\", {\r\n        get: function () { return this._contextInfo.siteId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"sitePagesEnabled\", {\r\n        get: function () { return this._contextInfo.sitePagesEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteServerRelativeUrl\", {\r\n        get: function () { return this._contextInfo.siteServerRelativeUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"siteSubscriptionId\", {\r\n        get: function () { return this._contextInfo.siteSubscriptionId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"supportPercentStorePage\", {\r\n        get: function () { return this._contextInfo.supportPercentStorePage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"supportPoundStorePath\", {\r\n        get: function () { return this._contextInfo.supportPoundStorePath; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"systemUserKey\", {\r\n        get: function () { return this._contextInfo.systemUserKey; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"tenantAppVersion\", {\r\n        get: function () { return this._contextInfo.tenantAppVersion; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"themeCacheToken\", {\r\n        get: function () { return this._contextInfo.themeCacheToken; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"themeCssFolderUrl\", {\r\n        get: function () { return this._contextInfo.themeCssFolderUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"themeImageFileNames\", {\r\n        get: function () { return this._contextInfo.themeImageFileNames; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"updateFromDigestPageLoaded\", {\r\n        get: function () { return this._contextInfo.updateFromDigestPageLoaded; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userDisplayName\", {\r\n        get: function () { return this._contextInfo.userDisplayName; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userEmail\", {\r\n        get: function () { return this._contextInfo.userEmail; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userFirstDayOfWeek\", {\r\n        get: function () { return this._contextInfo.userFirstDayOfWeek; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userId\", {\r\n        get: function () { return this._contextInfo.userId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userLoginName\", {\r\n        get: function () { return this._contextInfo.userLoginName; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userTime24\", {\r\n        get: function () { return this._contextInfo.userTime24; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"userTimeZoneData\", {\r\n        get: function () { return this._contextInfo.userTimeZoneData; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"viewId\", {\r\n        get: function () { return this._contextInfo.viewId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"viewOnlyExperienceEnabled\", {\r\n        get: function () { return this._contextInfo.viewOnlyExperienceEnabled; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webAbsoluteUrl\", {\r\n        get: function () { return this._contextInfo.webAbsoluteUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webDescription\", {\r\n        get: function () { return this._contextInfo.webDescription; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webFirstDayOfWeek\", {\r\n        get: function () { return this._contextInfo.webFirstDayOfWeek; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webId\", {\r\n        get: function () { return this._contextInfo.webId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webLanguage\", {\r\n        get: function () { return this._contextInfo.webLanguage; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webLogoUrl\", {\r\n        get: function () { return this._contextInfo.webLogoUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webPermMask\", {\r\n        get: function () { return this._contextInfo.webPermMask; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webServerRelativeUrl\", {\r\n        get: function () { return this._contextInfo.webServerRelativeUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webTemplate\", {\r\n        get: function () { return this._contextInfo.webTemplate; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webTime24\", {\r\n        get: function () { return this._contextInfo.webTime24; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webTitle\", {\r\n        get: function () { return this._contextInfo.webTitle; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"webUIVersion\", {\r\n        get: function () { return this._contextInfo.webUIVersion; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_ContextInfo, \"window\", {\r\n        get: function () { return typeof (window) == \"undefined\" ? {} : window; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to generate a guid\r\n    _ContextInfo.generateGUID = function () {\r\n        // Set the batch id\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    // Method to get the context information for a web\r\n    _ContextInfo.getWeb = function (url) {\r\n        // Create a new base object\r\n        return new utils_1.Base({\r\n            endpoint: \"contextinfo\",\r\n            method: \"POST\",\r\n            url: url\r\n        });\r\n    };\r\n    return _ContextInfo;\r\n}());\r\nexports.ContextInfo = _ContextInfo;\r\n//# sourceMappingURL=contextInfo.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/contextInfo.js\n// module id = 867\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Request Type\r\n */\r\nexports.RequestType = {\r\n    // Requests\r\n    Custom: 0,\r\n    Delete: 1,\r\n    Merge: 2,\r\n    OData: 3,\r\n    // Get Requests\r\n    Get: 10,\r\n    GetBuffer: 11,\r\n    GetWithArgs: 12,\r\n    GetWithArgsInBody: 13,\r\n    GetWithArgsInQS: 14,\r\n    GetWithArgsValueOnly: 15,\r\n    GetReplace: 16,\r\n    // Post Requests\r\n    Post: 20,\r\n    PostWithArgs: 21,\r\n    PostWithArgsInBody: 22,\r\n    PostWithArgsInQS: 23,\r\n    PostWithArgsValueOnly: 24,\r\n    PostReplace: 25\r\n};\r\n//# sourceMappingURL=requestType.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/requestType.js\n// module id = 868\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\nvar mapper_1 = require(\"../mapper\");\r\nvar _1 = require(\".\");\r\n/**\r\n * Request Helper\r\n */\r\nvar BaseHelper = /** @class */ (function () {\r\n    function BaseHelper() {\r\n    }\r\n    // Method to add the methods to base object\r\n    BaseHelper.prototype.addMethods = function (base, data) {\r\n        var isCollection = data.results && data.results.length > 0;\r\n        // Determine the metadata\r\n        var metadata = isCollection ? data.results[0].__metadata : data.__metadata;\r\n        // Determine the object type\r\n        var objType = metadata && metadata.type ? metadata.type : base.targetInfo.endpoint;\r\n        objType = objType.split('/');\r\n        objType = (objType[objType.length - 1]);\r\n        objType = objType.split('.');\r\n        objType = (objType[objType.length - 1]).toLowerCase();\r\n        objType += isCollection ? \"s\" : \"\";\r\n        // See if the base is a field\r\n        if ((/^field/.test(objType) || /fields?$/.test(objType)) && objType != \"fieldlinks\" && objType != \"fields\") {\r\n            // Update the type\r\n            objType = \"field\" + (isCollection ? \"s\" : \"\");\r\n        }\r\n        else if (/item$/.test(objType)) {\r\n            // Update the type\r\n            objType = \"listitem\";\r\n        }\r\n        else if (/items$/.test(objType)) {\r\n            // Update the type\r\n            objType = \"items\";\r\n        }\r\n        else if (/corporatecatalogappmetadata/.test(objType)) {\r\n            // Update the type\r\n            objType = \"tenantapp\";\r\n        }\r\n        else if (/corporatecatalogappmetadatas/.test(objType)) {\r\n            // Update the type\r\n            objType = \"tenantapps\";\r\n        }\r\n        // Get the methods for the base object\r\n        var methods = mapper_1.Mapper[objType];\r\n        if (methods) {\r\n            // Parse the methods\r\n            for (var methodName in methods) {\r\n                // Get the method information\r\n                var methodInfo = methods[methodName] ? methods[methodName] : {};\r\n                // See if the base is the \"Properties\" definition for the object\r\n                if (methodName == \"properties\") {\r\n                    // Parse the properties\r\n                    for (var _i = 0, methodInfo_1 = methodInfo; _i < methodInfo_1.length; _i++) {\r\n                        var property = methodInfo_1[_i];\r\n                        var propInfo = property.split(\"|\");\r\n                        // Get the metadata type\r\n                        var propName = propInfo[0];\r\n                        var propType = propInfo.length > 1 ? propInfo[1] : null;\r\n                        var subPropName = propInfo.length > 2 ? propInfo[2] : null;\r\n                        var subPropType = propInfo.length > 3 ? propInfo[3] : null;\r\n                        // See if the property is null or is a collection\r\n                        if (base[propName] == null || (base[propName].__deferred && base[propName].__deferred.uri)) {\r\n                            // See if the base property has a sub-property defined for it\r\n                            if (propInfo.length == 4) {\r\n                                // Update the ' char in the property name\r\n                                subPropName = subPropName.replace(/'/g, \"\\\\'\");\r\n                                // Add the property\r\n                                base[propName] = new Function(\"name\", \"name = name ? '\" + propName + subPropName + \"'.replace(/\\\\[Name\\\\]/g, name) : null;\" +\r\n                                    \"return this.getProperty(name ? name : '\" + propName + \"', name ? '\" + subPropType + \"' : '\" + propType + \"');\");\r\n                            }\r\n                            else {\r\n                                // Add the property\r\n                                base[propName] = new Function(\"return this.getProperty('\" + propName + \"', '\" + propType + \"');\");\r\n                            }\r\n                        }\r\n                    }\r\n                    // Continue the loop\r\n                    continue;\r\n                }\r\n                // See if the base object has a dynamic metadata type\r\n                if (typeof (methodInfo.metadataType) === \"function\") {\r\n                    // Clone the object properties\r\n                    methodInfo = JSON.parse(JSON.stringify(methodInfo));\r\n                    // Set the metadata type\r\n                    methodInfo.metadataType = methods[methodName].metadataType(base);\r\n                }\r\n                // Add the method to the object\r\n                base[methodName] = new Function(\"return this.executeMethod('\" + methodName + \"', \" + JSON.stringify(methodInfo) + \", arguments);\");\r\n            }\r\n        }\r\n    };\r\n    // Method to add properties to the base object\r\n    BaseHelper.prototype.addProperties = function (base, data) {\r\n        // Parse the data properties\r\n        for (var key in data) {\r\n            var value = data[key];\r\n            // Skip properties\r\n            if (key == \"__metadata\" || key == \"results\") {\r\n                continue;\r\n            }\r\n            // See if the base is a collection property\r\n            if (value && value.__deferred && value.__deferred.uri) {\r\n                // Generate a method for the base property\r\n                base[\"get_\" + key] = base[\"get_\" + key] ? base[\"get_\" + key] : new Function(\"return this.getCollection('\" + key + \"', arguments);\");\r\n            }\r\n            else {\r\n                // Set the property, based on the property name\r\n                switch (key) {\r\n                    case \"ClientPeoplePickerResolveUser\":\r\n                    case \"ClientPeoplePickerSearchUser\":\r\n                        base[key] = JSON.parse(value);\r\n                        break;\r\n                    default:\r\n                        // Append the property to the base object\r\n                        base[key] = value;\r\n                        break;\r\n                }\r\n                // See if the base is a collection\r\n                if (base[key] && base[key].results) {\r\n                    // Ensure the collection is an object\r\n                    if (base[key].results.length == 0 || typeof (base[key].results[0]) === \"object\") {\r\n                        // Create the base property as a new request\r\n                        var objCollection = new _1.Base(base.targetInfo);\r\n                        objCollection[\"results\"] = base[key].results;\r\n                        // See no results exist\r\n                        if (objCollection[\"results\"].length == 0) {\r\n                            // Set the metadata type to the key\r\n                            objCollection[\"__metadata\"] = { type: key };\r\n                        }\r\n                        // Update the endpoint for the base request to point to the base property\r\n                        objCollection.targetInfo.endpoint = (objCollection.targetInfo.endpoint.split(\"?\")[0] + \"/\" + key).replace(/\\//g, \"/\");\r\n                        // Add the methods\r\n                        base.addMethods(objCollection, objCollection);\r\n                        // Update the data collection\r\n                        base.updateDataCollection(base, objCollection[\"results\"]);\r\n                        // Update the property\r\n                        base[key] = objCollection;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // Method to update a collection object\r\n    BaseHelper.prototype.updateDataCollection = function (obj, results) {\r\n        // Ensure the base is a collection\r\n        if (results) {\r\n            // Save the results\r\n            obj[\"results\"] = obj[\"results\"] ? obj[\"results\"].concat(results) : results;\r\n            // See if only one object exists\r\n            if (obj[\"results\"].length > 0) {\r\n                var results_1 = obj[\"results\"];\r\n                // Parse the results\r\n                for (var _i = 0, results_2 = results_1; _i < results_2.length; _i++) {\r\n                    var result = results_2[_i];\r\n                    // Add the base references\r\n                    result[\"addMethods\"] = obj.addMethods;\r\n                    result[\"base\"] = obj.base;\r\n                    result[\"done\"] = obj.done;\r\n                    result[\"execute\"] = obj.execute;\r\n                    result[\"executeAndWait\"] = obj.executeAndWait;\r\n                    result[\"executeMethod\"] = obj.executeMethod;\r\n                    result[\"existsFl\"] = true;\r\n                    result[\"getProperty\"] = obj.getProperty;\r\n                    result[\"parent\"] = obj;\r\n                    result[\"targetInfo\"] = obj.targetInfo;\r\n                    result[\"updateMetadataUri\"] = obj.updateMetadataUri;\r\n                    result[\"waitForRequestsToComplete\"] = obj.waitForRequestsToComplete;\r\n                    // Update the metadata\r\n                    this.updateMetadata(obj, result);\r\n                    // Add the methods\r\n                    this.addMethods(result, result);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // Method to convert the input arguments into an object\r\n    BaseHelper.prototype.updateDataObject = function (isBatchRequest) {\r\n        // Ensure the request was successful\r\n        if (this.status >= 200 && this.status < 300) {\r\n            // Return if we are expecting a buffer\r\n            if (this.requestType == _1.RequestType.GetBuffer) {\r\n                return;\r\n            }\r\n            // Parse the responses\r\n            var batchIdx = 0;\r\n            var batchRequestIdx = 0;\r\n            var responses = isBatchRequest ? this.response.split(\"\\n\") : [this.response];\r\n            for (var i = 0; i < responses.length; i++) {\r\n                var data = null;\r\n                // Try to convert the response\r\n                var response = responses[i];\r\n                response = response === \"\" && !isBatchRequest ? \"{}\" : response;\r\n                try {\r\n                    data = isBatchRequest && response.indexOf(\"<?xml\") == 0 ? response : JSON.parse(response);\r\n                }\r\n                catch (ex) {\r\n                    continue;\r\n                }\r\n                // Set the object based on the request type\r\n                var obj = isBatchRequest ? Object.create(this) : this;\r\n                // Set the exists flag\r\n                obj[\"existsFl\"] = typeof (obj[\"Exists\"]) === \"boolean\" ? obj[\"Exists\"] : data.error == null;\r\n                // See if the data properties exists\r\n                if (data.d) {\r\n                    // Save a reference to it\r\n                    obj[\"d\"] = data.d;\r\n                    // Update the metadata\r\n                    this.updateMetadata(obj, data.d);\r\n                    // Update the base object's properties\r\n                    this.addProperties(obj, data.d);\r\n                    // Add the methods\r\n                    this.addMethods(obj, data.d);\r\n                    // Update the data collection\r\n                    this.updateDataCollection(obj, data.d.results);\r\n                }\r\n                // See if the batch request exists\r\n                if (isBatchRequest) {\r\n                    // Get the batch request\r\n                    var batchRequest = this.base.batchRequests[batchIdx][batchRequestIdx++];\r\n                    if (batchRequest == null) {\r\n                        // Update the batch indexes\r\n                        batchIdx++;\r\n                        batchRequestIdx = 0;\r\n                        // Update the batch request\r\n                        batchRequest = this.base.batchRequests[batchIdx][batchRequestIdx++];\r\n                    }\r\n                    // Ensure the batch request exists\r\n                    if (batchRequest) {\r\n                        // Set the response object\r\n                        batchRequest.response = typeof (data) === \"string\" ? data : obj;\r\n                        // Execute the callback if it exists\r\n                        batchRequest.callback ? batchRequest.callback(batchRequest.response) : null;\r\n                    }\r\n                }\r\n            }\r\n            // Clear the batch requests\r\n            if (isBatchRequest) {\r\n                this.base.batchRequests = null;\r\n            }\r\n        }\r\n    };\r\n    // Method to update the metadata\r\n    BaseHelper.prototype.updateMetadata = function (base, data) {\r\n        // Ensure the base is the app web\r\n        if (!lib_1.ContextInfo.isAppWeb) {\r\n            return;\r\n        }\r\n        // Get the url information\r\n        var hostUrl = lib_1.ContextInfo.webAbsoluteUrl.toLowerCase();\r\n        var requestUrl = data && data.__metadata && data.__metadata.uri ? data.__metadata.uri.toLowerCase() : null;\r\n        var targetUrl = base.targetInfo && base.targetInfo.url ? base.targetInfo.url.toLowerCase() : null;\r\n        // Ensure the urls exist\r\n        if (hostUrl == null || requestUrl == null || targetUrl == null) {\r\n            return;\r\n        }\r\n        // See if we need to make an update\r\n        if (targetUrl.indexOf(hostUrl) == 0) {\r\n            return;\r\n        }\r\n        // Update the metadata uri\r\n        data.__metadata.uri = requestUrl.replace(hostUrl, targetUrl);\r\n    };\r\n    return BaseHelper;\r\n}());\r\nexports.BaseHelper = BaseHelper;\r\n//# sourceMappingURL=baseHelper.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/baseHelper.js\n// module id = 869\n// module chunks = 0","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./audit\"));\r\n__export(require(\"./eventReceiver\"));\r\n__export(require(\"./file\"));\r\n__export(require(\"./list\"));\r\n__export(require(\"./navigation\"));\r\n__export(require(\"./propertyValues\"));\r\n__export(require(\"./search\"));\r\n__export(require(\"./security\"));\r\n__export(require(\"./site\"));\r\n__export(require(\"./social\"));\r\n__export(require(\"./user\"));\r\n__export(require(\"./userCustomAction\"));\r\n//# sourceMappingURL=mapper.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/mapper.js\n// module id = 870\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Audit\r\n */\r\nexports.audit = {\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=audit.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/audit.js\n// module id = 871\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Event Receiver\r\n */\r\nexports.eventreceiver = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.EventReceiverDefinition\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Event Receivers\r\n */\r\nexports.eventreceivers = {\r\n    // Adds an event receiver to the collection.\r\n    add: {\r\n        metadataType: \"SP.EventReceiverDefinition\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets an event receiver by it's id.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"eventreceiver\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=eventReceiver.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/eventReceiver.js\n// module id = 872\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Attachment\r\n */\r\nexports.attachment = {};\r\n/**\r\n * Attachment Files\r\n */\r\nexports.attachmentfiles = {\r\n    /**\r\n     * Adds the attachment that is represented by the specified file name and byte array to the list item.\r\n     * @param name - The name of the file to add.\r\n     * @param contents - The file contents as an array buffer.\r\n    **/\r\n    add: {\r\n        argNames: [\"fileName\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * File\r\n */\r\nexports.file = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Author|user\", \"CheckedOutByUser|user\", \"EffectiveInformationRightsManagementSettings\", \"InformationRightsManagementSettings\",\r\n        \"ListItemAllFields\", \"LockedByUser|user\", \"ModifiedBy|user\", \"Properties|propertyvalues\", \"VersionEvents\", \"Versions|fileversions\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Approves the file submitted for content approval with the specified comment.\r\n    approve: {\r\n        argNames: [\"comment\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Stops the chunk upload session without saving the uploaded data. If the file doesn’t already exist in the library, the partially uploaded file will be deleted. Use this in response to user action (as in a request to cancel an upload) or an error or exception.\r\n    // Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n    // This method is currently available only on Office 365.\r\n    cancelupload: {\r\n        argNames: [\"uploadId\"],\r\n        name: \"cancelupload(guid'[[uploadId]]')\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Checks the file in to a document library based on the check-in type.\r\n    // Check-In Types: MinorCheckIn = 0; MajorCheckIn = 1; OverwriteCheckIn = 2\r\n    checkin: {\r\n        argNames: [\"comment\", \"checkInType\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Checks out the file from a document library based on the check-out type.\r\n    checkout: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Returns the file content.\r\n    content: {\r\n        name: \"$value\",\r\n        requestType: utils_1.RequestType.GetBuffer\r\n    },\r\n    // Continues the chunk upload session with an additional fragment. The current file content is not changed.\r\n    // Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n    // This method is currently available only on Office 365.\r\n    continueUpload: {\r\n        argNames: [\"uploadId\", \"fileOffset\"],\r\n        name: \"continueUpload(uploadId=guid'[[uploadId]]', fileOffset=[[fileOffset]])\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Copies the file to the destination URL.\r\n    copyTo: {\r\n        argNames: [\"strNewUrl\", \"bOverWrite\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Denies approval for a file that was submitted for content approval.\r\n    // Only documents in lists that are enabled for content approval can be denied.\r\n    deny: {\r\n        argNames: [\"comment\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\r\n    // Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n    // This method is currently available only on Office 365.\r\n    finishUpload: {\r\n        argNames: [\"uploadId\", \"fileOffset\"],\r\n        name: \"finishUpload(uploadId=guid'[[uploadId]]', fileOffset=[[fileOffset]])\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\r\n    // An exception is thrown if the file is not an ASPX page.\r\n    // Type of scopes: \r\n    getlimitedwebpartmanager: {\r\n        argNames: [\"scope\"],\r\n        name: \"getLimitedWebPartManager(scope=[[scope]])\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    // Moves the file to the specified destination URL.\r\n    // Types of move operations: Overwrite = 1; AllowBrokenThickets (move even if supporting files are separated from the file) = 8.\r\n    moveTo: {\r\n        argNames: [\"newUrl\", \"flags\"],\r\n        name: \"moveTo(newUrl='[[newUrl]]', flags=[[flags]])\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Opens the file as a stream.\r\n    openBinaryStream: {\r\n        requestType: utils_1.RequestType.GetBuffer\r\n    },\r\n    // Submits the file for content approval with the specified comment.\r\n    publish: {\r\n        argNames: [\"comment\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n    recycle: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    // Saves the file as a stream.\r\n    saveBinaryStream: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Starts a new chunk upload session and uploads the first fragment. The current file content is not changed when this method completes.\r\n    // The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\r\n    // The upload session ends either when you use the CancelUpload method or when you successfully complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\r\n    startUpload: {\r\n        argNames: [\"uploadId\"],\r\n        name: \"startupload(uploadId=guid'[[uploadId]]')\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Reverts an existing checkout for the file.\r\n    undoCheckOut: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Removes the file from content approval or unpublish a major version.\r\n    unpublish: {\r\n        argNames: [\"comment\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.File\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Files\r\n */\r\nexports.files = {\r\n    // Adds a file to this collection.\r\n    add: {\r\n        argNames: [\"overwrite\", \"url\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Adds a ghosted file to an existing list or document library.\r\n    // Template File Types: StandardPage = 0; WikiPage = 1; FormPage = 2\r\n    addTemplateFile: {\r\n        argNames: [\"urlOfFile\", \"templateFileType\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Get the file at the specified URL.\r\n    getByUrl: {\r\n        argNames: [\"serverRelativeUrl\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"file\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * File Version\r\n */\r\nexports.fileversion = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * File Versions\r\n */\r\nexports.fileversions = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Folder\r\n */\r\nexports.folder = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Files|files|/getByUrl('[Name]')|file\", \"Folders|folders|/getByUrl('[Name]')|folder\", \"ListItemAllFields\",\r\n        \"ParentFolder|folder\", \"Properties|propertyvalues\", \"StorageMetrics\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Get the file at the specified URL.\r\n    getByUrl: {\r\n        argNames: [\"serverRelativeUrl\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"folder\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Moves the list folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n    recycle: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.Folder\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Folders\r\n */\r\nexports.folders = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Files|files|/getByUrl('[Name]')|file\", \"Folders|folders|/getByUrl('[Name]')|folder\", \"ListItemAllFields\",\r\n        \"ParentFolder\", \"StorageMetrics\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Adds the folder that is located at the specified URL to the collection.\r\n    add: {\r\n        argNames: [\"url\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Get the file at the specified URL.\r\n    getbyurl: {\r\n        argNames: [\"serverRelativeUrl\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"folder\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Limited Web Part Manager\r\n */\r\nexports.limitedwebpartmanager = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"WebParts|webparts|/([Id])|webpart\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Gets a webpart by its id.\r\n    get_WebParts: {\r\n        argNames: [\"id\"],\r\n        name: \"webparts?expand=WebPart\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    }\r\n};\r\n//# sourceMappingURL=file.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/file.js\n// module id = 873\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Content Type\r\n */\r\nexports.contenttype = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"FieldLinks|fieldlinks|('[Name]')|fieldlink\", \"Fields|fields|/getByInternalNameOrTitle('[Name]')|field\", \"WorkflowAssociations\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the content type.\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.ContentType\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Content Types\r\n */\r\nexports.contenttypes = {\r\n    // Adds a content type to the collection.\r\n    add: {\r\n        metadataType: \"SP.ContentType\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Adds an existing content type to this collection.\r\n    addAvailableContentType: {\r\n        argNames: [\"contentTypeId\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets a content type by id.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"contenttype\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Field\r\n */\r\nexports.field = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Sets the value of the ShowInDisplayForm property for this field.\r\n    setShowInDisplayForm: {\r\n        argNames: [\"showInForm\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Sets the value of the ShowInEditForm property for this field.\r\n    setShowInEditForm: {\r\n        argNames: [\"showInForm\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Sets the value of the ShowInNewForm property for this field.\r\n    setShowInNewForm: {\r\n        argNames: [\"showInForm\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        inheritMetadataType: true,\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Field Links\r\n */\r\nexports.fieldlinks = {\r\n    // Adds a field link to the collection.\r\n    add: {\r\n        argNames: [\"data\"],\r\n        metadataType: \"SP.FieldLink\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets a field link by it's id.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"fieldlink\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Fields\r\n */\r\nexports.fields = {\r\n    // Adds a field to the field collection.\r\n    add: {\r\n        metadataType: \"SP.Field\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Adds a field to the field collection.\r\n    addField: {\r\n        argNames: [\"parameters\"],\r\n        metadataType: \"SP.FieldCreationInformation\",\r\n        name: \"addField\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Adds a secondary lookup field that depends on a primary lookup field for its relationship to the list where it gets its information.\r\n    addDependentLookupField: {\r\n        argNames: [\"displayname\", \"primarylookupfieldid\", \"showfield\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Creates a field based on the specified schema, Boolean value, and field options.\r\n    // Set the option to addFieldInternalNameHint - 8 to ensure the internal name in the schema xml is not altered.\r\n    createFieldAsXml: {\r\n        argNames: [\"schemaXml\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody,\r\n        data: {\r\n            parameters: {\r\n                __metadata: { type: \"SP.XmlSchemaFieldCreationInformation\" },\r\n                Options: 8,\r\n                SchemaXml: \"[[schemaXml]]\"\r\n            }\r\n        }\r\n    },\r\n    // Gets the field with the specified ID.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly,\r\n        returnType: \"field\"\r\n    },\r\n    // Returns the first Field object with the specified internal name or title from the collection.\r\n    getByInternalNameOrTitle: {\r\n        argNames: [\"internalNameOrTitle\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly,\r\n        returnType: \"field\"\r\n    },\r\n    // Returns the first field object in the collection based on the title of the specified field.\r\n    getByTitle: {\r\n        argNames: [\"title\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly,\r\n        returnType: \"field\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Items\r\n */\r\nexports.items = {\r\n    // Adds an item to the list item collection.\r\n    add: {\r\n        metadataType: function (obj) {\r\n            return (obj.parent && obj.parent[\"ListItemEntityTypeFullName\"]) || \"SP.ListItem\";\r\n        },\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets an item by its id.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"listitem\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * List\r\n */\r\nexports.list = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"BrowserFileHandling\", \"ContentTypes|contenttypes|('[Name]')|contenttype\", \"CreatablesInfo\", \"DefaultView|view\",\r\n        \"DescriptionResource\", \"EventReceivers|eventreceivers|('[Name]')|eventreceiver\", \"Fields|fields|/getByInternalNameOrTitle('[Name]')|field\",\r\n        \"FirstUniqueAncestorSecurableObject\", \"Forms|forms|('[Name]')|form\", \"InformationRightsManagementSettings\",\r\n        \"Items|items|([Name])|item\", \"ParentWeb\", \"RoleAssignments|roleassignments|([Name])|roleassignment\",\r\n        \"RootFolder|folder|/getByUrl('[Name]')|file\", \"Subscriptions\", \"TitleResource\",\r\n        \"UserCustomActions|usercustomactions|('[Name]')|usercustomaction\", \"Views|views|('[Name]')|view\", \"WorkflowAssociations\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Creates unique role assignments for the securable object.\r\n    breakRoleInheritance: {\r\n        argNames: [\"copyroleassignments\", \"clearsubscopes\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\r\n    getChanges: {\r\n        argNames: [\"query\"],\r\n        metadataType: \"SP.ChangeQuery\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Returns an item based on the id.\r\n    getItemById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"item\"\r\n    },\r\n    // Returns a collection of items from the list based on the view xml.\r\n    getItems: {\r\n        argNames: [\"viewXml\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody,\r\n        data: {\r\n            query: {\r\n                __metadata: { type: \"SP.CamlQuery\" },\r\n                ViewXml: \"[[viewXml]]\"\r\n            }\r\n        }\r\n    },\r\n    // Returns a collection of items from the list based on the specified query.\r\n    getItemsByQuery: {\r\n        argNames: [\"camlQuery\"],\r\n        name: \"getItems\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody,\r\n        data: {\r\n            query: {\r\n                __metadata: { type: \"SP.CamlQuery\" },\r\n                ViewXml: \"<View>[[camlQuery]]</View>\"\r\n            }\r\n        }\r\n    },\r\n    // Returns a collection of items from the list based on the specified query.\r\n    getListItemChangesSinceToken: {\r\n        argNames: [\"query\"],\r\n        metadataType: \"SP.ChangeLogItemQuery\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Returns a collection of lookup fields that use this list as a data source and that have FieldLookup.IsRelationship set to true.\r\n    getRelatedFields: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    // Gets the effective user permissions for the current user.\r\n    getUserEffectivePermissions: {\r\n        argNames: [\"loginName\"],\r\n        name: \"getUserEffectivePermissions(@user)?@user='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    // Returns the list view with the specified view identifier.\r\n    getViewById: {\r\n        argNames: [\"viewId\"],\r\n        name: \"getView\",\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"view\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n    recycle: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Renders the list data.\r\n    renderListData: {\r\n        argNames: [\"viewXml\"],\r\n        name: \"renderListData(@v)?@v='<View>[[viewXml]]</View>'\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    },\r\n    // Renders the list form data.\r\n    // Types of modes: 1 - Display, 2 - Edit, 3 - New\r\n    renderListFormData: {\r\n        argNames: [\"itemid\", \"formid\", \"mode\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Reserves a list item ID for idempotent list item creation.\r\n    reserveListItemId: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Resets the role inheritance for the securable object and inherits role assignments from the parent securable object.\r\n    resetRoleInheritance: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.List\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * List Item\r\n */\r\nexports.listitem = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"AttachmentFiles|attachmentfiles|('[Name]')|attachment\", \"ContentType|contenttype\", \"FieldValuesAsHtml\", \"FieldValuesAsText\", \"FieldValuesForEdit\",\r\n        \"File|file\", \"FirstUniqueAncestorSecurableObject\", \"Folder|folder\", \"GetDlpPolicyTip\", \"ParentList|list\",\r\n        \"Properties|propertyvalues\", \"RoleAssignments|roleassignments|roleassignments|([Name])|roleassignment\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Creates unique role assignments for the securable object.\r\n    breakRoleInheritance: {\r\n        argNames: [\"copyroleassignments\", \"clearsubscopes\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Gets the effective permissions that a specified user has on the list item.\r\n    getUserEffectivePermissions: {\r\n        argNames: [\"loginName\"],\r\n        name: \"getUserEffectivePermissions(@user)?@user='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n    recycle: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Resets the role inheritance for the securable object and inherits role assignments from the parent securable object.\r\n    resetRoleInheritance: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        inheritMetadataType: true,\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Validates and sets the values of the specified collection of fields for the list item.\r\n    validateUpdateListItem: {\r\n        argNames: [\"formValues\", \"bNewDocumentUpdate\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Lists\r\n */\r\nexports.lists = {\r\n    // Adds a list to the list collection.\r\n    add: {\r\n        metadataType: \"SP.List\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\r\n    ensureSiteAssetsLibrary: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Gets a list that is the default location for wiki pages.\r\n    ensureSitePagesLibrary: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Returns the list with the specified list identifier.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"list\"\r\n    },\r\n    // Returns the list with the specified title from the collection.\r\n    getByTitle: {\r\n        argNames: [\"title\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"list\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Version\r\n */\r\nexports.version = {\r\n    // Gets the version with the specified ID.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"version\"\r\n    },\r\n    // Deletes all versions in the collection.\r\n    deleteAll: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Deletes a version, by the specified id.\r\n    deleteById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Deletes a version, by the specified label.\r\n    deleteByLabel: {\r\n        argNames: [\"label\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Restores a version, by the specified label.\r\n    restoreByLabel: {\r\n        argNames: [\"label\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    }\r\n};\r\n/**\r\n * View\r\n */\r\nexports.view = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"ViewFields|viewfieldcollection\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Returns the list view as HTML.\r\n    renderAsHtml: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.View\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * View Field Collection\r\n */\r\nexports.viewfieldcollection = {\r\n    // Adds the field with the specified field internal name or display name to the collection.\r\n    addViewField: {\r\n        argNames: [\"fieldName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Moves the field with the specified field internal name to the specified position in the collection.\r\n    moveViewFieldTo: {\r\n        argNames: [\"field\", \"index\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Removes all the fields from the collection.\r\n    removeAllViewFields: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Removes the field with the specified field internal name from the collection.\r\n    removeViewField: {\r\n        argNames: [\"fieldName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    }\r\n};\r\n/**\r\n * Views\r\n */\r\nexports.views = {\r\n    // Adds a view to the view collection.\r\n    add: {\r\n        metadataType: \"SP.View\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets the list view with the specified ID.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"view\"\r\n    },\r\n    // Gets the list view with the specified title.\r\n    getByTitle: {\r\n        argNames: [\"title\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"view\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=list.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/list.js\n// module id = 874\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Navigation\r\n */\r\nexports.navigationservicerest = {\r\n    /**\r\n     * Properties\r\n     */\r\n    properties: [\r\n        \"MenuState|menustate|([Name])|menunode\"\r\n    ],\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to get the menu state.\r\n    getMenuState: {\r\n        argNames: [\"menuNodeKey\", \"depth\", \"customProperties\", \"mapProviderName\"],\r\n        name: \"MenuState\",\r\n        RequestType: utils_1.RequestType.GetWithArgsInQS\r\n    }\r\n};\r\n//# sourceMappingURL=navigation.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/navigation.js\n// module id = 875\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Property Values\r\n */\r\nexports.propertyvalues = {\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=propertyValues.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/propertyValues.js\n// module id = 876\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Search\r\n */\r\nexports.search = {\r\n    postquery: {\r\n        argNames: [\"request\"],\r\n        metadataType: \"Microsoft.Office.Server.Search.REST.SearchRequest\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n//# sourceMappingURL=search.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/search.js\n// module id = 877\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Role Assignment\r\n */\r\nexports.roleassignment = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Member\", \"RoleDefinitionBindings|roledefinitions\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Role Assignments\r\n */\r\nexports.roleassignments = {\r\n    // Adds a new role assignment with the specified principal and role definitions to the collection.\r\n    addRoleAssignment: {\r\n        argNames: [\"principalId\", \"roleDefId\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Gets the role assignment associated with the specified principal ID from the collection.\r\n    getByPrincipalId: {\r\n        argNames: [\"principalId\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"roleassignment\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Gets the role definition with the specified role type.\r\n    removeRoleAssignment: {\r\n        argNames: [\"principalId\", \"roleDefId\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    }\r\n};\r\n/**\r\n * Role Definition\r\n */\r\nexports.roledefinition = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Role Definitions\r\n */\r\nexports.roledefinitions = {\r\n    // Gets the role definition with the specified ID from the collection.\r\n    getById: {\r\n        argNames: [\"roleDefId\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"roledefinition\"\r\n    },\r\n    // Gets the role definition with the specified name.\r\n    getByName: {\r\n        argNames: [\"name\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"roledefinition\"\r\n    },\r\n    // Gets the role definitions with the specified role type.\r\n    getByType: {\r\n        argNames: [\"roleType\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"roledefinitions\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=security.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/security.js\n// module id = 878\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Site\r\n */\r\nexports.site = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"EventReceivers|eventreceivers|('[Name]')|eventreceiver\", \"Features\", \"Owner|user\", \"RootWeb|web\",\r\n        \"UserCustomActions|usercustomactions|('[Name]')|usercustomaction\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Creates a temporary evaluation SPSite for this SPSite, for the purposes of determining whether an upgrade is likely to be successful.\r\n    createPreviewSPSite: {\r\n        argNames: [\"upgrade\", \"sendemail\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Extend the upgrade reminder date for this SPSite by the days specified at WebApplication.UpgradeReminderDelay.\r\n    extendUpgradeReminderDate: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Specifies the list template gallery, site template gallery, Web Part gallery, master page gallery, or other galleries from the site collection, including custom galleries that are defined by users.\r\n    getCatalog: {\r\n        argNames: [\"typeCatalog\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Specifies the collection of the site collection changes from the change log that have occurred within the scope of the site collection, based on the specified query.\r\n    getChanges: {\r\n        argNames: [\"query\"],\r\n        metadataType: \"SP.ChangeQuery\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Specifies the collection of custom list templates for a given site.\r\n    getCustomListTemplates: {\r\n        argNames: [\"web\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Returns the collection of site definitions that are available for creating Web sites within the site collection.\r\n    getWebTemplates: {\r\n        argNames: [\"LCID\", \"overrideCompatLevel\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Invalidates cached upgrade information about the site collection so that this information will be recomputed the next time it is needed.\r\n    invalidate: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Returns true if the object needs to be upgraded; otherwise, false.\r\n    needsUpgradeByType: {\r\n        argNames: [\"versionUpgrade\", \"recursive\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Returns the site at the specified URL.\r\n    openWeb: {\r\n        argNames: [\"strUrl\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Returns the site with the specified GUID.\r\n    openWebById: {\r\n        argNames: [\"gWebId\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Queries the object\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Runs a health check as follows. (The health rules referenced below perform an implementation-dependent check on the health of a site collection)\r\n    runHealthCheck: {\r\n        argNames: [\"ruleId\", \"bRepair\", \"bRunAlways\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Either runs a site collection upgrade, or schedules it to be run in the future, depending on available system resources and the value of the queueOnly parameter. The user executing this method MUST be a farm administrator or a site collection administrator.\r\n    runUpgradeSiteSession: {\r\n        argNames: [\"versionUpgrade\", \"queueOnly\", \"sendEmail\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.Site\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Sets whether the client-side object model (CSOM) requests that are made in the context of any site inside the site collection require UseRemoteAPIs permission.\r\n    updateClientObjectModelUseRemoteAPIsPermissionSetting: {\r\n        argNames: [\"requireUseRemoteAPIs\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    }\r\n};\r\n/**\r\n * Tenant App\r\n */\r\nexports.tenantapp = {\r\n    // Deploy solution package in tenant app catalog\r\n    deploy: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Install solution package from tenant app catalog to SharePoint site\r\n    install: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Queries the object\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Remove solution package from tenant app catalog\r\n    remove: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Retract solution package in the tenant app catalog\r\n    retract: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Upgrade solution package in SharePoint site\r\n    upgrade: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Uninstall solution package from SharePoint site\r\n    uninstall: {\r\n        requestType: utils_1.RequestType.Post\r\n    }\r\n};\r\n/**\r\n * Tenant Apps\r\n */\r\nexports.tenantapps = {\r\n    // Get an app by id\r\n    getById: {\r\n        argNames: [\"guid\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"tenantapp\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Tenant App Catalog\r\n */\r\nexports.tenantappcatalog = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"AvailableApps|tenantapps|/getById('[Id]')|tenantapp\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Adds the folder that is located at the specified URL to the collection.\r\n    add: {\r\n        argNames: [\"overwrite\", \"url\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Get an app by id.\r\n    getById: {\r\n        argNames: [\"guid\"],\r\n        name: \"AvailableApps/getById('[[guid]]')\",\r\n        requestType: utils_1.RequestType.GetReplace,\r\n        returnType: \"tenantapp\"\r\n    },\r\n    // Gets the site collection app catalog sites\r\n    SiteCollectionAppCatalogsSites: {\r\n        requestType: utils_1.RequestType.Post\r\n    }\r\n};\r\n/**\r\n * Utility\r\n */\r\nexports.utility = {\r\n    createEmailBodyForInvitation: {\r\n        argNames: [\"pageAddress\"],\r\n        name: \"SP.Utilities.Utility.CreateEmailBodyForInvitation\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    getAppLicenseDeploymentId: {\r\n        name: \"SP.Utilities.Utility.GetAppLicenseDeploymentId\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getAppLicenseInformation: {\r\n        name: \"SP.Utilities.Utility.GetAppLicenseInformation\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getCurrentUserEmailAddresses: {\r\n        name: \"SP.Utilities.Utility.GetCurrentUserEmailAddresses\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getLocalizedString: {\r\n        argNames: [\"sourceValue\"],\r\n        name: \"SP.Utilities.Utility.GetLocalizedString\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    getLowerCaseString: {\r\n        argNames: [\"sourceValue\", \"lcid\"],\r\n        name: \"SP.Utilities.Utility.GetLowerCaseString\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    importAppLicense: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.ImportAppLicense\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    isUserLicensedForEntityInContext: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.IsUserLicensedForEntityInContext\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    localizeWebPartGallery: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.LocalizeWebPartGallery\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    markDiscussionAsFeatured: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.MarkDiscussionAsFeatured\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    resolvePrincipal: {\r\n        name: \"SP.Utilities.Utility.ResolvePrincipalInCurrentContext\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    searchPrincipals: {\r\n        name: \"SP.Utilities.Utility.SearchPrincipalsUsingContextWeb\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    unmarkDiscussionAsFeatured: {\r\n        argNames: [\"url\"],\r\n        name: \"SP.Utilities.Utility.UnmarkDiscussionAsFeatured\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Web\r\n */\r\nexports.web = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"AllProperties|propertyvalues\", \"AppTiles\", \"AssociatedMemberGroup|group\", \"AssociatedOwnerGroup|group\",\r\n        \"AssociatedVisitorGroup|group\", \"Author|user\", \"AvailableContentTypes|contenttypes\", \"AvailableFields|fields\",\r\n        \"ClientWebParts\", \"ContentTypes|contenttypes|('[Name]')|contenttype\", \"CurrentUser|user\", \"DataLeakagePreventionStatusInfo\",\r\n        \"DescriptionResource\", \"EventReceivers|eventreceivers|('[Name]')|eventreceiver\", \"Features\",\r\n        \"Fields|fields|/getByInternalNameOrTitle('[Name]')|field\", \"FirstUniqueAncestorSecurableObject\",\r\n        \"Folders|folders|/getByUrl('[Name]')|folder\", \"Lists|lists|/getByTitle('[Name]')|list\",\r\n        \"ListTemplates|listtemplates|('[Name]')|listtemplate\", \"Navigation\", \"ParentWeb\",\r\n        \"PushNotificationSubscribers\", \"RecycleBin\", \"RegionalSettings\", \"RoleAssignments|roleassignments|([Name])|roleassignment\",\r\n        \"RoleDefinitions|roledefinitions|/getByName('[Name]')|roledefinition\", \"RootFolder|folder|/getByUrl('[Name]')|file\",\r\n        \"SiteGroups|sitegroups|/getByName('[Name]')|group\", \"SiteUserInfoList\", \"SiteUsers|users|/getById([Name])|user\",\r\n        \"TenantAppCatalog|tenantappcatalog\", \"ThemeInfo\", \"TitleResource\",\r\n        \"UserCustomActions|usercustomactions|('[Name]')|usercustomaction\", \"WebInfos|webinfos\", \"Webs|webs\", \"WorkflowAssociations\", \"WorkflowTemplates\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Applies the theme specified by the contents of each of the files specified in the arguments to the site.\r\n    applyTheme: {\r\n        argNames: [\"colorpaletteurl\", \"fontschemeurl\", \"backgroundimageurl\", \"sharegenerated\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Applies the specified site definition or site template to the Web site that has no template applied to it.\r\n    applyWebTemplate: {\r\n        argName: [\"name\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInQS\r\n    },\r\n    // Creates unique role assignments for the securable object.\r\n    breakRoleInheritance: {\r\n        argNames: [\"copyroleassignments\", \"clearsubscopes\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Checks whether the push notification subscriber exist for the current user with the given device application instance ID.\r\n    doesPushNotificationSubscriberExist: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Returns whether the current user has the given set of permissions.\r\n    doesUserHavePermissions: {\r\n        argNames: [\"High\", \"Low\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    // Checks whether the specified login name belongs to a valid user in the site. If the user doesn't exist, adds the user to the site.\r\n    ensureUser: {\r\n        argNames: [\"logonName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Sends data to an OData service.\r\n    executeRemoteLOB: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets the app BDC catalog.\r\n    getAppBdcCatalog: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Gets the app BDC catalog for the specified app instance.\r\n    getAppBdcCatalogForAppInstance: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Retrieves an AppInstance installed on this Site.\r\n    getAppInstanceById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Retrieves all AppInstances installed on this site that are instances of the specified App.\r\n    getAppInstancesByProductId: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Returns a collection of site templates available for the site.\r\n    getAvailableWebTemplates: {\r\n        argNames: [\"lcid\", \"doincludecrosslanguage\"],\r\n        requestType: utils_1.RequestType.GetWithArgs\r\n    },\r\n    // Returns the list gallery on the site.\r\n    getCatalog: {\r\n        argNames: [\"galleryType\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Returns the collection of all changes from the change log that have occurred within the scope of the site, based on the specified query.\r\n    getChanges: {\r\n        argNames: [\"query\"],\r\n        metadataType: \"SP.ChangeQuery\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets the context information for the site. Static method.\r\n    getContextWebInformation: {\r\n        name: \"contextInfo\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Gets the custom list templates for the site.\r\n    getCustomListTemplates: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    // Gets the document libraries on a site. Static method. (SharePoint Online only)\r\n    getDocumentLibraries: {\r\n        argNames: [\"url\"],\r\n        name: \"sp.web.getDocumentLibraries\",\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    // Gets the specified external content type in a line-of-business (LOB) system application.\r\n    getEntity: {\r\n        argNames: [\"namespace\", \"name\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Returns the file object located at the specified server-relative URL.\r\n    getFileByServerRelativeUrl: {\r\n        argNames: [\"url\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"file\"\r\n    },\r\n    // Returns the folder object located at the specified server-relative URL.\r\n    getFolderByServerRelativeUrl: {\r\n        argNames: [\"url\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"folder\"\r\n    },\r\n    // Gets the list at the specified site-relative URL. (SharePoint Online only)\r\n    getList: {\r\n        argNames: [\"url\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"list\"\r\n    },\r\n    // Gets the push notification subscriber over the site for the specified device application instance ID.\r\n    getPushNotificationSubscriber: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Queries for the push notification subscribers over the site for the specified value of custom arguments. Null or empty custom arguments will return subscribers without any filtering.\r\n    getPushNotificationSubscribersByArgs: {\r\n        argNames: [\"args\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    // Queries for the push notification subscribers over the site for the specified user.\r\n    getPushNotificationSubscribersByUser: {\r\n        argNames: [\"loginName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    // Returns the collection of child sites of the current site based on the specified query. (SharePoint Online only)\r\n    getSubwebsFilteredForCurrentUser: {\r\n        argNames: [\"nwebtemplatefilter\", \"nconfigurationfilter\"],\r\n        requestType: utils_1.RequestType.GetWithArgs,\r\n        returnType: \"webinfos\"\r\n    },\r\n    // Returns the user corresponding to the specified member identifier for the current site.\r\n    getUserById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"user\"\r\n    },\r\n    // Gets the effective permissions that the specified user has within the current application scope.\r\n    getUserEffectivePermissions: {\r\n        argNames: [\"loginName\"],\r\n        name: \"getUserEffectivePermissions(@user)?@user='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    // Gets the site URL from a page URL. Static method.\r\n    getWebUrlFromPageUrl: {\r\n        name: \"sp.web.getWebUrlFromPageUrl\",\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    // Uploads and installs an app package to this site.\r\n    loadAndInstallApp: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Uploads and installs an App package on the site in a specified locale.\r\n    loadAndInstallAppInSpecifiedLocale: {\r\n        argNames: [\"appPackageStream\", \"installationLocaleLCID\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Uploads an App package and creates an instance from it.\r\n    loadApp: {\r\n        argNames: [\"appPackageStream\", \"installationLocaleLCID\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Returns the name of the image file for the icon that is used to represent the specified file.\r\n    mapToIcon: {\r\n        argNames: [\"filename\", \"progid\", \"size\"],\r\n        requestType: utils_1.RequestType.GetWithArgs\r\n    },\r\n    // Processes a notification from an external system.\r\n    processExternalNotification: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Queries the object\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Registers the subscriber for push notifications over the site. If the registration already exists, the service token is updated with the new value.\r\n    registerPushNotificationSubscriber: {\r\n        argNames: [\"deviceappinstanceid\", \"servicetoken\"],\r\n        requestType: utils_1.RequestType.PostWithArgs\r\n    },\r\n    // Resets the role inheritance for the securable object and inherits role assignments from the parent securable object.\r\n    resetRoleInheritance: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Unregisters the subscriber for push notifications from the site.\r\n    unregisterPushNotificationSubscriber: {\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Updates it's properties.\r\n    update: {\r\n        metadataType: \"SP.Web\",\r\n        name: \"\",\r\n        requestMethod: \"MERGE\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * Web Information Collection\r\n */\r\nexports.webinfos = {\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Webs\r\n */\r\nexports.webs = {\r\n    add: {\r\n        argNames: [\"parameters\"],\r\n        metadataType: \"SP.WebCreationInformation\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=site.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/site.js\n// module id = 879\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * People Manager\r\n */\r\nexports.peoplemanager = {\r\n    amIFollowedBy: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    amIFollowing: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    follow: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInQS\r\n    },\r\n    followTag: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    getFollowedTags: {\r\n        argNames: [\"maxCount\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly\r\n    },\r\n    getFollowersFor: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    getMyFollowers: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getMyProperties: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getMySuggestions: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getPeopleFollowedBy: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    getPeopleFollowedByMe: {\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getPropertiesFor: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    getTrendingTags: {\r\n        name: \"sp.userprofiles.peoplemanager.gettrendingtags\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    getUserProfilePropertyFor: {\r\n        argNames: [\"accountName\", \"propertyName\"],\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    hideSuggestion: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInQS\r\n    },\r\n    isFollowing: {\r\n        argNames: [\"possibleFollowerAccountName\", \"possibleFolloweeAccountName\"],\r\n        name: \"sp.userprofiles.peoplemanager.isfollowing\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.GetWithArgsInQS\r\n    },\r\n    setMyProfilePicture: {\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    stopFollowing: {\r\n        argNames: [\"accountName\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInQS\r\n    },\r\n    stopFollowingTag: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n};\r\n/**\r\n * Profile Loader\r\n */\r\nexports.profileloader = {\r\n    createPersonalSiteEnqueueBulk: {\r\n        argNames: [\"emailIDs\"],\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    getOwnerUserProfile: {\r\n        name: \"sp.userprofiles.profileloader.getowneruserprofile\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.Post,\r\n        returnType: \"userprofile\"\r\n    },\r\n    getUserProfile: {\r\n        requestType: utils_1.RequestType.Post,\r\n        returnType: \"userprofile\"\r\n    },\r\n};\r\n/**\r\n * Social Feed\r\n */\r\nexports.socialfeed = {\r\n    actor: {\r\n        argNames: [\"accountName\"],\r\n        name: \"actor(item=@v)?@v='[[accountName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    actorFeed: {\r\n        argNames: [\"accountName\"],\r\n        name: \"actor(item=@v)/feed?@v='[[accountName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace\r\n    },\r\n    clearMyUnreadMentionCount: {\r\n        name: \"my/mentionfeed/clearMyUnreadMentionCount\",\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    my: {\r\n        name: \"my\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myFeed: {\r\n        name: \"my/feed\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myLikes: {\r\n        name: \"my/likes\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myMentionFeed: {\r\n        name: \"my/mentionfeed\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myNews: {\r\n        name: \"my/news\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myTimelineFeed: {\r\n        name: \"my/timelinefeed\",\r\n        requestType: utils_1.RequestType.Get\r\n    },\r\n    myUnreadMentionCount: {\r\n        name: \"my/unreadmentioncount\",\r\n        requestType: utils_1.RequestType.Get\r\n    }\r\n};\r\n/**\r\n * User Profile\r\n */\r\nexports.userprofile = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"PersonalSite|site\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    createPersonalSiteEnque: {\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    shareAllSocialData: {\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    }\r\n};\r\n//# sourceMappingURL=social.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/social.js\n// module id = 880\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Group\r\n */\r\nexports.group = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Users|users|/getById([Name])|user\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Site Groups\r\n */\r\nexports.sitegroups = {\r\n    // Adds a group to the group collection.\r\n    add: {\r\n        metadataType: \"SP.Group\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Returns a group from the collection based on the member ID of the group.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"group\"\r\n    },\r\n    // Returns a cross-site group from the collection based on the name of the group.\r\n    getByName: {\r\n        argNames: [\"name\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"group\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Removes the group with the specified member ID from the collection.\r\n    removeById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Removes the cross-site group with the specified name from the collection.\r\n    removeByLoginName: {\r\n        argNames: [\"name\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n};\r\n/**\r\n * People Picker\r\n */\r\nexports.peoplepicker = {\r\n    clientPeoplePickerResolveUser: {\r\n        argNames: [\"queryParams\"],\r\n        metadataType: \"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\",\r\n        name: \"SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.ClientPeoplePickerResolveUser\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    clientPeoplePickerSearchUser: {\r\n        argNames: [\"queryParams\"],\r\n        metadataType: \"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\",\r\n        name: \"SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.ClientPeoplePickerSearchUser\",\r\n        replaceEndpointFl: true,\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    }\r\n};\r\n/**\r\n * User\r\n */\r\nexports.user = {\r\n    /*********************************************************************************************************************************/\r\n    // Properties\r\n    /*********************************************************************************************************************************/\r\n    properties: [\r\n        \"Groups|sitegroups|([Name])|group\"\r\n    ],\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * Users\r\n */\r\nexports.users = {\r\n    // Adds a user to the user collection.\r\n    add: {\r\n        metadataType: \"SP.User\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Gets the user with the specified email address.\r\n    getByEmail: {\r\n        argNames: [\"email\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"user\"\r\n    },\r\n    // Gets the user with the specified member identifier (ID).\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"user\"\r\n    },\r\n    // Gets the user with the specified login name.\r\n    getByLoginName: {\r\n        argNames: [\"loginName\"],\r\n        name: \"getByLoginName(@v)?@v='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.GetReplace,\r\n        returnType: \"user\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    },\r\n    // Removes the user with the specified ID.\r\n    removeById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.PostWithArgsValueOnly\r\n    },\r\n    // Removes the user with the specified login name.\r\n    removeByLoginName: {\r\n        argNames: [\"loginName\"],\r\n        name: \"removeByLoginName(@v)?@v='[[loginName]]'\",\r\n        requestType: utils_1.RequestType.PostReplace\r\n    }\r\n};\r\n//# sourceMappingURL=user.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/user.js\n// module id = 881\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * User Custom Action\r\n */\r\nexports.usercustomaction = {\r\n    // Deletes the object\r\n    delete: {\r\n        requestType: utils_1.RequestType.Delete\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n/**\r\n * User Custom Actions\r\n */\r\nexports.usercustomactions = {\r\n    // Adds a user custom action to the collection.\r\n    add: {\r\n        metadataType: \"SP.UserCustomAction\",\r\n        name: \"\",\r\n        requestType: utils_1.RequestType.PostWithArgsInBody\r\n    },\r\n    // Deletes all custom actions in the collection.\r\n    clear: {\r\n        requestType: utils_1.RequestType.Post\r\n    },\r\n    // Returns the custom action with the specified identifier.\r\n    getById: {\r\n        argNames: [\"id\"],\r\n        requestType: utils_1.RequestType.GetWithArgsValueOnly,\r\n        returnType: \"usercustomaction\"\r\n    },\r\n    // Queries the collection\r\n    query: {\r\n        argNames: [\"oData\"],\r\n        requestType: utils_1.RequestType.OData\r\n    }\r\n};\r\n//# sourceMappingURL=userCustomAction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/userCustomAction.js\n// module id = 882\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Calendar Types\r\n */\r\nexports.CalendarTypes = {\r\n    Gregorian: 1,\r\n    JapaneseEmperorEra: 3,\r\n    TaiwanCalendar: 4,\r\n    KoreanTangunEra: 5,\r\n    Hijri: 6,\r\n    Thai: 7,\r\n    HebrewLunar: 8,\r\n    GregorianMiddleEastFrench: 9,\r\n    GregorianArabic: 10,\r\n    GregorianTransliteratedEnglish: 11,\r\n    GregorianTransliteratedFrench: 12,\r\n    KoreanandJapaneseLunar: 14,\r\n    ChineseLunar: 15,\r\n    SakaEra: 16\r\n};\r\n/**\r\n * Check Out Types\r\n */\r\nexports.CheckOutType = { Online: 0, Offline: 1, None: 2 };\r\n/**\r\n * Choice Format Types\r\n */\r\nexports.ChoiceFormatType = { Dropdown: 0, RadioButtons: 1 };\r\n/**\r\n * Client Template Utility\r\n */\r\nexports.ClientTemplatesUtility = {\r\n    UserLookupDelimitString: \";#\",\r\n    UserMultiValueDelimitString: \",#\"\r\n};\r\n/**\r\n * Control Modes\r\n */\r\nexports.ControlMode = {\r\n    Invalid: 0,\r\n    Display: 1,\r\n    Edit: 2,\r\n    New: 3,\r\n    View: 4\r\n};\r\n/**\r\n * Date Format\r\n */\r\nexports.DateFormat = { DateOnly: 0, DateTime: 1 };\r\n/**\r\n * Draft Visibility Types\r\n */\r\nexports.DraftVisibilityType = { Reader: 0, Author: 1, Approver: 2 };\r\n/**\r\n * Event Receiver Synchronization Types\r\n */\r\nexports.EventReceiverSynchronizationType = { Synchronization: 1, Asynchronous: 2 };\r\n/**\r\n * Event Receiver Types\r\n */\r\nexports.EventReceiverType = {\r\n    ItemAdding: 1,\r\n    ItemUpdating: 2,\r\n    ItemDeleting: 3,\r\n    ItemCheckingIn: 4,\r\n    ItemCheckingOut: 5,\r\n    ItemUncheckingOut: 6,\r\n    ItemAttachmentAdding: 7,\r\n    ItemAttachmentDeleting: 8,\r\n    ItemFileMoving: 9,\r\n    ItemVersionDeleting: 11,\r\n    FieldAdding: 101,\r\n    FieldUpdating: 102,\r\n    FieldDeleting: 103,\r\n    ListAdding: 104,\r\n    ListDeleting: 105,\r\n    SiteDeleting: 201,\r\n    WebDeleting: 202,\r\n    WebMoving: 203,\r\n    WebAdding: 204,\r\n    GroupAdding: 301,\r\n    GroupUpdating: 302,\r\n    GroupDeleting: 303,\r\n    GroupUserAdding: 304,\r\n    GroupUserDeleting: 305,\r\n    RoleDefinitionAdding: 306,\r\n    RoleDefinitionUpdating: 307,\r\n    RoleDefinitionDeleting: 308,\r\n    RoleAssignmentAdding: 309,\r\n    RoleAssignmentDeleting: 310,\r\n    InheritanceBreaking: 311,\r\n    InheritanceResetting: 312,\r\n    WorkflowStarting: 501,\r\n    ItemAdded: 10001,\r\n    ItemUpdated: 10002,\r\n    ItemDeleted: 10003,\r\n    ItemCheckedIn: 10004,\r\n    ItemCheckedOut: 10005,\r\n    ItemUncheckedOut: 10006,\r\n    ItemAttachmentAdded: 10007,\r\n    ItemAttachmentDeleted: 10008,\r\n    ItemFileMoved: 10009,\r\n    ItemFileConverted: 10010,\r\n    ItemVersionDeleted: 10011,\r\n    FieldAdded: 10101,\r\n    FieldUpdated: 10102,\r\n    FieldDeleted: 10103,\r\n    ListAdded: 10104,\r\n    ListDeleted: 10105,\r\n    SiteDeleted: 10201,\r\n    WebDeleted: 10202,\r\n    WebMoved: 10203,\r\n    WebProvisioned: 10204,\r\n    GroupAdded: 10301,\r\n    GroupUpdated: 10302,\r\n    GroupDeleted: 10303,\r\n    GroupUserAdded: 10304,\r\n    GroupUserDeleted: 10305,\r\n    RoleDefinitionAdded: 10306,\r\n    RoleDefinitionUpdated: 10307,\r\n    RoleDefinitionDeleted: 10308,\r\n    RoleAssignmentAdded: 10309,\r\n    RoleAssignmentDeleted: 10310,\r\n    InheritanceBroken: 10311,\r\n    InheritanceReset: 10312,\r\n    WorkflowStarted: 10501,\r\n    WorkflowPostponed: 10502,\r\n    WorkflowCompleted: 10503,\r\n    EntityInstanceAdded: 10601,\r\n    EntityInstanceUpdated: 10602,\r\n    EntityInstanceDeleted: 10603,\r\n    AppInstalled: 10701,\r\n    AppUpgraded: 10702,\r\n    AppUninstalling: 10703,\r\n    EmailReceived: 20000,\r\n    ContextEvent: 32766\r\n};\r\n/**\r\n * Field Note Types\r\n */\r\nexports.FieldNoteType = {\r\n    /** Enhance Rich Text */\r\n    EnhancedRichText: 0,\r\n    /** Rich Text */\r\n    RichText: 1,\r\n    /** Text Only */\r\n    TextOnly: 2\r\n};\r\n/**\r\n * Field Number Type\r\n */\r\nexports.FieldNumberType = {\r\n    /** Decimal */\r\n    Decimal: 0,\r\n    /** Integer */\r\n    Integer: 1,\r\n    /** Percentage */\r\n    Percentage: 2,\r\n};\r\n/**\r\n * Field Result Types\r\n */\r\nexports.FieldResultType = {\r\n    /** Boolean */\r\n    Boolean: \"Boolean\",\r\n    /** Currency */\r\n    Currency: \"Currency\",\r\n    /** Date Only */\r\n    DateOnly: \"DateOnly\",\r\n    /** Date & Time */\r\n    DateTime: \"DateTime\",\r\n    /** Number */\r\n    Number: \"Number\",\r\n    /** Text */\r\n    Text: \"Text\"\r\n};\r\n/**\r\n * Field Types\r\n */\r\nexports.FieldType = {\r\n    AllDayEvent: 29,\r\n    Attachments: 19,\r\n    Boolean: 8,\r\n    Calculated: 17,\r\n    Choice: 6,\r\n    Computed: 12,\r\n    ContentTypeId: 25,\r\n    Counter: 5,\r\n    CrossProjectLink: 22,\r\n    Currency: 10,\r\n    DateTime: 4,\r\n    Error: 24,\r\n    File: 18,\r\n    Geolocation: 31,\r\n    GridChoice: 16,\r\n    Guid: 14,\r\n    Integer: 1,\r\n    Invalid: 0,\r\n    Lookup: 7,\r\n    MaxItems: 31,\r\n    ModStat: 23,\r\n    MultiChoice: 15,\r\n    Note: 3,\r\n    Number: 9,\r\n    PageSeparator: 26,\r\n    Recurrence: 21,\r\n    Text: 2,\r\n    ThreadIndex: 27,\r\n    Threading: 13,\r\n    URL: 11,\r\n    User: 20,\r\n    WorkflowEventType: 30,\r\n    WorkflowStatus: 28\r\n};\r\n/**\r\n * Field User Selection Types\r\n */\r\nexports.FieldUserSelectionType = { PeopleOnly: 0, PeopleAndGroups: 1 };\r\n/**\r\n * File Template Types\r\n*/\r\nexports.FileTemplateType = { StandardPage: 0, WikiPage: 1, FormPage: 2 };\r\n/**\r\n * Friendly Date Format\r\n */\r\nexports.FriendlyDateFormat = {\r\n    Unspecified: 0,\r\n    Disabled: 1,\r\n    Relative: 2\r\n};\r\n/**\r\n * List Template Types\r\n*/\r\nexports.ListTemplateType = {\r\n    AccessRequest: 160,\r\n    AdminTasks: 1200,\r\n    Agenda: 201,\r\n    AppDataCatalog: 125,\r\n    Announcements: 104,\r\n    CallTrack: 404,\r\n    Categories: 303,\r\n    Circulation: 405,\r\n    Comments: 302,\r\n    Contacts: 105,\r\n    CustomGrid: 120,\r\n    DataConnectionLibrary: 130,\r\n    DataSources: 110,\r\n    Decision: 204,\r\n    DesignCatalog: 124,\r\n    DeveloperSiteDraftApps: 1230,\r\n    DiscussionBoard: 108,\r\n    DocumentLibrary: 101,\r\n    Events: 106,\r\n    ExternalList: 600,\r\n    Facility: 402,\r\n    GanttTasks: 150,\r\n    GenericList: 100,\r\n    HealthReports: 1221,\r\n    HealthRules: 1220,\r\n    HelpLibrary: 151,\r\n    Holidays: 421,\r\n    HomePageLibrary: 212,\r\n    IMEDic: 499,\r\n    IssueTracking: 1100,\r\n    Links: 103,\r\n    ListTemplateCatalog: 114,\r\n    MasterPageCatalog: 116,\r\n    MaintenanceLogs: 175,\r\n    MeetingObjective: 207,\r\n    Meetings: 200,\r\n    MeetingUser: 202,\r\n    MySiteDocumentLibrary: 700,\r\n    Posts: 301,\r\n    NoCodePublic: 122,\r\n    NoCodeWorkflows: 117,\r\n    PictureLibrary: 109,\r\n    SolutionCatalog: 121,\r\n    Survey: 102,\r\n    Tasks: 107,\r\n    TasksWithTimelineAndHierarchy: 171,\r\n    TextBox: 210,\r\n    ThemeCatalog: 123,\r\n    ThingsToBring: 211,\r\n    Timecard: 420,\r\n    UserInformation: 112,\r\n    WebPageLibrary: 119,\r\n    WebPartCatalog: 113,\r\n    WebTemplateCatalog: 111,\r\n    Whereabouts: 403,\r\n    WorkflowHistory: 140,\r\n    WorkflowProcess: 118,\r\n    XMLForm: 115\r\n};\r\n/**\r\n * Locale LCID Types\r\n */\r\nexports.LocaleLCIDType = {\r\n    Afrikaans: 1078,\r\n    Albanian: 1052,\r\n    ArabicAlgeria: 5121,\r\n    ArabicBahrain: 15361,\r\n    ArabicEgypt: 3073,\r\n    ArabicIraq: 2049,\r\n    ArabicJordan: 11265,\r\n    ArabicLebanon: 12289,\r\n    ArabicLibya: 4097,\r\n    ArabicMorocco: 6145,\r\n    ArabicOman: 8193,\r\n    ArabicQatar: 16385,\r\n    ArabicSaudiArabia: 1025,\r\n    ArabicSyria: 10241,\r\n    ArabicTunisia: 7169,\r\n    ArabicUAE: 14337,\r\n    ArabicYemen: 9217,\r\n    Armenian: 1067,\r\n    AzeriCyrillic: 2092,\r\n    AzeriLatin: 1068,\r\n    Basque: 1069,\r\n    Belarusian: 1059,\r\n    Bulgarian: 1026,\r\n    Catalan: 1027,\r\n    ChineseHongKongSAR: 3076,\r\n    ChineseMacaoSAR: 5124,\r\n    ChinesePRC: 2052,\r\n    ChineseSingapore: 4100,\r\n    ChineseTaiwan: 1028,\r\n    CroatianCroatia: 1050,\r\n    Czech: 1029,\r\n    Danish: 1030,\r\n    Divehi: 1125,\r\n    DutchBelgium: 2067,\r\n    DutchNetherlands: 1043,\r\n    EnglishAustralia: 3081,\r\n    EnglishBelize: 10249,\r\n    EnglishCanada: 4105,\r\n    EnglishCaribbean: 9225,\r\n    EnglishIreland: 6153,\r\n    EnglishJamaica: 8201,\r\n    EnglishNewZealand: 5129,\r\n    EnglishPhilippines: 13321,\r\n    EnglishSouthAfrica: 7177,\r\n    EnglishTrinidad: 11273,\r\n    EnglishUnitedKingdom: 2057,\r\n    EnglishUnitedStates: 1033,\r\n    EnglishZimbabwe: 12297,\r\n    Estonian: 1061,\r\n    Faeroese: 1080,\r\n    Finnish: 1035,\r\n    FrenchBelgium: 2060,\r\n    FrenchCanada: 3084,\r\n    FrenchFrance: 1036,\r\n    FrenchLuxembourg: 5132,\r\n    FrenchMonaco: 6156,\r\n    FrenchSwitzerland: 4108,\r\n    Galician: 1110,\r\n    Georgian: 1079,\r\n    GermanAustria: 3079,\r\n    GermanGermany: 1031,\r\n    GermanLiechtenstein: 5127,\r\n    GermanLuxembourg: 4103,\r\n    GermanSwitzerland: 2055,\r\n    Greek: 1032,\r\n    Gujarati: 1095,\r\n    HebrewIsrael: 1037,\r\n    HindiIndia: 1081,\r\n    Hungarian: 1038,\r\n    Icelandic: 1039,\r\n    Indonesian: 1057,\r\n    ItalianItaly: 1040,\r\n    ItalianSwitzerland: 2064,\r\n    Japanese: 1041,\r\n    Kannada: 1099,\r\n    Kazakh: 1087,\r\n    Konkani: 1111,\r\n    Korean: 1042,\r\n    KyrgyzCyrillic: 1088,\r\n    Latvian: 1062,\r\n    Lithuanian: 1063,\r\n    MacedonianFYROM: 1071,\r\n    Malay: 1086,\r\n    MalayBruneiDarussalam: 2110,\r\n    Marathi: 1102,\r\n    MongolianCyrillic: 1104,\r\n    NorwegianBokmal: 1044,\r\n    NorwegianNynorsk: 2068,\r\n    PersianIran: 1065,\r\n    Polish: 1045,\r\n    PortugueseBrazil: 1046,\r\n    PortuguesePortugal: 2070,\r\n    Punjabi: 1094,\r\n    Romanian: 1048,\r\n    Russian: 1049,\r\n    Sanskrit: 1103,\r\n    SerbianCyrillic: 3098,\r\n    SerbianLatin: 2074,\r\n    Slovak: 1051,\r\n    Slovenian: 1060,\r\n    SpanishArgentina: 11274,\r\n    SpanishBolivia: 16394,\r\n    SpanishChile: 13322,\r\n    SpanishColombia: 9226,\r\n    SpanishCostaRica: 5130,\r\n    SpanishDominicanRepublic: 7178,\r\n    SpanishEcuador: 12298,\r\n    SpanishElSalvador: 17418,\r\n    SpanishGuatemala: 4106,\r\n    SpanishHonduras: 18442,\r\n    SpanishMexico: 2058,\r\n    SpanishNicaragua: 19466,\r\n    SpanishPanama: 6154,\r\n    SpanishParaguay: 15370,\r\n    SpanishPeru: 10250,\r\n    SpanishPuertoRico: 20490,\r\n    SpanishSpain: 3082,\r\n    SpanishUruguay: 14346,\r\n    SpanishVenezuela: 8202,\r\n    Swahili: 1089,\r\n    Swedish: 1053,\r\n    SwedishFinland: 2077,\r\n    Syriac: 1114,\r\n    Tamil: 1097,\r\n    Tatar: 1092,\r\n    Telugu: 1098,\r\n    ThaiThailand: 1054,\r\n    Turkish: 1055,\r\n    Ukrainian: 1058,\r\n    UrduPakistan: 1056,\r\n    UzbekCyrillic: 2115,\r\n    UzbekLatin: 1091,\r\n    Vietnamese: 1066,\r\n};\r\n/**\r\n * Page Types\r\n */\r\nexports.PageType = {\r\n    DefaultView: 0,\r\n    DialogView: 2,\r\n    DisplayForm: 4,\r\n    DisplayFormDialog: 5,\r\n    EditForm: 6,\r\n    EditFormDialog: 7,\r\n    Invalid: -1,\r\n    NewForm: 8,\r\n    NewFormDialog: 9,\r\n    NormalView: 1,\r\n    Page_MAXITEMS: 11,\r\n    SolutionForm: 10,\r\n    View: 3\r\n};\r\n/**\r\n * Personal Site Capabilities\r\n */\r\nexports.PersonalSiteCapabilities = {\r\n    Education: 16,\r\n    Guest: 32,\r\n    MyTasksDashboard: 8,\r\n    None: 0,\r\n    Profile: 1,\r\n    Social: 2,\r\n    Storage: 4\r\n};\r\n/**\r\n * Principal Sources\r\n */\r\nexports.PrincipalSources = {\r\n    All: 15,\r\n    MembershipProvider: 4,\r\n    None: 0,\r\n    RoleProvider: 8,\r\n    UserInfoList: 1,\r\n    Windows: 2\r\n};\r\n/**\r\n * Principal Types\r\n */\r\nexports.PrincipalTypes = {\r\n    All: 15,\r\n    DistributionList: 2,\r\n    None: 0,\r\n    SecurityGroup: 4,\r\n    SharePointGroup: 8,\r\n    User: 1\r\n};\r\n/**\r\n * Relationship Delete Behavior Types\r\n */\r\nexports.RelationshipDeleteBehaviorType = { None: 0, Cascade: 1, Restrict: 2 };\r\n/**\r\n * Reordering Rule Match Types\r\n */\r\nexports.ReorderingRuleMatchType = {\r\n    ContentTypeIs: 5,\r\n    FileExtensionMatches: 6,\r\n    ManualCondition: 8,\r\n    ResultContainsKeyword: 0,\r\n    ResultHasTag: 7,\r\n    TitleContainsKeyword: 1,\r\n    TitleMatchesKeyword: 2,\r\n    UrlExactlyMatches: 4,\r\n    UrlStartsWith: 3\r\n};\r\n/**\r\n * Role Types\r\n */\r\nexports.RoleType = {\r\n    Administrator: 5,\r\n    Contributor: 3,\r\n    Editor: 6,\r\n    Guest: 1,\r\n    None: 0,\r\n    Reader: 2,\r\n    WebDesigner: 4\r\n};\r\n/**\r\n * Status Pri Color\r\n */\r\nexports.StatusPriColor = {\r\n    Blue: \"blue\",\r\n    Green: \"green\",\r\n    Red: \"red\",\r\n    Yellow: \"yellow\"\r\n};\r\n/**\r\n * URL Format Types\r\n */\r\nexports.UrlFormatType = { Hyperlink: 0, Image: 1 };\r\n/**\r\n * URL Zones\r\n */\r\nexports.URLZones = { Default: 0, Intranet: 1, Internet: 2, Custom: 3, Extranet: 4 };\r\n/**\r\n * User Custom Action Registration Types\r\n */\r\nexports.UserCustomActionRegistrationType = { None: 0, List: 1, ContentType: 2, ProgId: 3, FileType: 4 };\r\n/**\r\n * View Types\r\n */\r\nexports.ViewType = {\r\n    Calendar: 524288,\r\n    Chart: 131072,\r\n    Gantt: 67108864,\r\n    Grid: 2048,\r\n    Html: 1,\r\n    Recurrence: 8193\r\n};\r\n//# sourceMappingURL=sptypes.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/sptypes.js\n// module id = 883\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ComplexTypes = require(\"./complexTypes\");\r\nexports.ComplexTypes = ComplexTypes;\r\nvar Results = require(\"./results\");\r\nexports.Results = Results;\r\nvar SPTypes = require(\"./sptypes\");\r\nexports.SPTypes = SPTypes;\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/types/index.js\n// module id = 884\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=complexTypes.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/types/complexTypes.js\n// module id = 885\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=results.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/types/results.js\n// module id = 886\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=sptypes.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/mapper/types/sptypes.js\n// module id = 887\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = require(\".\");\r\n/**\r\n * Base Request\r\n */\r\nvar BaseRequest = /** @class */ (function (_super) {\r\n    __extends(BaseRequest, _super);\r\n    function BaseRequest() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    // Method to execute a method\r\n    BaseRequest.prototype.executeMethod = function (methodName, methodConfig, args) {\r\n        var targetInfo = null;\r\n        // See if the metadata is defined for the base object\r\n        var metadata = this[\"d\"] ? this[\"d\"].__metadata : this[\"__metadata\"];\r\n        if (metadata && metadata.uri) {\r\n            // Create the target information and use the url defined for the base object\r\n            targetInfo = {\r\n                url: metadata.uri\r\n            };\r\n            // See if we are inheriting the metadata type\r\n            if (methodConfig.inheritMetadataType) {\r\n                // Copy the metadata type\r\n                methodConfig.metadataType = metadata.type;\r\n            }\r\n            // Update the metadata uri\r\n            this.updateMetadataUri(metadata, targetInfo);\r\n        }\r\n        else {\r\n            // Copy the target information\r\n            targetInfo = Object.create(this.targetInfo);\r\n        }\r\n        // Get the method information\r\n        var methodInfo = new _1.MethodInfo(methodName, methodConfig, args);\r\n        // Update the target information\r\n        targetInfo.bufferFl = methodConfig.requestType == _1.RequestType.GetBuffer;\r\n        targetInfo.data = methodInfo.body;\r\n        targetInfo.defaultToWebFl = typeof (targetInfo.defaultToWebFl) === \"undefined\" && this.base ? this.base.targetInfo.defaultToWebFl : targetInfo.defaultToWebFl;\r\n        targetInfo.method = methodInfo.requestMethod;\r\n        // See if we are replacing the endpoint\r\n        if (methodInfo.replaceEndpointFl) {\r\n            // Replace the endpoint\r\n            targetInfo.endpoint = methodInfo.url;\r\n        }\r\n        else if (methodInfo.url && methodInfo.url.length > 0) {\r\n            // Ensure the end point exists\r\n            targetInfo.endpoint = targetInfo.endpoint ? targetInfo.endpoint : \"\";\r\n            // See if the endpoint exists, and the method is not a query string\r\n            if (targetInfo.endpoint && methodInfo.url && methodInfo.url.indexOf(\"?\") != 0) {\r\n                // Add a \"/\" separator to the url\r\n                targetInfo.endpoint += \"/\";\r\n            }\r\n            // Append the url\r\n            targetInfo.endpoint += methodInfo.url;\r\n        }\r\n        // Create a new object\r\n        var obj = new _1.Base(targetInfo);\r\n        // Set the properties\r\n        obj.base = this.base ? this.base : this;\r\n        obj.getAllItemsFl = methodInfo.getAllItemsFl;\r\n        obj.parent = this;\r\n        obj.requestType = methodConfig.requestType;\r\n        // Ensure the return type exists\r\n        if (methodConfig.returnType) {\r\n            // Add the methods\r\n            this.addMethods(obj, { __metadata: { type: methodConfig.returnType } });\r\n        }\r\n        // Return the object\r\n        return obj;\r\n    };\r\n    // Method to execute the request\r\n    BaseRequest.prototype.executeRequest = function (asyncFl, callback) {\r\n        var _this = this;\r\n        var isBatchRequest = this.base && this.base.batchRequests && this.base.batchRequests.length > 0;\r\n        var targetInfo = isBatchRequest ? _1.Batch.getTargetInfo(this.base.batchRequests) : new _1.TargetInfo(this.targetInfo);\r\n        // See if this is an asynchronous request\r\n        if (asyncFl) {\r\n            // See if the not a batch request, and it already exists\r\n            if (this.xhr && !isBatchRequest) {\r\n                // Execute the callback\r\n                callback ? callback(this) : null;\r\n            }\r\n            else {\r\n                // Create the request\r\n                this.xhr = new _1.XHRRequest(asyncFl, targetInfo, function () {\r\n                    // Update the response and status\r\n                    _this.response = _this.xhr.response;\r\n                    _this.status = _this.xhr.status;\r\n                    // See if we are returning a file buffer\r\n                    if (_this.requestType == _1.RequestType.GetBuffer) {\r\n                        // Execute the callback\r\n                        callback ? callback(_this.response) : null;\r\n                    }\r\n                    else {\r\n                        // Update the data object\r\n                        _this.updateDataObject(isBatchRequest);\r\n                        // Validate the data collection\r\n                        isBatchRequest ? null : _this.validateDataCollectionResults().then(function () {\r\n                            // Execute the callback\r\n                            callback ? callback(_this) : null;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (this.xhr) {\r\n            return this;\r\n        }\r\n        else {\r\n            // Create the request\r\n            this.xhr = new _1.XHRRequest(asyncFl, targetInfo);\r\n            // Update the response and status\r\n            this.response = this.xhr.response;\r\n            this.status = this.xhr.status;\r\n            // See if we are returning a file buffer\r\n            if (this.requestType == _1.RequestType.GetBuffer) {\r\n                // Return the response\r\n                return this.response;\r\n            }\r\n            // Update the base object\r\n            this.updateDataObject(isBatchRequest);\r\n            // See if the base is a collection and has more results\r\n            if (this[\"d\"] && this[\"d\"].__next) {\r\n                // Add the \"next\" method to get the next set of results\r\n                this[\"next\"] = new Function(\"return this.getNextSetOfResults();\");\r\n            }\r\n            // Return the base object\r\n            return this;\r\n        }\r\n    };\r\n    // Method to return a collection\r\n    BaseRequest.prototype.getCollection = function (method, args) {\r\n        // Copy the target information\r\n        var targetInfo = Object.create(this.targetInfo);\r\n        // Clear the target information properties from any previous requests\r\n        targetInfo.data = null;\r\n        targetInfo.method = null;\r\n        // See if the metadata is defined for the base object\r\n        var metadata = this[\"d\"] ? this[\"d\"].__metadata : this[\"__metadata\"];\r\n        if (metadata && metadata.uri) {\r\n            // Update the url of the target information\r\n            targetInfo.url = metadata.uri;\r\n            // Update the metadata uri\r\n            this.updateMetadataUri(metadata, targetInfo);\r\n            // Set the endpoint\r\n            targetInfo.endpoint = method;\r\n        }\r\n        else {\r\n            // Append the method to the endpoint\r\n            targetInfo.endpoint += \"/\" + method;\r\n        }\r\n        // Update the callback\r\n        targetInfo.callback = args && typeof (args[0]) === \"function\" ? args[0] : null;\r\n        // Create a new object\r\n        var obj = new _1.Base(targetInfo);\r\n        // Set the properties\r\n        obj.base = this.base ? this.base : this;\r\n        obj.parent = this;\r\n        // Return the object\r\n        return obj;\r\n    };\r\n    // Method to get the next set of results\r\n    BaseRequest.prototype.getNextSetOfResults = function () {\r\n        // Create the target information to query the next set of results\r\n        var targetInfo = Object.create(this.targetInfo);\r\n        targetInfo.endpoint = \"\";\r\n        targetInfo.url = this[\"d\"].__next;\r\n        // Create a new object\r\n        var obj = new _1.Base(targetInfo);\r\n        // Set the properties\r\n        obj.base = this.base ? this.base : this;\r\n        obj.parent = this;\r\n        // Return the object\r\n        return obj;\r\n    };\r\n    // Method to return a property of the base object\r\n    BaseRequest.prototype.getProperty = function (propertyName, requestType) {\r\n        // Copy the target information\r\n        var targetInfo = Object.create(this.targetInfo);\r\n        // Clear the target information properties from any previous requests\r\n        targetInfo.data = null;\r\n        targetInfo.method = null;\r\n        // See if the metadata is defined for the base object\r\n        var metadata = this[\"d\"] ? this[\"d\"].__metadata : this[\"__metadata\"];\r\n        if (metadata && metadata.uri) {\r\n            // Update the url of the target information\r\n            targetInfo.url = metadata.uri;\r\n            // Update the metadata uri\r\n            this.updateMetadataUri(metadata, targetInfo);\r\n            // Set the endpoint\r\n            targetInfo.endpoint = propertyName;\r\n        }\r\n        else {\r\n            // Append the property name to the endpoint\r\n            targetInfo.endpoint += \"/\" + propertyName;\r\n        }\r\n        // Create a new object\r\n        var obj = new _1.Base(targetInfo);\r\n        // Set the properties\r\n        obj.base = this.base ? this.base : this;\r\n        obj.parent = this;\r\n        // Add the methods\r\n        requestType ? this.addMethods(obj, { __metadata: { type: requestType } }) : null;\r\n        // Return the object\r\n        return obj;\r\n    };\r\n    // Method to update the metadata uri\r\n    BaseRequest.prototype.updateMetadataUri = function (metadata, targetInfo) {\r\n        // See if this is a field\r\n        if (/^SP.Field/.test(metadata.type) || /^SP\\..*Field$/.test(metadata.type)) {\r\n            // Fix the url reference\r\n            targetInfo.url = targetInfo.url.replace(/AvailableFields/, \"fields\");\r\n        }\r\n        else if (/SP.EventReceiverDefinition/.test(metadata.type)) {\r\n            // Fix the url reference\r\n            targetInfo.url = targetInfo.url.replace(/\\/EventReceiver\\//, \"/EventReceivers/\");\r\n        }\r\n        else if (/Microsoft.SharePoint.Marketplace.CorporateCuratedGallery.CorporateCatalogAppMetadata/.test(targetInfo.url)) {\r\n            // Fix the url reference\r\n            targetInfo.url = targetInfo.url.split(\"Microsoft.SharePoint.Marketplace.CorporateCuratedGallery.CorporateCatalogAppMetadata\")[0] + \"web/tenantappcatalog/availableapps/getbyid('\" + this[\"ID\"] + \"')\";\r\n        }\r\n    };\r\n    // Method to validate the data collection results\r\n    BaseRequest.prototype.validateDataCollectionResults = function () {\r\n        var _this = this;\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var request = function (xhr, resolve) {\r\n                // Validate the response\r\n                if (xhr && xhr.status < 400 && typeof (xhr.response) === \"string\" && xhr.response.length > 0) {\r\n                    // Convert the response and ensure the data property exists\r\n                    var data = JSON.parse(xhr.response);\r\n                    // See if there are more items to get\r\n                    if (data.d && data.d.__next) {\r\n                        // See if we are getting all items in the base request\r\n                        if (_this.getAllItemsFl) {\r\n                            // Create the target information to query the next set of results\r\n                            var targetInfo = Object.create(_this.targetInfo);\r\n                            targetInfo.endpoint = \"\";\r\n                            targetInfo.url = data.d.__next;\r\n                            // Create a new object\r\n                            new _1.XHRRequest(true, new _1.TargetInfo(targetInfo), function (xhr) {\r\n                                // Convert the response and ensure the data property exists\r\n                                var data = JSON.parse(xhr.response);\r\n                                if (data.d) {\r\n                                    // Update the data collection\r\n                                    _this.updateDataCollection(_this, data.d.results);\r\n                                    // Append the raw data results\r\n                                    _this[\"d\"].results = _this[\"d\"].results.concat(data.d.results);\r\n                                    // Validate the data collection\r\n                                    request(xhr, resolve);\r\n                                }\r\n                                // Resolve the promise\r\n                                resolve();\r\n                            });\r\n                        }\r\n                        else {\r\n                            // Add a method to get the next set of results\r\n                            _this[\"next\"] = new Function(\"return this.getNextSetOfResults();\");\r\n                            // Resolve the promise\r\n                            resolve();\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Resolve the promise\r\n                        resolve();\r\n                    }\r\n                }\r\n                else {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                }\r\n            };\r\n            // Execute the request\r\n            request(_this.xhr, resolve);\r\n        });\r\n    };\r\n    return BaseRequest;\r\n}(_1.BaseHelper));\r\nexports.BaseRequest = BaseRequest;\r\n//# sourceMappingURL=baseRequest.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/baseRequest.js\n// module id = 888\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\nvar _1 = require(\".\");\r\n/**\r\n * Base Execution\r\n */\r\nvar BaseExecution = /** @class */ (function (_super) {\r\n    __extends(BaseExecution, _super);\r\n    function BaseExecution() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    // Method to execute this request as a batch request\r\n    BaseExecution.prototype.batch = function (arg) {\r\n        var callback = null;\r\n        var appendFl = false;\r\n        // See if the input is a boolean\r\n        if (typeof (arg) === \"boolean\") {\r\n            // Set the flag\r\n            appendFl = arg;\r\n        }\r\n        else {\r\n            // Set the callback\r\n            callback = arg;\r\n        }\r\n        // Set the base\r\n        this.base = this.base ? this.base : this;\r\n        // See if we are appending this request\r\n        if (appendFl && this.base.batchRequests) {\r\n            // Append the request\r\n            this.base.batchRequests[this.base.batchRequests.length - 1].push({\r\n                targetInfo: new _1.TargetInfo(this.targetInfo)\r\n            });\r\n        }\r\n        else {\r\n            // Ensure the batch requests exist\r\n            this.base.batchRequests = this.base.batchRequests || [];\r\n            // Create the request\r\n            this.base.batchRequests.push([{\r\n                    callback: callback,\r\n                    targetInfo: new _1.TargetInfo(this.targetInfo)\r\n                }]);\r\n        }\r\n        // Return this object\r\n        return this;\r\n    };\r\n    // Method to execute the request\r\n    BaseExecution.prototype.execute = function () {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var callback = null;\r\n        var waitFl = false;\r\n        // Set the callback and wait flag\r\n        switch (args.length) {\r\n            case 1:\r\n                callback = typeof (args[0]) === \"boolean\" ? callback : args[0];\r\n                waitFl = typeof (args[0]) === \"boolean\" ? args[0] : waitFl;\r\n                break;\r\n            case 2:\r\n                callback = args[0];\r\n                waitFl = args[1];\r\n                break;\r\n        }\r\n        // Set the base\r\n        this.base = this.base ? this.base : this;\r\n        // Set the response index\r\n        this.responseIndex = this.base.responses.length;\r\n        // Add this object to the responses\r\n        this.base.responses.push(this);\r\n        // See if we are waiting for the responses to complete\r\n        if (waitFl) {\r\n            // Wait for the responses to execute\r\n            this.waitForRequestsToComplete(function () {\r\n                // Execute this request\r\n                _this.executeRequest(true, function (response) {\r\n                    // See if there is a callback\r\n                    if (callback) {\r\n                        // Set the base to this object, and clear requests\r\n                        // This will ensure requests from this object do not conflict w/ this request\r\n                        _this.base = _this;\r\n                        _this.base.responses = [];\r\n                        // Execute the callback and see if it returns a promise\r\n                        var returnVal = callback(response);\r\n                        var waitFunc = returnVal ? returnVal.done || returnVal.then : null;\r\n                        if (waitFunc && typeof (waitFunc) === \"function\") {\r\n                            // Wait for the promise to complete\r\n                            waitFunc(function () {\r\n                                // Reset the base\r\n                                _this.base = _this.parent.base;\r\n                                // Set the wait flag\r\n                                _this.base.waitFlags[_this.responseIndex] = true;\r\n                            });\r\n                            // Wait for the promise to complete\r\n                            return;\r\n                        }\r\n                        // Reset the base\r\n                        _this.base = _this.parent.base;\r\n                    }\r\n                    // Set the wait flag\r\n                    _this.base.waitFlags[_this.responseIndex] = true;\r\n                });\r\n            }, this.responseIndex);\r\n        }\r\n        else {\r\n            // Execute this request\r\n            this.executeRequest(true, function (response) {\r\n                // Execute the callback and see if it returns a promise\r\n                var returnVal = callback ? callback(response) : null;\r\n                if (returnVal && typeof (returnVal.done) === \"function\") {\r\n                    // Wait for the promise to complete\r\n                    returnVal.done(function () {\r\n                        // Set the wait flag\r\n                        _this.base.waitFlags[_this.responseIndex] = true;\r\n                    });\r\n                }\r\n                else {\r\n                    // Set the wait flag\r\n                    _this.base.waitFlags[_this.responseIndex] = true;\r\n                }\r\n            });\r\n        }\r\n        // Return this object\r\n        return this;\r\n    };\r\n    // Method to execute the request synchronously\r\n    BaseExecution.prototype.executeAndWait = function () { return this.executeRequest(false); };\r\n    // Method to wait for the parent requests to complete\r\n    BaseExecution.prototype.waitForRequestsToComplete = function (callback, requestIdx) {\r\n        var _this = this;\r\n        // Loop until the requests have completed\r\n        var intervalId = lib_1.ContextInfo.window.setInterval(function () {\r\n            var counter = 0;\r\n            // Parse the responses to the requests\r\n            for (var i = 0; i < _this.base.responses.length; i++) {\r\n                var response = _this.base.responses[i];\r\n                // See if we are waiting until a specified index\r\n                if (requestIdx == counter++) {\r\n                    break;\r\n                }\r\n                // Return if the request hasn't completed\r\n                if (response.xhr == null || !response.xhr.completedFl) {\r\n                    return;\r\n                }\r\n                // Ensure the wait flag is set for the previous request\r\n                if (counter > 0 && _this.base.waitFlags[counter - 1] != true) {\r\n                    return;\r\n                }\r\n            }\r\n            // Clear the interval\r\n            lib_1.ContextInfo.window.clearInterval(intervalId);\r\n            // Execute the callback\r\n            callback();\r\n        }, 10);\r\n    };\r\n    return BaseExecution;\r\n}(_1.BaseRequest));\r\nexports.BaseExecution = BaseExecution;\r\n//# sourceMappingURL=baseExecution.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/baseExecution.js\n// module id = 889\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = require(\".\");\r\n/*********************************************************************************************************************************/\r\n// Base\r\n// This is the base class for all objects.\r\n/*********************************************************************************************************************************/\r\nvar Base = /** @class */ (function (_super) {\r\n    __extends(Base, _super);\r\n    /**\r\n     * Constructor\r\n     * @param targetInfo - The target information.\r\n     */\r\n    function Base(targetInfo) {\r\n        var _this = _super.call(this) || this;\r\n        // Default the properties\r\n        _this.targetInfo = Object.create(targetInfo || {});\r\n        _this.responses = [];\r\n        _this.requestType = 0;\r\n        _this.waitFlags = [];\r\n        return _this;\r\n    }\r\n    // Method to wait for the requests to complete\r\n    Base.prototype.done = function (resolve) {\r\n        var _this = this;\r\n        // Ensure the base is set\r\n        this.base = this.base ? this.base : this;\r\n        // Ensure the response index is set\r\n        this.responseIndex = this.responseIndex >= 0 ? this.responseIndex : 0;\r\n        // Wait for the responses to execute\r\n        this.waitForRequestsToComplete(function () {\r\n            var responses = _this.base.responses;\r\n            // Clear the responses\r\n            _this.base.responses = [];\r\n            // Clear the wait flags\r\n            _this.base.waitFlags = [];\r\n            // Resolve the request\r\n            resolve ? resolve.apply(_this, responses) : null;\r\n        });\r\n    };\r\n    // Method to get the request information\r\n    Base.prototype.getInfo = function () { return (new _1.TargetInfo(this.targetInfo)).requestInfo; };\r\n    // Method to stringify the object\r\n    Base.prototype.stringify = function () {\r\n        // Stringify the object\r\n        return JSON.stringify({\r\n            response: this.response,\r\n            status: this.status,\r\n            targetInfo: this.targetInfo\r\n        });\r\n    };\r\n    return Base;\r\n}(_1.BaseExecution));\r\nexports.Base = Base;\r\n//# sourceMappingURL=base.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/base.js\n// module id = 890\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\nvar _1 = require(\".\");\r\n/**\r\n * Batch Requests\r\n */\r\nvar Batch = /** @class */ (function () {\r\n    function Batch() {\r\n    }\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to generate a batch request\r\n    Batch.getTargetInfo = function (requests) {\r\n        var batchId = \"batch_\" + lib_1.ContextInfo.generateGUID();\r\n        var batchRequests = [];\r\n        // Parse the requests\r\n        for (var i = 0; i < requests.length; i++) {\r\n            // Create the batch request\r\n            batchRequests.push(this.createBatch(batchId, requests[i]));\r\n        }\r\n        // End the batch request\r\n        batchRequests.push(\"--\" + batchId + \"--\");\r\n        // Return the target info\r\n        return new _1.TargetInfo({\r\n            endpoint: \"$batch\",\r\n            method: \"POST\",\r\n            data: batchRequests.join(\"\\r\\n\"),\r\n            requestHeader: {\r\n                \"Content-Type\": 'multipart/mixed; boundary=\"' + batchId + '\"'\r\n            }\r\n        });\r\n    };\r\n    // Method to generate a batch request\r\n    Batch.createBatch = function (batchId, requests) {\r\n        // Create the batch request\r\n        var batch = [\"--\" + batchId];\r\n        // Determine if the batch requires a change set\r\n        var requiresChangeset = requests[0] && requests[0].targetInfo.requestMethod != \"GET\";\r\n        if (requiresChangeset) {\r\n            var changesets = [];\r\n            var changesetId = \"changeset_\" + lib_1.ContextInfo.generateGUID();\r\n            // Parse the requests\r\n            for (var i = 0; i < requests.length; i++) {\r\n                var request = [];\r\n                var targetInfo = requests[i].targetInfo;\r\n                // Create a change set\r\n                request.push(\"--\" + changesetId);\r\n                request.push(\"Content-Type: application/http\");\r\n                request.push(\"Content-Transfer-Encoding: binary\");\r\n                request.push(\"\");\r\n                request.push(\"POST \" + targetInfo.requestUrl + \" HTTP/1.1\");\r\n                request.push(\"Content-Type: application/json;odata=verbose\");\r\n                request.push(\"\");\r\n                targetInfo.requestData ? request.push(targetInfo.requestData) : null;\r\n                request.push(\"\");\r\n                // Add the request to the change set\r\n                changesets.push(request.join(\"\\r\\n\"));\r\n            }\r\n            // End the change set\r\n            changesets.push(\"--\" + changesetId + \"--\");\r\n            // Generate the change set\r\n            var changeset = changesets.join(\"\\r\\n\");\r\n            // Add the change set information to the batch\r\n            batch.push(\"Content-Type: multipart/mixed; boundary=\" + changesetId);\r\n            batch.push(\"Content-Length: \" + changeset.length);\r\n            batch.push(\"Content-Transfer-Encoding: binary\");\r\n            batch.push(\"\");\r\n            batch.push(changeset);\r\n            batch.push(\"\");\r\n        }\r\n        else if (requests[0]) {\r\n            var targetInfo = requests[0].targetInfo;\r\n            // Add the request to the batch\r\n            batch.push(\"Content-Type: application/http\");\r\n            batch.push(\"Content-Transfer-Encoding: binary\");\r\n            batch.push(\"\");\r\n            batch.push(\"GET \" + targetInfo.requestUrl + \" HTTP/1.1\");\r\n            batch.push(\"Accept: application/json;odata=verbose\");\r\n            batch.push(\"\");\r\n            targetInfo.requestData ? batch.push(targetInfo.requestData) : null;\r\n            batch.push(\"\");\r\n        }\r\n        // Return the batch request\r\n        return batch.join(\"\\r\\n\");\r\n    };\r\n    return Batch;\r\n}());\r\nexports.Batch = Batch;\r\n//# sourceMappingURL=batch.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/batch.js\n// module id = 891\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _1 = require(\".\");\r\n/*********************************************************************************************************************************/\r\n// Method Information\r\n// This class will create the method information for the request.\r\n/*********************************************************************************************************************************/\r\nvar MethodInfo = /** @class */ (function () {\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function MethodInfo(methodName, methodInfo, args) {\r\n        // Default the properties\r\n        this.methodInfo = methodInfo;\r\n        this.methodInfo.argValues = args;\r\n        this.methodInfo.name = typeof (this.methodInfo.name) === \"string\" ? this.methodInfo.name : methodName;\r\n        // Generate the parameters\r\n        this.generateParams();\r\n        // Generate the url\r\n        this.methodUrl = this.generateUrl();\r\n    }\r\n    Object.defineProperty(MethodInfo.prototype, \"body\", {\r\n        /*********************************************************************************************************************************/\r\n        // Public Properties\r\n        /*********************************************************************************************************************************/\r\n        // The data passed through the body of the request\r\n        get: function () { return this.methodData; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"getAllItemsFl\", {\r\n        // Flag to determine if we are getting all items\r\n        get: function () { return this.methodInfo.getAllItemsFl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"replaceEndpointFl\", {\r\n        // Flag to determine if this method replaces the endpoint\r\n        get: function () { return this.methodInfo.replaceEndpointFl ? true : false; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"requestMethod\", {\r\n        // The request method\r\n        get: function () {\r\n            // Return the request method if it exists\r\n            if (typeof (this.methodInfo.requestMethod) === \"string\") {\r\n                return this.methodInfo.requestMethod;\r\n            }\r\n            // Determine the request method, based on the request type\r\n            switch (this.methodInfo.requestType) {\r\n                case _1.RequestType.Delete:\r\n                case _1.RequestType.Post:\r\n                case _1.RequestType.PostWithArgs:\r\n                case _1.RequestType.PostWithArgsInBody:\r\n                case _1.RequestType.PostWithArgsInQS:\r\n                case _1.RequestType.PostWithArgsValueOnly:\r\n                case _1.RequestType.PostReplace:\r\n                    return \"POST\";\r\n                default:\r\n                    return \"GET\";\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"url\", {\r\n        // The url of the method and parameters\r\n        get: function () { return this.methodUrl; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"passDataInBody\", {\r\n        /*********************************************************************************************************************************/\r\n        // Private Variables\r\n        /*********************************************************************************************************************************/\r\n        get: function () { return this.methodInfo.requestType == _1.RequestType.GetWithArgsInBody || this.methodInfo.requestType == _1.RequestType.PostWithArgsInBody; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"passDataInQS\", {\r\n        get: function () { return this.methodInfo.requestType == _1.RequestType.GetWithArgsInQS || this.methodInfo.requestType == _1.RequestType.PostWithArgsInQS; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"isTemplate\", {\r\n        get: function () { return this.methodInfo.data ? true : false; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MethodInfo.prototype, \"replace\", {\r\n        get: function () { return this.methodInfo.requestType == _1.RequestType.GetReplace || this.methodInfo.requestType == _1.RequestType.PostReplace; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*********************************************************************************************************************************/\r\n    // Private Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to generate the method input parameters\r\n    MethodInfo.prototype.generateParams = function () {\r\n        var params = {};\r\n        // Ensure values exist\r\n        if (this.methodInfo.argValues == null) {\r\n            return;\r\n        }\r\n        // See if the argument names exist\r\n        if (this.methodInfo.argNames) {\r\n            // Parse the argument names\r\n            for (var i = 0; i < this.methodInfo.argNames.length && i < this.methodInfo.argValues.length; i++) {\r\n                var name_1 = this.methodInfo.argNames[i];\r\n                var value = this.methodInfo.argValues[i];\r\n                // Copy the parameter value\r\n                switch (typeof (this.methodInfo.argValues[i])) {\r\n                    case \"boolean\":\r\n                        params[name_1] = this.methodInfo.argValues[i] ? \"true\" : \"false\";\r\n                        break;\r\n                    case \"number\":\r\n                        params[name_1] = this.methodInfo.argValues[i];\r\n                        break;\r\n                    //case \"string\":\r\n                    //params[name] = this.isTemplate || this.replace ? value : \"'\" + value + \"'\";\r\n                    //break;\r\n                    default:\r\n                        params[name_1] = value;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        // See if the method has parameters\r\n        var isEmpty = true;\r\n        for (var k in params) {\r\n            isEmpty = false;\r\n            break;\r\n        }\r\n        this.methodParams = isEmpty ? null : params;\r\n        // See if method parameters exist\r\n        if (this.methodParams) {\r\n            // See if a template is defined for the method data\r\n            if (this.isTemplate) {\r\n                // Ensure the object is a string\r\n                if (typeof (this.methodInfo.data) !== \"string\") {\r\n                    // Stringify the object\r\n                    this.methodInfo.data = JSON.stringify(this.methodInfo.data);\r\n                }\r\n                // Parse the arguments\r\n                for (var key in this.methodParams) {\r\n                    // Replace the argument in the template\r\n                    this.methodInfo.data = this.methodInfo.data.replace(\"[[\" + key + \"]]\", this.methodParams[key].replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\"));\r\n                }\r\n                // Set the method data\r\n                this.methodData = JSON.parse(this.methodInfo.data);\r\n            }\r\n        }\r\n        // See if argument values exist\r\n        if (this.methodInfo.argValues && this.methodInfo.argValues.length > 0) {\r\n            // See if argument names exist\r\n            if (this.methodInfo.argNames == null) {\r\n                // Set the method data to first argument value\r\n                this.methodData = this.methodInfo.argValues[0];\r\n            }\r\n            else if (this.methodInfo.argValues.length > this.methodInfo.argNames.length) {\r\n                // Set the method data to the next available argument value\r\n                this.methodData = this.methodInfo.argValues[this.methodInfo.argNames.length];\r\n            }\r\n        }\r\n        // See if the metadata type exists\r\n        if (this.methodInfo.metadataType) {\r\n            // See if parameters exist\r\n            if (this.methodInfo.argNames) {\r\n                // Append the metadata to the first parameter, if it doesn't exist\r\n                (this.methodData || this.methodParams)[this.methodInfo.argNames[0]][\"__metadata\"] =\r\n                    (this.methodData || this.methodParams)[this.methodInfo.argNames[0]][\"__metadata\"] || { \"type\": this.methodInfo.metadataType };\r\n            }\r\n            else {\r\n                // Append the metadata to the parameters, if it doesn't exist\r\n                (this.methodData || this.methodParams)[\"__metadata\"] =\r\n                    (this.methodData || this.methodParams)[\"__metadata\"] || { \"type\": this.methodInfo.metadataType };\r\n            }\r\n        }\r\n    };\r\n    // Method to generate the method and parameters as a url\r\n    MethodInfo.prototype.generateUrl = function () {\r\n        var url = this.methodInfo.name;\r\n        // See if we are deleting the object\r\n        if (this.methodInfo.requestType == _1.RequestType.Delete) {\r\n            // Update the url\r\n            url = \"deleteObject\";\r\n        }\r\n        // See if we are passing the data in the body\r\n        if (this.passDataInBody) {\r\n            var data = this.methodData || this.methodParams;\r\n            // Stringify the data to be passed in the body\r\n            this.methodData = JSON.stringify(data);\r\n        }\r\n        // See if we are passing the data in the query string\r\n        if (this.passDataInQS) {\r\n            var data = this.methodParams || this.methodData;\r\n            // Append the parameters in the query string\r\n            url += \"(@v)?@v=\" + (typeof (data) === \"string\" ? \"'\" + encodeURIComponent(data) + \"'\" : JSON.stringify(data));\r\n        }\r\n        // See if we are replacing the arguments\r\n        if (this.replace) {\r\n            // Parse the arguments\r\n            for (var key in this.methodParams) {\r\n                // Replace the argument in the url\r\n                url = url.replace(\"[[\" + key + \"]]\", encodeURIComponent(this.methodParams[key]));\r\n            }\r\n        }\r\n        else if (this.methodInfo.requestType == _1.RequestType.OData) {\r\n            var oData = new _1.OData(this.methodParams[\"oData\"]);\r\n            // Update the url\r\n            url = \"?\" + oData.QueryString;\r\n            // Set the get all items Flag\r\n            this.methodInfo.getAllItemsFl = oData.GetAllItems;\r\n        }\r\n        else if (!this.passDataInBody && !this.passDataInQS) {\r\n            var params = \"\";\r\n            // Ensure data exists\r\n            var data = this.methodParams || this.methodData;\r\n            if (data) {\r\n                // Ensure the data is an object\r\n                data = data && typeof (data) === \"object\" ? data : { value: data };\r\n                // Parse the parameters\r\n                for (var name_2 in data) {\r\n                    var value = data[name_2];\r\n                    value = typeof (value) === \"string\" ? \"'\" + value + \"'\" : value;\r\n                    switch (this.methodInfo.requestType) {\r\n                        // Append the value only\r\n                        case _1.RequestType.GetWithArgsValueOnly:\r\n                        case _1.RequestType.PostWithArgsValueOnly:\r\n                            params += value + \", \";\r\n                            break;\r\n                        // Append the parameter and value\r\n                        default:\r\n                            params += name_2 + \"=\" + value + \", \";\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            // Set the url\r\n            url += params.length > 0 ? \"(\" + params.replace(/, $/, \"\") + \")\" : \"\";\r\n        }\r\n        // Return the url\r\n        return url;\r\n    };\r\n    return MethodInfo;\r\n}());\r\nexports.MethodInfo = MethodInfo;\r\n//# sourceMappingURL=methodInfo.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/methodInfo.js\n// module id = 892\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * OData\r\n */\r\nvar OData = /** @class */ (function () {\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    // The class constructor\r\n    function OData(oData) {\r\n        // Default the Variables\r\n        this._custom = oData && oData.Custom ? oData.Custom : null;\r\n        this._expand = oData && oData.Expand ? oData.Expand : [];\r\n        this._filter = oData && oData.Filter ? oData.Filter : null;\r\n        this._getAllItems = oData && oData.GetAllItems ? oData.GetAllItems : false;\r\n        this._orderBy = oData && oData.OrderBy ? oData.OrderBy : [];\r\n        this._select = oData && oData.Select ? oData.Select : [];\r\n        this._skip = oData && oData.Skip ? oData.Skip : null;\r\n        this._top = oData && oData.Top ? oData.Top : null;\r\n    }\r\n    Object.defineProperty(OData.prototype, \"Custom\", {\r\n        /*********************************************************************************************************************************/\r\n        // Properties\r\n        /*********************************************************************************************************************************/\r\n        // Custom\r\n        get: function () { return this._custom; },\r\n        set: function (value) { this._custom = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Expand\", {\r\n        // Expand\r\n        get: function () { return this._expand; },\r\n        set: function (value) { this._expand = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Filter\", {\r\n        // Filter\r\n        get: function () { return this._filter; },\r\n        set: function (value) { this._filter = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"GetAllItems\", {\r\n        // Flag to get all items\r\n        get: function () { return this._getAllItems; },\r\n        set: function (value) { this._getAllItems = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"OrderBy\", {\r\n        // Order By\r\n        get: function () { return this._orderBy; },\r\n        set: function (value) { this._orderBy = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"QueryString\", {\r\n        // Query String\r\n        get: function () {\r\n            var qs = \"\";\r\n            var values = [];\r\n            // Get the query string values for the properties\r\n            values.push(this.getQSValue(\"$select\", this._select));\r\n            values.push(this.getQSValue(\"$orderby\", this._orderBy));\r\n            this._top ? values.push(\"$top=\" + this._top) : null;\r\n            this._skip ? values.push(\"$skip=\" + this._skip) : null;\r\n            this._filter ? values.push(\"$filter=\" + this._filter) : null;\r\n            values.push(this.getQSValue(\"$expand\", this._expand));\r\n            this._custom ? values.push(this._custom) : null;\r\n            // Parse the values\r\n            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\r\n                var value = values_1[_i];\r\n                // Ensure a value exists\r\n                if (value && value != \"\") {\r\n                    // Append the query string value\r\n                    qs += (qs == \"\" ? \"\" : \"&\") + value;\r\n                }\r\n            }\r\n            // Return the query string\r\n            return qs;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Select\", {\r\n        // Select\r\n        get: function () { return this._select; },\r\n        set: function (value) { this._select = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Skip\", {\r\n        // Skip\r\n        get: function () { return this._skip; },\r\n        set: function (value) { this._skip = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OData.prototype, \"Top\", {\r\n        // Top\r\n        get: function () { return this._top; },\r\n        set: function (value) { this._top = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to convert the array of strings to a query string value.\r\n    OData.prototype.getQSValue = function (qsKey, keys) {\r\n        // Return the query string\r\n        return keys.length > 0 ? qsKey + \"=\" + keys.join(\",\") : \"\";\r\n    };\r\n    return OData;\r\n}());\r\nexports.OData = OData;\r\n//# sourceMappingURL=oData.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/oData.js\n// module id = 893\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\n/**\r\n * Target Information\r\n */\r\nvar TargetInfo = /** @class */ (function () {\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function TargetInfo(targetInfo) {\r\n        // Default the properties\r\n        this.request = targetInfo || {};\r\n        this.requestData = this.request.data;\r\n        this.requestHeaders = this.request.requestHeader;\r\n        this.requestMethod = this.request.method ? this.request.method : \"GET\";\r\n        // Set the request url\r\n        this.setRequestUrl();\r\n    }\r\n    Object.defineProperty(TargetInfo.prototype, \"isBatchRequest\", {\r\n        // Flag to determine if this is a batch request\r\n        get: function () { return this.request.endpoint == \"$batch\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TargetInfo.prototype, \"requestInfo\", {\r\n        // The request information\r\n        get: function () {\r\n            // Return the request information\r\n            return {\r\n                data: this.requestData,\r\n                method: this.requestMethod,\r\n                url: this.requestUrl\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to get the domain url\r\n    TargetInfo.prototype.getDomainUrl = function () {\r\n        var url = lib_1.ContextInfo.document.location.href;\r\n        // See if this is an app web\r\n        if (lib_1.ContextInfo.isAppWeb) {\r\n            // Set the url to the host url\r\n            url = TargetInfo.getQueryStringValue(\"SPHostUrl\") + \"\";\r\n        }\r\n        // Split the url and validate it\r\n        url = url.split('/');\r\n        if (url && url.length >= 2) {\r\n            // Set the url\r\n            url = url[0] + \"//\" + url[2];\r\n        }\r\n        // Return the url\r\n        return url;\r\n    };\r\n    // Method to get a query string value\r\n    TargetInfo.getQueryStringValue = function (key) {\r\n        // Get the query string\r\n        var queryString = lib_1.ContextInfo.existsFl ? lib_1.ContextInfo.document.location.href.split('?') : [\"\"];\r\n        queryString = queryString.length > 1 ? queryString[1] : queryString[0];\r\n        // Parse the values\r\n        var values = queryString.split('&');\r\n        for (var i = 0; i < values.length; i++) {\r\n            var keyValue = values[i].split('=');\r\n            // Ensure a value exists\r\n            if (keyValue.length == 1) {\r\n                continue;\r\n            }\r\n            // See if this is the key we are looking for\r\n            if (decodeURIComponent(keyValue[0]) == key) {\r\n                return decodeURIComponent(keyValue[1]);\r\n            }\r\n        }\r\n        // Key was not found\r\n        return null;\r\n    };\r\n    // Method to set the request url\r\n    TargetInfo.prototype.setRequestUrl = function () {\r\n        var endpoint = this.request.endpoint ? \"/\" + this.request.endpoint : \"\";\r\n        var hostUrl = TargetInfo.getQueryStringValue(\"SPHostUrl\");\r\n        var qs = (endpoint.indexOf(\"?\") === -1 ? \"?\" : \"&\") + \"@target='{{Target}}'\";\r\n        var template = \"{{Url}}/_api/{{EndPoint}}{{TargetUrl}}\";\r\n        // See if we are defaulting the url for the app web\r\n        if (lib_1.ContextInfo.existsFl && lib_1.ContextInfo.window.$REST.DefaultRequestToHostFl && lib_1.ContextInfo.isAppWeb && !this.request.overrideDefaultRequestToHostFl && this.request.url == null) {\r\n            // Default the url to the host web\r\n            this.request.url = hostUrl;\r\n        }\r\n        // Ensure the url exists\r\n        if (this.request.url == null) {\r\n            // Default the url to the current site/web url\r\n            this.request.url = this.request.defaultToWebFl == false ? lib_1.ContextInfo.siteAbsoluteUrl : lib_1.ContextInfo.webAbsoluteUrl;\r\n        }\r\n        else if (/\\/_api\\//.test(this.request.url)) {\r\n            // Get the url\r\n            var url = this.request.url.toLowerCase().split(\"/_api/\");\r\n            // See if this is the app web and we are executing against a different web\r\n            if (lib_1.ContextInfo.isAppWeb && url[0] != lib_1.ContextInfo.webAbsoluteUrl.toLowerCase()) {\r\n                // Set the request url\r\n                this.requestUrl = lib_1.ContextInfo.webAbsoluteUrl + \"/_api/SP.AppContextSite(@target)/\" +\r\n                    url[1] + endpoint + qs.replace(/{{Target}}/g, url[0]);\r\n            }\r\n            else {\r\n                // Set the request url\r\n                this.requestUrl = this.request.url + (this.request.endpoint ? \"/\" + this.request.endpoint : \"\");\r\n            }\r\n            return;\r\n        }\r\n        // See if this is a relative url\r\n        if (this.request.url.indexOf(\"http\") != 0) {\r\n            // Add the domain\r\n            this.request.url = this.getDomainUrl() + this.request.url;\r\n        }\r\n        // See if this is the app web, and we are executing against a different web\r\n        if (lib_1.ContextInfo.isAppWeb && this.request.url != lib_1.ContextInfo.webAbsoluteUrl) {\r\n            // Set the request url\r\n            this.requestUrl = template\r\n                .replace(/{{Url}}/g, lib_1.ContextInfo.webAbsoluteUrl)\r\n                .replace(/{{EndPoint}}/g, \"SP.AppContextSite(@target)\" + endpoint)\r\n                .replace(/{{TargetUrl}}/g, qs.replace(/{{Target}}/g, this.request.url));\r\n        }\r\n        else {\r\n            // Set the request url\r\n            this.requestUrl = template\r\n                .replace(/{{Url}}/g, this.request.url)\r\n                .replace(/{{EndPoint}}/g, this.request.endpoint)\r\n                .replace(/{{TargetUrl}}/g, \"\");\r\n        }\r\n    };\r\n    return TargetInfo;\r\n}());\r\nexports.TargetInfo = TargetInfo;\r\n//# sourceMappingURL=targetInfo.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/targetInfo.js\n// module id = 894\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\n/**\r\n * XML HTTP Request Class\r\n */\r\nvar XHRRequest = /** @class */ (function () {\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function XHRRequest(asyncFl, targetInfo, callback) {\r\n        // Default the properties\r\n        this.asyncFl = asyncFl;\r\n        this.onRequestCompleted = callback || targetInfo.request.callback;\r\n        this.targetInfo = targetInfo;\r\n        this.xhr = this.createXHR();\r\n        // Execute the request\r\n        this.execute();\r\n    }\r\n    Object.defineProperty(XHRRequest.prototype, \"completedFl\", {\r\n        /*********************************************************************************************************************************/\r\n        // Public Properties\r\n        /*********************************************************************************************************************************/\r\n        // Flag indicating the request has completed\r\n        get: function () { return this.xhr ? this.xhr.readyState == 4 : false; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"response\", {\r\n        // The response\r\n        get: function () { return this.xhr ? this.xhr.response : null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"request\", {\r\n        // The xml http request\r\n        get: function () { return this.xhr ? this.xhr : null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"requestData\", {\r\n        // The data send in the body of the request\r\n        get: function () { return this.targetInfo.requestData; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"requestUrl\", {\r\n        // The reqest url\r\n        get: function () { return this.xhr ? this.xhr.responseURL : null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XHRRequest.prototype, \"status\", {\r\n        // The request status\r\n        get: function () { return this.xhr ? this.xhr.status : null; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*********************************************************************************************************************************/\r\n    // Private Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to create the xml http request\r\n    XHRRequest.prototype.createXHR = function () {\r\n        // See if the generic object doesn't exist\r\n        if (typeof (XMLHttpRequest) !== \"undefined\") {\r\n            // Create an instance of the xml http request object\r\n            return new XMLHttpRequest();\r\n        }\r\n        // Try to create the request\r\n        try {\r\n            return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\r\n        }\r\n        catch (e) { }\r\n        // Try to create the request\r\n        try {\r\n            return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\r\n        }\r\n        catch (e) { }\r\n        // Try to create the request\r\n        try {\r\n            return new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        }\r\n        catch (e) { }\r\n        // Throw an error\r\n        throw new Error(\"This browser does not support xml http requests.\");\r\n    };\r\n    // Method to default the request headers\r\n    XHRRequest.prototype.defaultHeaders = function () {\r\n        // See if the custom headers exist\r\n        if (this.targetInfo.requestHeaders) {\r\n            // Parse the custom headers\r\n            for (var header in this.targetInfo.requestHeaders) {\r\n                // Add the header\r\n                this.xhr.setRequestHeader(header, this.targetInfo.requestHeaders[header]);\r\n            }\r\n        }\r\n        else {\r\n            // Set the default headers\r\n            this.xhr.setRequestHeader(\"Accept\", \"application/json;odata=verbose\");\r\n            this.xhr.setRequestHeader(\"Content-Type\", \"application/json;odata=verbose\");\r\n        }\r\n        // Set the method\r\n        this.xhr.setRequestHeader(\"X-HTTP-Method\", this.targetInfo.requestMethod);\r\n        // See if the request digest has been defined\r\n        if (this.targetInfo.request.requestDigest) {\r\n            // Set the request digest\r\n            this.xhr.setRequestHeader(\"X-RequestDigest\", this.targetInfo.request.requestDigest);\r\n        }\r\n        else {\r\n            // Get the request digest\r\n            var requestDigest = lib_1.ContextInfo.document.querySelector(\"#__REQUESTDIGEST\");\r\n            requestDigest = requestDigest ? requestDigest.value : \"\";\r\n            // Set the request digest\r\n            this.xhr.setRequestHeader(\"X-RequestDigest\", requestDigest);\r\n        }\r\n        // See if we are deleting or updating the data\r\n        if (this.targetInfo.requestMethod == \"DELETE\" || this.targetInfo.requestMethod == \"MERGE\") {\r\n            // Append the header for deleting/updating\r\n            this.xhr.setRequestHeader(\"IF-MATCH\", \"*\");\r\n        }\r\n    };\r\n    // Method to execute the xml http request\r\n    XHRRequest.prototype.execute = function () {\r\n        var _this = this;\r\n        // Ensure the xml http request exists\r\n        if (this.xhr == null) {\r\n            return null;\r\n        }\r\n        // Open the request\r\n        this.xhr.open(this.targetInfo.requestMethod == \"GET\" ? \"GET\" : \"POST\", this.targetInfo.requestUrl, this.asyncFl);\r\n        // See if we are making an asynchronous request\r\n        if (this.asyncFl) {\r\n            // Set the state change event\r\n            this.xhr.onreadystatechange = function () {\r\n                // See if the request has finished\r\n                if (_this.xhr.readyState == 4) {\r\n                    // Execute the request completed event\r\n                    _this.onRequestCompleted ? _this.onRequestCompleted(_this) : null;\r\n                }\r\n            };\r\n        }\r\n        // See if we the response type is an array buffer\r\n        // Note - Updating the response type is only allow for asynchronous requests. Any error will be thrown otherwise.\r\n        if (this.targetInfo.request.bufferFl && this.asyncFl) {\r\n            // Set the response type\r\n            this.xhr.responseType = \"arraybuffer\";\r\n        }\r\n        else {\r\n            // Default the headers\r\n            this.defaultHeaders();\r\n            // Ensure the arguments passed is defaulted as a string, unless it's an array buffer\r\n            if (this.targetInfo.requestData && typeof (this.targetInfo.requestData) !== \"string\") {\r\n                // Stringify the data object, if it's not an array buffer\r\n                this.targetInfo.requestData = this.targetInfo.requestData.byteLength ? this.targetInfo.requestData : JSON.stringify(this.targetInfo.requestData);\r\n            }\r\n        }\r\n        // Execute the request\r\n        this.targetInfo.request.bufferFl || this.targetInfo.requestData == null ? this.xhr.send() : this.xhr.send(this.targetInfo.requestData);\r\n    };\r\n    return XHRRequest;\r\n}());\r\nexports.XHRRequest = XHRRequest;\r\n//# sourceMappingURL=xhrRequest.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/xhrRequest.js\n// module id = 895\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/utils/types/index.js\n// module id = 896\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\n/**\r\n * JS Link\r\n */\r\nvar _JSLink = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _JSLink(cfg) {\r\n        // See if the configuration exists\r\n        if (cfg) {\r\n            // Set the properties\r\n            this._baseViewID = cfg.BaseViewID;\r\n            this._listTemplateType = cfg.ListTemplateType;\r\n            this._onPostRender = cfg.OnPostRender;\r\n            this._onPreRender = cfg.OnPreRender;\r\n            this._templates = cfg.Templates;\r\n        }\r\n    }\r\n    Object.defineProperty(_JSLink.prototype, \"BaseViewID\", {\r\n        set: function (value) { this._baseViewID = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_JSLink.prototype, \"ListTemplateType\", {\r\n        set: function (value) { this._listTemplateType = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_JSLink.prototype, \"OnPostRender\", {\r\n        set: function (value) { this._onPostRender = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_JSLink.prototype, \"OnPreRender\", {\r\n        set: function (value) { this._onPreRender = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_JSLink.prototype, \"Templates\", {\r\n        set: function (value) { this._templates = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Methods\r\n     */\r\n    /**\r\n     * Returns the CSR template.\r\n     */\r\n    _JSLink.prototype.getTemplate = function () {\r\n        var template = {};\r\n        // Add the properties\r\n        if (this._baseViewID) {\r\n            template.BaseViewID = this._baseViewID;\r\n        }\r\n        if (this._listTemplateType) {\r\n            template.ListTemplateType = this._listTemplateType;\r\n        }\r\n        if (this._onPostRender) {\r\n            template.OnPostRender = this._onPostRender;\r\n        }\r\n        if (this._onPreRender) {\r\n            template.OnPreRender = this._onPreRender;\r\n        }\r\n        if (this._templates) {\r\n            template.Templates = this._templates;\r\n        }\r\n        // See if there are fields\r\n        if (template.Templates && template.Templates.Fields) {\r\n            var fields = {};\r\n            // Parse the fields\r\n            for (var _i = 0, _a = template.Templates.Fields; _i < _a.length; _i++) {\r\n                var field = _a[_i];\r\n                // Add the field\r\n                fields[field.Name] = {};\r\n                // Add the field properties\r\n                if (field.DisplayForm) {\r\n                    fields[field.Name].DisplayForm = field.DisplayForm;\r\n                }\r\n                if (field.EditForm) {\r\n                    fields[field.Name].EditForm = field.EditForm;\r\n                }\r\n                if (field.NewForm) {\r\n                    fields[field.Name].NewForm = field.NewForm;\r\n                }\r\n                if (field.View) {\r\n                    fields[field.Name].View = field.View;\r\n                }\r\n            }\r\n            // Update the fields\r\n            template.Templates.Fields = fields;\r\n        }\r\n        // Return the template\r\n        return template;\r\n    };\r\n    /**\r\n     * Method to register the CSR override.\r\n     */\r\n    _JSLink.prototype.register = function () {\r\n        // Get the template manager\r\n        var templateManager = lib_1.ContextInfo.window.SPClientTemplates;\r\n        templateManager = templateManager ? templateManager.TemplateManager : null;\r\n        // Ensure it exists\r\n        if (templateManager) {\r\n            // Apply the customization\r\n            templateManager.RegisterTemplateOverrides(this.getTemplate());\r\n        }\r\n    };\r\n    return _JSLink;\r\n}());\r\nexports.JSLink = _JSLink;\r\n//# sourceMappingURL=jslink.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/jslink.js\n// module id = 897\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\nvar web_1 = require(\"./web\");\r\n/**\r\n * List\r\n */\r\nvar _List = /** @class */ (function (_super) {\r\n    __extends(_List, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _List(listName, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"web/lists/getByTitle('\" + listName + \"')\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"list\" } });\r\n        return _this;\r\n    }\r\n    // Method to get the list by the entity name.\r\n    _List.getByEntityName = function (entityTypeName, callback, targetInfo) {\r\n        // Query for the list\r\n        var query = (new web_1.Web(targetInfo))\r\n            .Lists()\r\n            .query({\r\n            Filter: \"EntityTypeName eq '\" + entityTypeName + \"'\",\r\n            Top: 1\r\n        });\r\n        // See if the callback exists\r\n        if (typeof (callback) != \"function\") {\r\n            // Execute the request synchronously and return it\r\n            var list = query.executeAndWait();\r\n            return list.results ? list.results[0] : list;\r\n        }\r\n        // Execute the request asynchronously\r\n        query.execute(function (lists) {\r\n            // Execute the callback method\r\n            callback(lists.results ? lists.results[0] : lists);\r\n        });\r\n    };\r\n    return _List;\r\n}(utils_1.Base));\r\nexports.List = _List;\r\n//# sourceMappingURL=list.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/list.js\n// module id = 898\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Navigation\r\n */\r\nvar _Navigation = /** @class */ (function (_super) {\r\n    __extends(_Navigation, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _Navigation(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"navigation\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"navigationservicerest\" } });\r\n        return _this;\r\n    }\r\n    return _Navigation;\r\n}(utils_1.Base));\r\nexports.Navigation = _Navigation;\r\n//# sourceMappingURL=navigation.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/navigation.js\n// module id = 899\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/*********************************************************************************************************************************/\r\n// People Manager\r\n/*********************************************************************************************************************************/\r\nvar _PeopleManager = /** @class */ (function (_super) {\r\n    __extends(_PeopleManager, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _PeopleManager(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"sp.userprofiles.peoplemanager\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"peoplemanager\" } });\r\n        return _this;\r\n    }\r\n    return _PeopleManager;\r\n}(utils_1.Base));\r\nexports.PeopleManager = _PeopleManager;\r\n//# sourceMappingURL=peopleManager.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/peopleManager.js\n// module id = 900\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/*********************************************************************************************************************************/\r\n// People Picker\r\n/*********************************************************************************************************************************/\r\nvar _PeoplePicker = /** @class */ (function (_super) {\r\n    __extends(_PeoplePicker, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _PeoplePicker(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface\";\r\n        _this.targetInfo.overrideDefaultRequestToHostFl = true;\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"peoplepicker\" } });\r\n        return _this;\r\n    }\r\n    return _PeoplePicker;\r\n}(utils_1.Base));\r\nexports.PeoplePicker = _PeoplePicker;\r\n//# sourceMappingURL=peoplePicker.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/peoplePicker.js\n// module id = 901\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/*********************************************************************************************************************************/\r\n// Profile Loader\r\n/*********************************************************************************************************************************/\r\nvar _ProfileLoader = /** @class */ (function (_super) {\r\n    __extends(_ProfileLoader, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _ProfileLoader(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"sp.userprofiles.profileloader.getprofileloader\";\r\n        _this.targetInfo.method = \"POST\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"profileloader\" } });\r\n        return _this;\r\n    }\r\n    return _ProfileLoader;\r\n}(utils_1.Base));\r\nexports.ProfileLoader = _ProfileLoader;\r\n//# sourceMappingURL=profileLoader.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/profileLoader.js\n// module id = 902\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/*********************************************************************************************************************************/\r\n// Search\r\n/*********************************************************************************************************************************/\r\nvar _Search = /** @class */ (function (_super) {\r\n    __extends(_Search, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _Search(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"search\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"search\" } });\r\n        return _this;\r\n    }\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to compute the query\r\n    _Search.prototype.getQuery = function (parameters) {\r\n        var query = \"\";\r\n        // Parse the parameters\r\n        for (var key in parameters) {\r\n            // Append the parameter to the query\r\n            query += (query == \"\" ? \"\" : \"&\") + key + \"='\" + parameters[key] + \"'\";\r\n        }\r\n        // Return the query\r\n        return [query];\r\n    };\r\n    /** The search query method */\r\n    _Search.prototype.searchquery = function (settings) {\r\n        // Execute the request\r\n        return this.executeMethod(\"query\", {\r\n            argNames: [\"query\"],\r\n            name: \"query?[[query]]\",\r\n            requestType: utils_1.RequestType.GetReplace\r\n        }, this.getQuery(settings));\r\n    };\r\n    /** The suggest method */\r\n    _Search.prototype.suggest = function (settings) {\r\n        // Execute the request\r\n        return this.executeMethod(\"query\", {\r\n            argNames: [\"query\"],\r\n            name: \"suggest?[[query]]\",\r\n            requestType: utils_1.RequestType.GetReplace\r\n        }, this.getQuery(settings));\r\n    };\r\n    return _Search;\r\n}(utils_1.Base));\r\nexports.Search = _Search;\r\n//# sourceMappingURL=search.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/search.js\n// module id = 903\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\nvar _1 = require(\".\");\r\n/*********************************************************************************************************************************/\r\n// Site\r\n// The SPSite object.\r\n/*********************************************************************************************************************************/\r\nvar _Site = /** @class */ (function (_super) {\r\n    __extends(_Site, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _Site(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"site\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"site\" } });\r\n        return _this;\r\n    }\r\n    // Method to get the root web\r\n    _Site.prototype.getRootWeb = function () { return new _1.Web(null, this.targetInfo); };\r\n    // Method to determine if the current user has access, based on the permissions.\r\n    _Site.prototype.hasAccess = function (permissions) {\r\n        // TO DO\r\n        return true;\r\n    };\r\n    ;\r\n    return _Site;\r\n}(utils_1.Base));\r\nexports.Site = _Site;\r\n//# sourceMappingURL=site.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/site.js\n// module id = 904\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/*********************************************************************************************************************************/\r\n// Social Feed\r\n/*********************************************************************************************************************************/\r\nvar _SocialFeed = /** @class */ (function (_super) {\r\n    __extends(_SocialFeed, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _SocialFeed(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"social.feed\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"socialfeed\" } });\r\n        return _this;\r\n    }\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to post to another user's feed\r\n    _SocialFeed.prototype.postToFeed = function (accountName, creationData) {\r\n        var postInfo = { ID: null, creationData: creationData };\r\n        // Set the post metadata\r\n        postInfo[\"__metadata\"] = { type: \"SP.Social.SocialRestPostCreationData\" };\r\n        postInfo.creationData[\"__metadata\"] = { type: \"SP.Social.SocialPostCreationData\" };\r\n        return this.executeMethod(\"postToMyFeed\", {\r\n            argNames: [\"restCreationData\"],\r\n            name: \"actor(item=@v)/feed?@v='\" + encodeURIComponent(accountName) + \"'\",\r\n            requestType: utils_1.RequestType.PostWithArgsInBody\r\n        }, [postInfo]);\r\n    };\r\n    // Method to post to the current user's feed\r\n    _SocialFeed.prototype.postToMyFeed = function (creationData) {\r\n        var postInfo = { ID: null, creationData: creationData };\r\n        // Set the post metadata\r\n        postInfo[\"__metadata\"] = { type: \"SP.Social.SocialRestPostCreationData\" };\r\n        postInfo.creationData[\"__metadata\"] = { type: \"SP.Social.SocialPostCreationData\" };\r\n        return this.executeMethod(\"postToMyFeed\", {\r\n            argNames: [\"restCreationData\"],\r\n            name: \"my/feed/post\",\r\n            requestType: utils_1.RequestType.PostWithArgsInBody\r\n        }, [postInfo]);\r\n    };\r\n    return _SocialFeed;\r\n}(utils_1.Base));\r\nexports.SocialFeed = (new _SocialFeed());\r\n//# sourceMappingURL=socialFeed.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/socialFeed.js\n// module id = 905\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/*********************************************************************************************************************************/\r\n// User Profile\r\n/*********************************************************************************************************************************/\r\nvar _UserProfile = /** @class */ (function (_super) {\r\n    __extends(_UserProfile, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _UserProfile(targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"sp.userprofiles.profileloader.getprofileloader/getUserProfile\";\r\n        _this.targetInfo.method = \"POST\";\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"userprofile\" } });\r\n        return _this;\r\n    }\r\n    return _UserProfile;\r\n}(utils_1.Base));\r\nexports.UserProfile = _UserProfile;\r\n//# sourceMappingURL=userProfile.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/userProfile.js\n// module id = 906\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n/**\r\n * Utility\r\n */\r\nvar _Utility = /** @class */ (function (_super) {\r\n    __extends(_Utility, _super);\r\n    /*********************************************************************************************************************************/\r\n    // Constructor\r\n    /*********************************************************************************************************************************/\r\n    function _Utility(url, targetInfo) {\r\n        var _this = \r\n        // Call the base constructor\r\n        _super.call(this, targetInfo) || this;\r\n        // Default the properties\r\n        _this.targetInfo.defaultToWebFl = true;\r\n        _this.targetInfo.endpoint = \"SP.Utilities.Utility\";\r\n        // See if the web url exists\r\n        if (url) {\r\n            // Set the settings\r\n            _this.targetInfo.url = url;\r\n        }\r\n        // Add the methods\r\n        _this.addMethods(_this, { __metadata: { type: \"utility\" } });\r\n        return _this;\r\n    }\r\n    /*********************************************************************************************************************************/\r\n    // Methods\r\n    /*********************************************************************************************************************************/\r\n    // Method to create a wiki page\r\n    _Utility.prototype.createWikiPage = function (listUrl, content) {\r\n        if (content === void 0) { content = \"\"; }\r\n        var parameters = {\r\n            ServerRelativeUrl: listUrl,\r\n            WikiHtmlContent: content\r\n        };\r\n        // Execute the method\r\n        return this.executeMethod(\"createWikiPage\", {\r\n            argNames: [\"parameters\"],\r\n            name: \"SP.Utilities.Utility.CreateWikiPageInContextWeb\",\r\n            replaceEndpointFl: true,\r\n            requestType: utils_1.RequestType.PostWithArgsInBody\r\n        }, [parameters]);\r\n    };\r\n    // Method to send an email\r\n    _Utility.prototype.sendEmail = function (properties) {\r\n        // Parse the email properties\r\n        for (var _i = 0, _a = [\"To\", \"CC\", \"BCC\"]; _i < _a.length; _i++) {\r\n            var propName = _a[_i];\r\n            var propValue = properties[propName];\r\n            // Ensure the value exists\r\n            if (propValue) {\r\n                // See if it's a string\r\n                if (typeof (propValue) === \"string\") {\r\n                    // Add the results property\r\n                    properties[propName] = { 'results': [propValue] };\r\n                }\r\n                else {\r\n                    // Add the results property\r\n                    properties[propName] = { 'results': propValue };\r\n                }\r\n            }\r\n        }\r\n        // Execute the method\r\n        return this.executeMethod(\"sendEmail\", {\r\n            argNames: [\"properties\"],\r\n            metadataType: \"SP.Utilities.EmailProperties\",\r\n            name: \"SP.Utilities.Utility.sendEmail\",\r\n            replaceEndpointFl: true,\r\n            requestType: utils_1.RequestType.PostWithArgsInBody\r\n        }, [properties]);\r\n    };\r\n    return _Utility;\r\n}(utils_1.Base));\r\nexports.Utility = _Utility;\r\n//# sourceMappingURL=utility.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/utility.js\n// module id = 907\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/lib/types/index.js\n// module id = 908\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\n/**\r\n * Dependencies\r\n * This class will ensure the core SP scripts are loaded on the page.\r\n */\r\nvar _Dependencies = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     * @param callback - The method to execute after the scripts have been loaded.\r\n     */\r\n    function _Dependencies(callback) {\r\n        this._callback = null;\r\n        // Default the properties\r\n        this._callback = callback;\r\n        this.MAX_WAIT = 5;\r\n        this.SCRIPTS = [\r\n            \"MicrosoftAjax.js\", \"init.js\", \"sp.runtime.js\", \"sp.js\", \"sp.core.js\", \"core.js\"\r\n        ];\r\n        // Load the dependencies\r\n        this.loadDependencies();\r\n    }\r\n    Object.defineProperty(_Dependencies.prototype, \"pageContextExistsFl\", {\r\n        get: function () { return lib_1.ContextInfo.webAbsoluteUrl != \"\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Method to ensure the SP classes are loaded\r\n     */\r\n    _Dependencies.prototype.loadDependencies = function () {\r\n        // See if the page context exists\r\n        if (this.pageContextExistsFl) {\r\n            // Call the callback event\r\n            this._callback ? this._callback() : null;\r\n        }\r\n        else {\r\n            // Load the required scripts\r\n            for (var fileName in this.SCRIPTS) {\r\n                // Create the script element\r\n                var elScript = lib_1.ContextInfo.document.createElement(\"script\");\r\n                // Set the properties\r\n                elScript.setAttribute(\"src\", \"/_layouts/15/\" + fileName);\r\n                elScript.setAttribute(\"type\", \"text/javascript\");\r\n                // Add the script element to the head\r\n                lib_1.ContextInfo.document.head.appendChild(elScript);\r\n            }\r\n            // Wait for the page context to exist\r\n            this.waitForPageContext();\r\n        }\r\n    };\r\n    /**\r\n     * Method to wait for the page context to be loaded\r\n     */\r\n    _Dependencies.prototype.waitForPageContext = function () {\r\n        var counter = 0;\r\n        // Check every 10ms\r\n        var intervalId = lib_1.ContextInfo.window.setInterval(function () {\r\n            // See if the page context exists, and ensure we haven't hit the max attempts\r\n            if (this.pageContextExists || ++counter >= this.MAX_WAIT) {\r\n                // Clear the interval\r\n                lib_1.ContextInfo.window.clearInterval(intervalId);\r\n                // Call the callback event\r\n                this._callback ? this._callback() : null;\r\n            }\r\n        }, 10);\r\n    };\r\n    return _Dependencies;\r\n}());\r\nexports.Dependencies = _Dependencies;\r\n//# sourceMappingURL=dependencies.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/dependencies.js\n// module id = 909\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\nvar __1 = require(\"..\");\r\nvar spCfg_1 = require(\"./spCfg\");\r\n/**\r\n * Field Schema XML\r\n * Helper class for generating the field schema xml\r\n */\r\nexports.FieldSchemaXML = function (fieldInfo) {\r\n    var _resolve = null;\r\n    // Returns the schema xml for a boolean field.\r\n    var createBoolean = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Boolean\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \">\";\r\n        if (fieldInfo.defaultValue) {\r\n            schemaXml += \"<Default>\" + fieldInfo.defaultValue + \"</Default>\";\r\n        }\r\n        schemaXml += \"</Field>\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a calculated field.\r\n    var createCalculated = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Calculated\";\r\n        // Set the result type\r\n        switch (fieldInfo.resultType) {\r\n            case __1.SPTypes.FieldResultType.Boolean:\r\n                props[\"ResultType\"] = \"Boolean\";\r\n                break;\r\n            case __1.SPTypes.FieldResultType.Currency:\r\n                props[\"ResultType\"] = \"Currency\";\r\n                break;\r\n            case __1.SPTypes.FieldResultType.DateOnly:\r\n                props[\"Format\"] = \"DateOnly\";\r\n                props[\"ResultType\"] = \"DateTime\";\r\n                break;\r\n            case __1.SPTypes.FieldResultType.DateTime:\r\n                props[\"Format\"] = \"DateTime\";\r\n                props[\"ResultType\"] = \"DateTime\";\r\n                break;\r\n            case __1.SPTypes.FieldResultType.Number:\r\n                props[\"ResultType\"] = \"Number\";\r\n                break;\r\n            default:\r\n                props[\"ResultType\"] = \"Text\";\r\n                break;\r\n        }\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \">\";\r\n        if (fieldInfo.formula) {\r\n            schemaXml += \"<Formula>\" + fieldInfo.formula + \"</Formula>\";\r\n        }\r\n        if (fieldInfo.fieldRefs) {\r\n            schemaXml += \"<FieldRefs>\";\r\n            for (var i = 0; i < fieldInfo.fieldRefs.length; i++) {\r\n                schemaXml += \"<FieldRef Name=\\\"\" + fieldInfo.fieldRefs[i] + \"\\\" />\";\r\n            }\r\n            schemaXml += \"</FieldRefs>\";\r\n        }\r\n        schemaXml += \"</Field>\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a choice field.\r\n    var createChoice = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = fieldInfo.multi ? \"MultiChoice\" : \"Choice\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \">\";\r\n        if (fieldInfo.defaultValue) {\r\n            schemaXml += \"<Default>\" + fieldInfo.defaultValue + \"</Default>\";\r\n        }\r\n        if (fieldInfo.choices) {\r\n            schemaXml += \"<CHOICES>\";\r\n            for (var i = 0; i < fieldInfo.choices.length; i++) {\r\n                schemaXml += \"<CHOICE>\" + fieldInfo.choices[i] + \"</CHOICE>\";\r\n            }\r\n            schemaXml += \"</CHOICES>\";\r\n        }\r\n        schemaXml += \"</Field>\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a date field.\r\n    var createDate = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"DateTime\";\r\n        // Set the date/time properties\r\n        props[\"Format\"] = fieldInfo.format == __1.SPTypes.DateFormat.DateTime ? \"DateTime\" : \"DateOnly\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a lookup field.\r\n    var createLookup = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = fieldInfo.multi ? \"LookupMulti\" : \"Lookup\";\r\n        // Set the lookup properties\r\n        if (fieldInfo.fieldRef) {\r\n            props[\"FieldRef\"] = fieldInfo.fieldRef;\r\n        }\r\n        if (fieldInfo.multi) {\r\n            props[\"Mult\"] = \"TRUE\";\r\n        }\r\n        if (fieldInfo.showField) {\r\n            props[\"ShowField\"] = fieldInfo.showField;\r\n        }\r\n        // See if the lookup name exists\r\n        if (fieldInfo.listName) {\r\n            // Get the web containing the list\r\n            (new lib_1.Web(fieldInfo.webUrl))\r\n                .Lists(fieldInfo.listName)\r\n                .query({\r\n                Expand: [\"ParentWeb\"]\r\n            })\r\n                .execute(function (list) {\r\n                // Set the list and web ids\r\n                props[\"List\"] = list.Id;\r\n                if (fieldInfo.webUrl) {\r\n                    props[\"WebId\"] = list.ParentWeb.Id;\r\n                }\r\n                // Resolve the request\r\n                _resolve(\"<Field \" + toString(props) + \" />\");\r\n            });\r\n        }\r\n        else {\r\n            // Set the list id\r\n            props[\"List\"] = fieldInfo.listId;\r\n            // Resolve the request\r\n            _resolve(\"<Field \" + toString(props) + \" />\");\r\n        }\r\n    };\r\n    // Returns the schema xml for a managed metadata field.\r\n    var createMMS = function (fieldInfo, props) {\r\n        // Create the value field\r\n        var valueProps = {\r\n            ID: \"{\" + lib_1.ContextInfo.generateGUID() + \"}\",\r\n            Name: fieldInfo.name + \"_0\",\r\n            StaticName: fieldInfo.name + \"_0\",\r\n            DisplayName: fieldInfo.title + \" Value\",\r\n            Type: \"Note\",\r\n            Hidden: \"TRUE\",\r\n            Required: \"FALSE\",\r\n            ShowInViewForms: \"FALSE\",\r\n            CanToggleHidden: \"TRUE\"\r\n        };\r\n        // Generate the value field schema xml\r\n        var schemaXmlValue = \"<Field \" + toString(valueProps) + \" />\";\r\n        // Set the mms properties\r\n        props[\"Type\"] = \"TaxonomyFieldType\";\r\n        props[\"ShowField\"] = \"Term\" + (fieldInfo.locale ? fieldInfo.locale.toString() : \"1033\");\r\n        // Generate the mms field schema xml\r\n        var schemaXml = [\r\n            \"<Field \" + toString(props) + \">\",\r\n            \"<Customization>\",\r\n            \"<ArrayOfProperty>\",\r\n            \"<Property>\",\r\n            \"<Name>TextField</Name>\",\r\n            \"<Value xmlns:q6=\\\"http://www.w3.org/2001/XMLSchema\\\" p4:type=\\\"q6:string\\\" xmlns:p4=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\" + valueProps.ID + \"</Value>\",\r\n            \"</Property>\",\r\n            \"</ArrayOfProperty>\",\r\n            \"</Customization>\",\r\n            \"</Field>\"\r\n        ].join(\"\");\r\n        // Resolve the request\r\n        _resolve([schemaXmlValue, schemaXml]);\r\n    };\r\n    // Returns the schema xml for a note field.\r\n    var createNote = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Note\";\r\n        // Set the note properties\r\n        if (fieldInfo.appendFl) {\r\n            props[\"AppendOnly\"] = \"TRUE\";\r\n        }\r\n        if (fieldInfo.noteType == __1.SPTypes.FieldNoteType.EnhancedRichText || fieldInfo.noteType == __1.SPTypes.FieldNoteType.RichText) {\r\n            props[\"RichText\"] = \"TRUE\";\r\n        }\r\n        if (fieldInfo.noteType == __1.SPTypes.FieldNoteType.EnhancedRichText) {\r\n            props[\"RichTextMode\"] = \"FullHtml\";\r\n        }\r\n        if (fieldInfo.numberOfLines > 0) {\r\n            props[\"NumLines\"] = fieldInfo.numberOfLines;\r\n        }\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a number field.\r\n    var createNumber = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Number\";\r\n        // Set the number properties\r\n        if (fieldInfo.decimals >= 0) {\r\n            props[\"Decimals\"] = fieldInfo.decimals;\r\n        }\r\n        if (fieldInfo.max != null) {\r\n            props[\"Max\"] = fieldInfo.max;\r\n        }\r\n        if (fieldInfo.min != null) {\r\n            props[\"Min\"] = fieldInfo.min;\r\n        }\r\n        if (fieldInfo.numberType == __1.SPTypes.FieldNumberType.Integer) {\r\n            props[\"Decimals\"] = 0;\r\n        }\r\n        if (fieldInfo.numberType == __1.SPTypes.FieldNumberType.Percentage) {\r\n            props[\"ShowPercentage\"] = \"TRUE\";\r\n        }\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a text field.\r\n    var createText = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"Text\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a url field.\r\n    var createUrl = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"URL\";\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Returns the schema xml for a user field.\r\n    var createUser = function (fieldInfo, props) {\r\n        var schemaXml = null;\r\n        // Set the field type\r\n        props[\"Type\"] = \"User\";\r\n        // Set the user properties\r\n        if (fieldInfo.multi) {\r\n            props[\"Mult\"] = \"TRUE\";\r\n        }\r\n        if (fieldInfo.selectionMode != null) {\r\n            props[\"UserSelectionMode\"] = fieldInfo.selectionMode;\r\n        }\r\n        if (fieldInfo.selectionScope != null) {\r\n            props[\"UserSelectionScope\"] = fieldInfo.selectionScope;\r\n        }\r\n        // Generate the schema\r\n        schemaXml = \"<Field \" + toString(props) + \" />\";\r\n        // Resolve the request\r\n        _resolve(schemaXml);\r\n    };\r\n    // Method to convert the properties to a string\r\n    var toString = function (props) {\r\n        var properties = \"\";\r\n        // Parse the properties\r\n        for (var key in props) {\r\n            var value = props[key];\r\n            // Add the property\r\n            properties += (properties ? \" \" : \"\") + key + \"=\\\"\" + props[key] + \"\\\"\";\r\n        }\r\n        // Return the string value\r\n        return properties;\r\n    };\r\n    // Return a promise\r\n    return new Promise(function (resolve, reject) {\r\n        // Set the resolve method\r\n        _resolve = resolve;\r\n        // See if the schema xml has been defined\r\n        if (fieldInfo.schemaXml) {\r\n            // Resolve the promise\r\n            resolve(fieldInfo.schemaXml);\r\n        }\r\n        else {\r\n            // Set the base properties\r\n            var props = {};\r\n            props[\"ID\"] = \"{\" + lib_1.ContextInfo.generateGUID() + \"}\";\r\n            props[\"Name\"] = fieldInfo.name;\r\n            props[\"Required\"] = fieldInfo.required ? \"TRUE\" : \"FALSE\";\r\n            props[\"StaticName\"] = fieldInfo.name;\r\n            props[\"DisplayName\"] = fieldInfo.title;\r\n            // Set the type\r\n            switch (fieldInfo.type) {\r\n                // Boolean\r\n                case spCfg_1.SPCfgFieldType.Boolean:\r\n                    createBoolean(fieldInfo, props);\r\n                    break;\r\n                // Calculated\r\n                case spCfg_1.SPCfgFieldType.Calculated:\r\n                    createCalculated(fieldInfo, props);\r\n                    break;\r\n                // Choice\r\n                case spCfg_1.SPCfgFieldType.Choice:\r\n                    createChoice(fieldInfo, props);\r\n                    break;\r\n                // Date/Time\r\n                case spCfg_1.SPCfgFieldType.Date:\r\n                    createDate(fieldInfo, props);\r\n                    break;\r\n                // Lookup\r\n                case spCfg_1.SPCfgFieldType.Lookup:\r\n                    createLookup(fieldInfo, props);\r\n                    break;\r\n                // MMS\r\n                case spCfg_1.SPCfgFieldType.MMS:\r\n                    createMMS(fieldInfo, props);\r\n                    break;\r\n                // Note\r\n                case spCfg_1.SPCfgFieldType.Note:\r\n                    createNote(fieldInfo, props);\r\n                    break;\r\n                // Number\r\n                case spCfg_1.SPCfgFieldType.Number:\r\n                    createNumber(fieldInfo, props);\r\n                    break;\r\n                // Text\r\n                case spCfg_1.SPCfgFieldType.Text:\r\n                    createText(fieldInfo, props);\r\n                    break;\r\n                // URL\r\n                case spCfg_1.SPCfgFieldType.Url:\r\n                    createUrl(fieldInfo, props);\r\n                    break;\r\n                // User\r\n                case spCfg_1.SPCfgFieldType.User:\r\n                    createUser(fieldInfo, props);\r\n                    break;\r\n                // Field type not supported\r\n                default:\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n};\r\n//# sourceMappingURL=fieldSchemaXML.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/fieldSchemaXML.js\n// module id = 910\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * SharePoint Configuration Field Types\r\n */\r\nexports.SPCfgFieldType = {\r\n    Boolean: 0,\r\n    Calculated: 1,\r\n    Choice: 2,\r\n    Date: 3,\r\n    Lookup: 4,\r\n    MMS: 5,\r\n    Note: 6,\r\n    Number: 7,\r\n    Text: 8,\r\n    Url: 9,\r\n    User: 10\r\n};\r\n/**\r\n * SharePoint Configuration Types\r\n * The value determines the order to install the object type.\r\n */\r\nexports.SPCfgType = {\r\n    Fields: 0,\r\n    ContentTypes: 1,\r\n    Lists: 2,\r\n    SiteUserCustomActions: 3,\r\n    WebParts: 5,\r\n    WebUserCustomActions: 4\r\n};\r\n//# sourceMappingURL=spCfgTypes.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/spCfgTypes.js\n// module id = 911\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\nvar mapper_1 = require(\"../mapper\");\r\n/**\r\n * JSLink Helper Methods\r\n */\r\nexports.JSLink = {\r\n    // Hide event flag\r\n    _hideEventFl: false,\r\n    /**\r\n     * Field to Method Mapper\r\n     * 1 - Display Form\r\n     * 2 - Edit Form\r\n     * 3 - New Form\r\n     * 4 - View\r\n     */\r\n    _fieldToMethodMapper: {\r\n        'Attachments': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldAttachments_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldAttachments_Default\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldAttachments_Default\"]\r\n        },\r\n        'Boolean': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_DefaultNoEncode\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldBoolean_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldBoolean_Edit\"]\r\n        },\r\n        'Currency': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"]\r\n        },\r\n        'Calculated': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPField_FormDisplay_Empty\"],\r\n            3: lib_1.ContextInfo.window[\"SPField_FormDisplay_Empty\"]\r\n        },\r\n        'Choice': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldChoice_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldChoice_Edit\"]\r\n        },\r\n        'Computed': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            3: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"]\r\n        },\r\n        'DateTime': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldDateTime_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldDateTime_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldDateTime_Edit\"]\r\n        },\r\n        'File': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldFile_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldFile_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldFile_Edit\"]\r\n        },\r\n        'Integer': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"]\r\n        },\r\n        'Lookup': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldLookup_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldLookup_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldLookup_Edit\"]\r\n        },\r\n        'LookupMulti': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldLookup_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldLookup_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldLookup_Edit\"]\r\n        },\r\n        'MultiChoice': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldMultiChoice_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldMultiChoice_Edit\"]\r\n        },\r\n        'Note': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldNote_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldNote_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldNote_Edit\"]\r\n        },\r\n        'Number': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldNumber_Edit\"]\r\n        },\r\n        'Text': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPField_FormDisplay_Default\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldText_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldText_Edit\"]\r\n        },\r\n        'URL': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldUrl_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPFieldUrl_Edit\"],\r\n            3: lib_1.ContextInfo.window[\"SPFieldUrl_Edit\"]\r\n        },\r\n        'User': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldUser_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPClientPeoplePickerCSRTemplate\"],\r\n            3: lib_1.ContextInfo.window[\"SPClientPeoplePickerCSRTemplate\"]\r\n        },\r\n        'UserMulti': {\r\n            4: lib_1.ContextInfo.window[\"RenderFieldValueDefault\"],\r\n            1: lib_1.ContextInfo.window[\"SPFieldUserMulti_Display\"],\r\n            2: lib_1.ContextInfo.window[\"SPClientPeoplePickerCSRTemplate\"],\r\n            3: lib_1.ContextInfo.window[\"SPClientPeoplePickerCSRTemplate\"]\r\n        }\r\n    },\r\n    /**\r\n     * Methods\r\n     */\r\n    /**\r\n     * Disables edit for the specified field.\r\n     * @param ctx - The client context.\r\n     * @param field - The field to disable edit.\r\n     * @param requireValueFl - Flag to only disable the field, if a value exists.\r\n     */\r\n    disableEdit: function (ctx, field, requireValueFl) {\r\n        var fieldValue = ctx.CurrentFieldValue;\r\n        // Ensure a value exists\r\n        if (fieldValue) {\r\n            // Update the context, based on the field type\r\n            switch (ctx.CurrentFieldSchema.Type) {\r\n                case \"MultiChoice\":\r\n                    var regExp = new RegExp(mapper_1.SPTypes.ClientTemplatesUtility.UserLookupDelimitString, \"g\");\r\n                    // Update the field value\r\n                    fieldValue = ctx.CurrentFieldValue\r\n                        .replace(regExp, \"; \")\r\n                        .replace(/^; /g, \"\")\r\n                        .replace(/; $/g, \"\");\r\n                    break;\r\n                case \"Note\":\r\n                    // Replace the return characters\r\n                    fieldValue = \"<div>\" + ctx.CurrentFieldValue.replace(/\\n/g, \"<br />\") + \"</div>\";\r\n                    break;\r\n                case \"User\":\r\n                case \"UserMulti\":\r\n                    for (var i = 0; i < ctx.CurrentFieldValue.length; i++) {\r\n                        var userValue = ctx.CurrentFieldValue[i];\r\n                        // Add the user value\r\n                        fieldValue +=\r\n                            // User Lookup ID\r\n                            userValue.EntityData.SPUserID +\r\n                                // Delimiter\r\n                                mapper_1.SPTypes.ClientTemplatesUtility.UserLookupDelimitString +\r\n                                // User Lookup Value\r\n                                userValue.DisplayText +\r\n                                // Optional Delimiter\r\n                                ((i == ctx.CurrentFieldValue.length - 1 ? \"\" : mapper_1.SPTypes.ClientTemplatesUtility.UserLookupDelimitString));\r\n                    }\r\n                    break;\r\n            }\r\n            ;\r\n            // Update the current field value\r\n            ctx.CurrentFieldValue = fieldValue;\r\n        }\r\n        // Determine the control mode\r\n        var controlMode = mapper_1.SPTypes.ControlMode.Display;\r\n        if (requireValueFl && (fieldValue == null || fieldValue == \"\")) {\r\n            // Inherit the control mode\r\n            controlMode = ctx.ControlMode;\r\n        }\r\n        // Return the display value of the field\r\n        return exports.JSLink.renderField(ctx, field, controlMode);\r\n    },\r\n    /**\r\n     * Disable quick edit for the specified field.\r\n     * @param ctx - The client context.\r\n     * @param field - The field to disable edit.\r\n     */\r\n    disableQuickEdit: function (ctx, field) {\r\n        // Ensure we are in grid edit mode\r\n        if (ctx.inGridMode) {\r\n            // Disable editing for this field\r\n            field.AllowGridEditing = false;\r\n            return \"\";\r\n        }\r\n        // Return the default field value html\r\n        return exports.JSLink.renderField(ctx, field);\r\n    },\r\n    /**\r\n     * Returns the list view.\r\n     * @param ctx - The client context.\r\n     */\r\n    getListView: function (ctx) {\r\n        // Get the webpart\r\n        var wp = exports.JSLink.getWebPart(ctx);\r\n        if (wp) {\r\n            // Find the list form table\r\n            wp = wp.querySelector(\".ms-formtable\");\r\n        }\r\n        // Return the list view\r\n        return wp;\r\n    },\r\n    /**\r\n     * Returns the list view items.\r\n     * @param ctx - The client context.\r\n     */\r\n    getListViewItems: function (ctx) {\r\n        // Return the list view items\r\n        return ctx.ListData ? ctx.ListData.Row : [];\r\n    },\r\n    /**\r\n     * Returns the selected list view items\r\n     */\r\n    getListViewSelectedItems: function () {\r\n        // Return the selected items\r\n        return lib_1.ContextInfo.window[\"SP\"].ListOperation.Selection.getSelectedItems();\r\n    },\r\n    /**\r\n     * Returns the webpart containing the JSLink field/form/view.\r\n     * @param ctx - The client context.\r\n     */\r\n    getWebPart: function (ctx) {\r\n        // Return the webpart\r\n        return lib_1.ContextInfo.document.querySelector(\"#WebPart\" + (ctx.FormUniqueId || ctx.wpq));\r\n    },\r\n    /**\r\n     * Hides the specified field.\r\n     * @param ctx - The client context.\r\n     * @param field - The field to hide.\r\n     */\r\n    hideField: function (ctx, field) {\r\n        // Ensure the hide event has been created\r\n        if (!exports.JSLink._hideEventFl) {\r\n            // Set the flag\r\n            exports.JSLink._hideEventFl = true;\r\n            // Create the event\r\n            lib_1.ContextInfo.window.addEventListener(\"load\", function () {\r\n                // Query for the elements to hide\r\n                var fieldElements = lib_1.ContextInfo.document.querySelectorAll(\".hide-field\");\r\n                for (var _i = 0, fieldElements_1 = fieldElements; _i < fieldElements_1.length; _i++) {\r\n                    var fieldElement = fieldElements_1[_i];\r\n                    // Get the parent row\r\n                    var parentRow = fieldElement.parentNode && fieldElement.parentNode.parentNode ? fieldElement.parentNode.parentNode : null;\r\n                    if (parentRow) {\r\n                        // Ensure the parent row exists\r\n                        if (fieldElement.parentNode.getAttribute(\"data-field-name\") != parentRow.getAttribute(\"data-field-name\")) {\r\n                            // Find the parent row\r\n                            while (parentRow && parentRow.nodeName.toLowerCase() != \"tr\") {\r\n                                // Update the parent node\r\n                                parentRow = parentRow.parentNode;\r\n                            }\r\n                        }\r\n                        // Hide the parent row\r\n                        if (parentRow) {\r\n                            parentRow.style.display = \"none\";\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n    /**\r\n     * Removes the field and html from the page.\r\n     * @param ctx - The client context.\r\n     * @param field - The field to remove.\r\n     */\r\n    removeField: function (ctx, field) {\r\n        // Hide the field\r\n        exports.JSLink.hideField(ctx, field);\r\n        // Return an empty element\r\n        return \"<div class='hide-field'></div>\";\r\n    },\r\n    /**\r\n     * Method to render the default html for a field.\r\n     * @param ctx - The client context.\r\n     * @param field - The form field.\r\n     * @param formType - The form type. (Display, Edit, New or View)\r\n     */\r\n    renderField: function (ctx, field, formType) {\r\n        // Determine the field type\r\n        var fieldType = field ? field.Type : (ctx.CurrentFieldSchema ? ctx.CurrentFieldSchema.Type : null);\r\n        // Ensure the form type is set\r\n        formType = formType ? formType : ctx.ControlMode;\r\n        // Ensure a field to method mapper exists\r\n        if (exports.JSLink._fieldToMethodMapper[fieldType] && exports.JSLink._fieldToMethodMapper[fieldType][formType]) {\r\n            // Return the default html for this field\r\n            var defaultHtml = exports.JSLink._fieldToMethodMapper[fieldType][formType](ctx);\r\n            if (defaultHtml) {\r\n                return defaultHtml;\r\n            }\r\n        }\r\n        // Set the field renderer based on the field type\r\n        var field = ctx.CurrentFieldSchema;\r\n        var fieldRenderer = null;\r\n        switch (field.Type) {\r\n            case \"AllDayEvent\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"AllDayEventFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Attachments\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"AttachmentFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"BusinessData\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"BusinessDataFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Computed\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"ComputedFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"CrossProjectLink\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"ProjectLinkFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Currency\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"NumberFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"DateTime\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"DateTimeFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Lookup\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"LookupFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"LookupMulti\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"LookupFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Note\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"NoteFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Number\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"NumberFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Recurrence\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"RecurrenceFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"Text\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"TextFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"URL\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"UrlFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"User\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"UserFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"UserMulti\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"UserFieldRenderer\"](field.Name);\r\n                break;\r\n            case \"WorkflowStatus\":\r\n                fieldRenderer = new lib_1.ContextInfo.window[\"RawFieldRenderer\"](field.Name);\r\n                break;\r\n        }\r\n        ;\r\n        // Get the current item\r\n        var currentItem = ctx.CurrentItem || ctx.ListData.Items[0];\r\n        // Return the item's field value html\r\n        return fieldRenderer ? fieldRenderer.RenderField(ctx, field, currentItem, ctx.ListSchema) : currentItem[field.Name];\r\n    }\r\n};\r\n//# sourceMappingURL=jslink.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/jslink.js\n// module id = 912\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\nvar parse_1 = require(\"./parse\");\r\n/**\r\n * List Form\r\n */\r\nvar _ListForm = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n    */\r\n    function _ListForm(props) {\r\n        var _this = this;\r\n        this._cacheData = null;\r\n        this._info = null;\r\n        this._props = null;\r\n        this._resolve = null;\r\n        // Method to load the list data\r\n        this.load = function () {\r\n            // Clear the information\r\n            _this._info = {\r\n                item: _this._props.item,\r\n                query: _this._props.query || {}\r\n            };\r\n            // Load the data from cache\r\n            _this.loadFromCache();\r\n            // Load the list data\r\n            _this.loadListData().then(function () {\r\n                // See if the fields have been defined\r\n                if (_this._props.fields) {\r\n                    // Process the fields\r\n                    _this.processFields();\r\n                    // Load the item data\r\n                    _this.loadItem();\r\n                }\r\n                else {\r\n                    // Load the content type\r\n                    _this.loadDefaultContentType();\r\n                }\r\n            });\r\n        };\r\n        // Method to load the default content type\r\n        this.loadDefaultContentType = function () {\r\n            // See if the content type info exists\r\n            if (_this._cacheData && _this._cacheData.ct) {\r\n                // Try to parse the data\r\n                try {\r\n                    // Parse the content type\r\n                    var ct = parse_1.parse(_this._cacheData.ct);\r\n                    // Load the default fields\r\n                    _this.loadDefaultFields(ct.results[0]);\r\n                    return;\r\n                }\r\n                catch (_a) {\r\n                    // Clear the cache data\r\n                    sessionStorage.removeItem(_this._props.cacheKey);\r\n                }\r\n            }\r\n            // Load the content types\r\n            _this._info.list.ContentTypes()\r\n                .query({\r\n                Expand: [\"FieldLinks\"],\r\n                Top: 1\r\n            })\r\n                .execute(function (ct) {\r\n                // See if we are storing data in cache\r\n                if (_this._props.cacheKey) {\r\n                    // Update the cache data\r\n                    _this._cacheData = _this._cacheData || {};\r\n                    _this._cacheData.ct = ct.stringify();\r\n                    // Update the cache\r\n                    sessionStorage.setItem(_this._props.cacheKey, JSON.stringify(_this._cacheData));\r\n                }\r\n                // Resolve the promise\r\n                _this.loadDefaultFields(ct.results[0]);\r\n            });\r\n        };\r\n        // Method to load the default fields\r\n        this.loadDefaultFields = function (ct) {\r\n            var fields = ct ? ct.FieldLinks.results : [];\r\n            var formFields = {};\r\n            // Parse the field links\r\n            for (var i = 0; i < fields.length; i++) {\r\n                var fieldLink = fields[i];\r\n                // Get the field\r\n                var field = _this._info.fields[fieldLink.Name];\r\n                if (field) {\r\n                    // Skip the content type field\r\n                    if (field.InternalName == \"ContentType\") {\r\n                        continue;\r\n                    }\r\n                    // Skip hidden fields\r\n                    if (field.Hidden || fieldLink.Hidden) {\r\n                        continue;\r\n                    }\r\n                    // Save the form field\r\n                    formFields[field.InternalName] = field;\r\n                }\r\n            }\r\n            // Update the fields\r\n            _this._info.fields = formFields;\r\n            // Load the item data\r\n            _this.loadItem();\r\n        };\r\n        // Method to load the field data\r\n        this.loadFieldData = function (fields) {\r\n            // Clear the fields\r\n            _this._info.fields = {};\r\n            // Parse the fields\r\n            for (var i = 0; i < fields.results.length; i++) {\r\n                var field = fields.results[i];\r\n                // Save the field\r\n                _this._info.fields[field.InternalName] = field;\r\n            }\r\n        };\r\n        // Method to load the data from cache\r\n        this.loadFromCache = function () {\r\n            // See if we are loading from cache\r\n            if (_this._props.cacheKey) {\r\n                // Get the data\r\n                var data = sessionStorage.getItem(_this._props.cacheKey);\r\n                if (data) {\r\n                    // Try to parse the data\r\n                    try {\r\n                        // Set the cache data\r\n                        _this._cacheData = JSON.parse(data);\r\n                        // Update the list information\r\n                        _this._info = _this._info || {};\r\n                        _this._info.list = parse_1.parse(_this._cacheData.list);\r\n                        // Load the field data\r\n                        _this.loadFieldData(parse_1.parse(_this._cacheData.fields));\r\n                    }\r\n                    catch (_a) {\r\n                        // Clear the cache data\r\n                        sessionStorage.removeItem(_this._props.cacheKey);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        // Method to load the item\r\n        this.loadItem = function () {\r\n            // See if the item already exist\r\n            if (_this._info.item) {\r\n                // Resolve the promise\r\n                _this._resolve(_this._info);\r\n            }\r\n            else if (_this._props.itemId > 0) {\r\n                // Default the select query to get all the fields by default\r\n                _this._info.query = _this._props.query || {};\r\n                _this._info.query.Select = _this._info.query.Select || [\"*\"];\r\n                // See if we are loading the attachments\r\n                if (_this._props.loadAttachments) {\r\n                    // Expand the attachment files collection\r\n                    _this._info.query.Expand = _this._info.query.Expand || [];\r\n                    _this._info.query.Expand.push(\"AttachmentFiles\");\r\n                    // Select the attachment files\r\n                    _this._info.query.Select.push(\"Attachments\");\r\n                    _this._info.query.Select.push(\"AttachmentFiles\");\r\n                }\r\n                // Get the list item\r\n                _this._info.list.Items(_this._props.itemId)\r\n                    .query(_this._info.query)\r\n                    .execute(function (item) {\r\n                    // Save the attachments\r\n                    _this._info.attachments = item.AttachmentFiles.results;\r\n                    // Save the item\r\n                    _this._info.item = item;\r\n                    // Resolve the promise\r\n                    _this._resolve(_this._info);\r\n                });\r\n            }\r\n            else {\r\n                // Resolve the promise\r\n                _this._resolve(_this._info);\r\n            }\r\n        };\r\n        // Method to load the list data\r\n        this.loadListData = function () {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // See if the list & fields already exist\r\n                if (_this._info.list && _this._info.fields) {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                    return;\r\n                }\r\n                // Get the web\r\n                var list = (new lib_1.Web(_this._props.webUrl))\r\n                    .Lists(_this._props.listName)\r\n                    .execute(function (list) {\r\n                    // Save the list\r\n                    _this._info.list = list;\r\n                });\r\n                // Load the fields\r\n                list.Fields()\r\n                    .execute(function (fields) {\r\n                    // See if we are caching the data\r\n                    if (_this._props.cacheKey) {\r\n                        // Update the cache\r\n                        _this._cacheData = _this._cacheData || {};\r\n                        _this._cacheData.fields = fields.stringify();\r\n                        _this._cacheData.list = _this._info.list.stringify();\r\n                        // Cache the data\r\n                        sessionStorage.setItem(_this._props.cacheKey, JSON.stringify(_this._cacheData));\r\n                    }\r\n                    // Load the field data\r\n                    _this.loadFieldData(fields);\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            });\r\n        };\r\n        // Method to process the fields\r\n        this.processFields = function () {\r\n            var formFields = {};\r\n            // Parse the fields provided\r\n            for (var i = 0; i < _this._props.fields.length; i++) {\r\n                var field = _this._info.fields[_this._props.fields[i]];\r\n                // Ensure the field exists\r\n                if (field) {\r\n                    // Save the field\r\n                    formFields[field.InternalName] = field;\r\n                }\r\n            }\r\n            // Update the fields\r\n            _this._info.fields = formFields;\r\n        };\r\n        // Save the properties\r\n        this._props = props || {};\r\n        this._props.fields = this._props.fields;\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Save the resolve method\r\n            _this._resolve = resolve;\r\n            // Load the list data\r\n            _this.load();\r\n        });\r\n    }\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to create an instance of the list form\r\n    _ListForm.create = function (props) {\r\n        // Return an instance of the list form\r\n        return new _ListForm(props);\r\n    };\r\n    // Method to load the item attachments\r\n    _ListForm.loadAttachments = function (info) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Ensure the item id exists\r\n            var itemId = info.item ? info.item.Id : info.itemId;\r\n            if (itemId > 0) {\r\n                // Get the web\r\n                (new lib_1.Web(info.webUrl))\r\n                    .Lists(info.listName)\r\n                    .Items(itemId)\r\n                    .AttachmentFiles()\r\n                    .execute(function (attachments) {\r\n                    // Resolve the promise\r\n                    resolve(attachments.results || []);\r\n                });\r\n            }\r\n            else {\r\n                // Resolve the promise\r\n                resolve([]);\r\n            }\r\n        });\r\n    };\r\n    // Method to refresh an item\r\n    _ListForm.refreshItem = function (info) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the item\r\n            info.list.Items(info.item.Id).query(info.query).execute(function (item) {\r\n                // Update the item\r\n                info.item = item;\r\n                // Resolve the promise\r\n                resolve(info);\r\n            });\r\n        });\r\n    };\r\n    // Method to remove attachments from an item\r\n    _ListForm.prototype.removeAttachments = function (info, attachments) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var web = new lib_1.Web(info.webUrl);\r\n            // Parse the attachments\r\n            for (var i = 0; i < attachments.length; i++) {\r\n                var attachment = attachments[i];\r\n                // Get the file\r\n                web.getFileByServerRelativeUrl(attachment.ServerRelativeUrl)\r\n                    .delete()\r\n                    .execute(true);\r\n            }\r\n            // Wait for the requests to complete\r\n            web.done(function () {\r\n                // Resolve the request\r\n                resolve();\r\n            });\r\n        });\r\n    };\r\n    // Method to save attachments to an existing item\r\n    _ListForm.saveAttachments = function (info, attachmentInfo) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            var itemId = info.item ? info.item.Id : info.itemId;\r\n            if (itemId > 0) {\r\n                // Get the web\r\n                var attachments = (new lib_1.Web(info.webUrl))\r\n                    .Lists(info.listName)\r\n                    .Items(itemId)\r\n                    .AttachmentFiles();\r\n                // Parse the attachment information\r\n                for (var i = 0; i < attachmentInfo.length; i++) {\r\n                    var attachment = attachmentInfo[i];\r\n                    // Add the attachment\r\n                    attachments.add(attachment.name, attachment.data).execute(true);\r\n                }\r\n                // Wait for the requests to complete\r\n                attachments.done(function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Resolve the promise\r\n                    resolve(args);\r\n                });\r\n            }\r\n            else {\r\n                // Resolve the promise\r\n                resolve();\r\n            }\r\n        });\r\n    };\r\n    // Method to save a new or existing item\r\n    _ListForm.saveItem = function (info, formValues) {\r\n        var _this = this;\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if this is an existing item\r\n            if (info.item && info.item.update) {\r\n                // Update the item\r\n                info.item.update(formValues).execute(function (response) {\r\n                    // Refresh the item\r\n                    _this.refreshItem(info).then(function (info) {\r\n                        // Resolve the promise\r\n                        resolve(info);\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                // Set the metadata type\r\n                formValues[\"__metadata\"] = { type: info.list.ListItemEntityTypeFullName };\r\n                // Add the item\r\n                info.list.Items().add(formValues)\r\n                    .execute(function (item) {\r\n                    // Update the info\r\n                    info.item = item;\r\n                    // Refresh the item\r\n                    _this.refreshItem(info).then(function (info) {\r\n                        // Resolve the promise\r\n                        resolve(info);\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n    return _ListForm;\r\n}());\r\nexports.ListForm = _ListForm;\r\n//# sourceMappingURL=listForm.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/listForm.js\n// module id = 913\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\nvar __1 = require(\"..\");\r\nvar taxonomy_1 = require(\"./taxonomy\");\r\n/**\r\n * List Form Field\r\n */\r\nvar _ListFormField = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function _ListFormField(props) {\r\n        var _this = this;\r\n        this._fieldInfo = null;\r\n        this._resolve = null;\r\n        // Load the field\r\n        this.load = function () {\r\n            // See if the field exists\r\n            if (_this._fieldInfo.field) {\r\n                // Process the field\r\n                _this.processField();\r\n            }\r\n            else {\r\n                // Get the web\r\n                (new lib_1.Web(_this._fieldInfo.webUrl))\r\n                    .Lists(_this._fieldInfo.listName)\r\n                    .Fields()\r\n                    .getByInternalNameOrTitle(_this._fieldInfo.name)\r\n                    .execute(function (field) {\r\n                    // Save the field\r\n                    _this._fieldInfo.field = field;\r\n                    // Process the field\r\n                    _this.processField();\r\n                });\r\n            }\r\n        };\r\n        // Method to proces the field and save its information\r\n        this.processField = function () {\r\n            // Update the field information\r\n            _this._fieldInfo.defaultValue = _this._fieldInfo.field.DefaultValue;\r\n            _this._fieldInfo.readOnly = _this._fieldInfo.field.ReadOnlyField;\r\n            _this._fieldInfo.required = _this._fieldInfo.field.Required ? true : false;\r\n            _this._fieldInfo.title = _this._fieldInfo.field.Title;\r\n            _this._fieldInfo.type = _this._fieldInfo.field.FieldTypeKind;\r\n            _this._fieldInfo.typeAsString = _this._fieldInfo.field.TypeAsString;\r\n            // Update the field info, based on the type\r\n            switch (_this._fieldInfo.type) {\r\n                // Choice\r\n                case __1.SPTypes.FieldType.Choice:\r\n                case __1.SPTypes.FieldType.MultiChoice:\r\n                    var choices = _this._fieldInfo.field.Choices;\r\n                    _this._fieldInfo.choices = (choices ? choices.results : null) || [];\r\n                    _this._fieldInfo.multi = _this._fieldInfo.type == __1.SPTypes.FieldType.MultiChoice;\r\n                    break;\r\n                // Date/Time\r\n                case __1.SPTypes.FieldType.DateTime:\r\n                    var fldDate = _this._fieldInfo.field;\r\n                    _this._fieldInfo.showTime = fldDate.DisplayFormat == __1.SPTypes.DateFormat.DateTime;\r\n                    break;\r\n                // Lookup\r\n                case __1.SPTypes.FieldType.Lookup:\r\n                    var fldLookup = _this._fieldInfo.field;\r\n                    _this._fieldInfo.lookupField = fldLookup.LookupField;\r\n                    _this._fieldInfo.lookupListId = fldLookup.LookupList;\r\n                    _this._fieldInfo.lookupWebId = fldLookup.LookupWebId;\r\n                    _this._fieldInfo.multi = fldLookup.AllowMultipleValues;\r\n                    break;\r\n                // Number\r\n                case __1.SPTypes.FieldType.Number:\r\n                    var fldNumber = _this._fieldInfo.field;\r\n                    var startIdx = fldNumber.SchemaXml.indexOf('Decimals=\"') + 10;\r\n                    _this._fieldInfo.decimals = startIdx > 10 ? parseInt(fldNumber.SchemaXml.substr(startIdx, fldNumber.SchemaXml.substr(startIdx).indexOf('\"'))) : 0;\r\n                    _this._fieldInfo.maxValue = fldNumber.MaximumValue;\r\n                    _this._fieldInfo.minValue = fldNumber.MinimumValue;\r\n                    _this._fieldInfo.showAsPercentage = fldNumber.SchemaXml.indexOf('Percentage=\"TRUE\"') > 0;\r\n                    break;\r\n                // Note\r\n                case __1.SPTypes.FieldType.Note:\r\n                    var fldNote = _this._fieldInfo.field;\r\n                    _this._fieldInfo.multiline = true;\r\n                    _this._fieldInfo.richText = fldNote.RichText;\r\n                    _this._fieldInfo.rows = fldNote.NumberOfLines;\r\n                    break;\r\n                // Text\r\n                case __1.SPTypes.FieldType.Text:\r\n                    _this._fieldInfo.multiline = false;\r\n                    _this._fieldInfo.richText = false;\r\n                    _this._fieldInfo.rows = 1;\r\n                    break;\r\n                // User\r\n                case __1.SPTypes.FieldType.User:\r\n                    var fldUser = _this._fieldInfo.field;\r\n                    _this._fieldInfo.allowGroups = fldUser.SelectionMode == __1.SPTypes.FieldUserSelectionType.PeopleAndGroups;\r\n                    _this._fieldInfo.multi = fldUser.AllowMultipleValues;\r\n                    break;\r\n                // Default\r\n                default:\r\n                    // See if this is an MMS field\r\n                    if (_this._fieldInfo.typeAsString.startsWith(\"TaxonomyFieldType\")) {\r\n                        var fldMMS = _this._fieldInfo.field;\r\n                        _this._fieldInfo.multi = fldMMS.AllowMultipleValues;\r\n                        _this._fieldInfo.termId = fldMMS.IsAnchorValid ? fldMMS.AnchorId : fldMMS.TermSetId;\r\n                        _this._fieldInfo.termSetId = fldMMS.TermSetId;\r\n                        _this._fieldInfo.termStoreId = fldMMS.SspId;\r\n                    }\r\n                    break;\r\n            }\r\n            // Resolve the promise\r\n            _this._resolve(_this._fieldInfo);\r\n        };\r\n        // Save the properties and field information\r\n        this._fieldInfo = props || {};\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Save the resolve method\r\n            _this._resolve = resolve;\r\n            // See if the field exists\r\n            if (_this._fieldInfo.field) {\r\n                // Process the field\r\n                _this.processField();\r\n            }\r\n            else {\r\n                // Load the field\r\n                _this.load();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Methods\r\n     */\r\n    // Method to create an instance of the list form field\r\n    _ListFormField.create = function (props) {\r\n        // Return an instance of the list form field\r\n        return new _ListFormField(props);\r\n    };\r\n    // Method to load the lookup data\r\n    _ListFormField.loadLookupData = function (info, queryTop) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Get the current site collection\r\n            (new lib_1.Site())\r\n                .openWebById(info.lookupWebId)\r\n                .execute(function (web) {\r\n                // Get the list\r\n                web.Lists()\r\n                    .getById(info.lookupListId)\r\n                    .Items()\r\n                    .query({\r\n                    GetAllItems: true,\r\n                    Select: [\"ID\", info.lookupField],\r\n                    Top: queryTop > 0 && queryTop <= 5000 ? queryTop : 500\r\n                })\r\n                    .execute(function (items) {\r\n                    // Resolve the promise\r\n                    resolve(items.results);\r\n                });\r\n            });\r\n        });\r\n    };\r\n    // Method to load the mms data\r\n    _ListFormField.loadMMSData = function (info) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the term set\r\n            taxonomy_1.Taxonomy.getTermSetById(info.termStoreId, info.termSetId).then(function (termSet) {\r\n                // Get the target root term\r\n                var root = taxonomy_1.Taxonomy.findById(termSet, info.termId);\r\n                // See if the root node doesn't exist\r\n                if (root == null) {\r\n                    // Set the root to the term set\r\n                    root = taxonomy_1.Taxonomy.findById(termSet, info.termSetId);\r\n                }\r\n                // Resolve the request\r\n                resolve(taxonomy_1.Taxonomy.toArray(root));\r\n            });\r\n        });\r\n    };\r\n    // Method to load the mms value field\r\n    _ListFormField.loadMMSValueField = function (info) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if we are allowing multiple values\r\n            if (info.multi) {\r\n                // Get the web\r\n                (new lib_1.Web(info.webUrl))\r\n                    .Lists(info.listName)\r\n                    .Fields()\r\n                    .getByInternalNameOrTitle(info.name + \"_0\")\r\n                    .execute(function (field) {\r\n                    // See if the field exists\r\n                    if (field.existsFl) {\r\n                        // Resolve the promise\r\n                        resolve(field);\r\n                    }\r\n                    else {\r\n                        // Log\r\n                        console.log(\"[gd-sprest] Unable to find the hidden value field for '\" + info.name + \"'.\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // Resolve the promise\r\n                resolve();\r\n            }\r\n        });\r\n    };\r\n    return _ListFormField;\r\n}());\r\nexports.ListFormField = _ListFormField;\r\n//# sourceMappingURL=listFormField.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/listFormField.js\n// module id = 914\n// module chunks = 0","\"use strict\";\r\nvar _this = this;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\n/**\r\n * Loader\r\n */\r\nexports.Loader = {\r\n    // Flag to determine if the SharePoint core libraries have been loaded\r\n    loaded: false,\r\n    // Method to wait for the SharePoint core libraries to be loaded\r\n    waitForSPLibs: function (callback, timeout, loadLibraries) {\r\n        var counter = 0;\r\n        // Default the flag to load the libraries\r\n        loadLibraries = typeof (loadLibraries) === \"boolean\" ? loadLibraries : false;\r\n        // Default the timeout (5 seconds)\r\n        timeout = typeof (timeout) === \"number\" ? timeout : 2500;\r\n        // Determine the number of iterations\r\n        var maxLoops = timeout / 25;\r\n        // See if the flag has already been set\r\n        if (_this.loaded) {\r\n            // Execute the callback\r\n            callback();\r\n            return;\r\n        }\r\n        // See if we are loading the libraries\r\n        if (loadLibraries) {\r\n            // Parse the files to load\r\n            [\"MicrosoftAjax.js\", \"init.js\", \"sp.runtime.js\", \"sp.js\", \"sp.core.js\", \"core.js\"].every(function (fileName) {\r\n                // Create the script element\r\n                var el = lib_1.ContextInfo.document.createElement(\"script\");\r\n                // Set the properties\r\n                el.setAttribute(\"src\", \"/_layouts/15/\" + fileName);\r\n                el.setAttribute(\"type\", \"text/javascript\");\r\n                // Add the element to the head\r\n                lib_1.ContextInfo.document.head.appendChild(el);\r\n                // Continue the loop\r\n                return true;\r\n            });\r\n        }\r\n        // Loop until the libraries are loaded\r\n        var intervalId = setInterval(function () {\r\n            var maxLoopFl = ++counter > maxLoops;\r\n            // See if the page context exists or if we have hit the max attempts\r\n            if (lib_1.ContextInfo.existsFl || maxLoopFl) {\r\n                // Stop the loop\r\n                clearInterval(intervalId);\r\n                // Execute the callback\r\n                callback();\r\n            }\r\n        }, 25);\r\n    }\r\n};\r\n//# sourceMappingURL=loader.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/loader.js\n// module id = 915\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Ribbon Link\r\n */\r\nexports.RibbonLink = function (props) {\r\n    var link = null;\r\n    // Default the append flag\r\n    var appendFl = typeof (props.appendFl) === \"boolean\" ? props.appendFl : false;\r\n    // Get the ribbon top bar\r\n    var topBar = document.querySelector(\"#RibbonContainer-TabRowRight\");\r\n    if (topBar) {\r\n        // Get the link\r\n        link = topBar.querySelector(\"#\" + props.id);\r\n        if (link == null) {\r\n            // Create the link\r\n            link = document.createElement(\"a\");\r\n            link.className = \"ms-promotedActionButton \" + (props.className || \"\");\r\n            link.href = props.href ? props.href : \"javascript:void()\";\r\n            link.innerHTML = \"<span class='ms-promotedActionButton-text'>\" + props.title + \"</span>\";\r\n            link.id = props.id;\r\n            link.onclick = props.onClick;\r\n            // Add the link\r\n            appendFl ? topBar.appendChild(link) : topBar.insertBefore(link, topBar.firstChild);\r\n        }\r\n    }\r\n    // Return the link\r\n    return link;\r\n};\r\n//# sourceMappingURL=ribbonLink.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/ribbonLink.js\n// module id = 916\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Suite Bar Link\r\n */\r\nexports.SuiteBarLink = function (props) {\r\n    var link = null;\r\n    // Default the append flag\r\n    var appendFl = typeof (props.appendFl) === \"boolean\" ? props.appendFl : true;\r\n    // Get the suite bar top links\r\n    var topLinks = document.querySelector(\"#suiteLinksBox > ul\");\r\n    if (topLinks) {\r\n        // Query for the link, and ensure it exists\r\n        link = topLinks.querySelector(\"#\" + props.id);\r\n        if (link == null) {\r\n            // Create a list link\r\n            link = document.createElement(\"a\");\r\n            link.className = \"ms-core-suiteLink-a \" + (props.className || \"\");\r\n            link.href = props.href ? props.href : \"javascript:void()\";\r\n            link.id = props.id;\r\n            link.innerHTML = props.title;\r\n            link.onclick = props.onClick;\r\n            // Create the suite bar link\r\n            var sbLink = document.createElement(\"li\");\r\n            sbLink.className = \"ms-core-suiteLink\";\r\n            sbLink.appendChild(link);\r\n            // Append the item to the list\r\n            appendFl ? topLinks.appendChild(sbLink) : topLinks.insertBefore(sbLink, topLinks.firstChild);\r\n        }\r\n    }\r\n    // Return the link\r\n    return link;\r\n};\r\n//# sourceMappingURL=sbLink.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/sbLink.js\n// module id = 917\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lib_1 = require(\"../lib\");\r\n/**\r\n * Web Part\r\n */\r\nvar _WebPart = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     * @param props - The webpart properties.\r\n     */\r\n    function _WebPart(props) {\r\n        var _this = this;\r\n        this._props = null;\r\n        this._wp = null;\r\n        /**\r\n         * Method to add the help link to a script part editor.\r\n         * @wpId - The webpart id.\r\n         */\r\n        this.addHelpLink = function () {\r\n            // Ensure the help properties exist\r\n            if (_this._props.helpProps) {\r\n                // Get the webpart's \"Snippet\"\r\n                var link = document.querySelector(\"div[webpartid='\" + _this._wp.wpId + \"'] a[title='Edit Snippet']\");\r\n                if (link) {\r\n                    // Create the help link\r\n                    var helpLink = document.createElement(\"a\");\r\n                    helpLink.href = _this._props.helpProps.url || \"#\";\r\n                    helpLink.style.paddingLeft = \"10px\";\r\n                    helpLink.setAttribute(\"role\", \"button\");\r\n                    helpLink.title = _this._props.helpProps.title || \"Help\";\r\n                    helpLink.innerHTML = \"<span class='ms-metadata'>\" + helpLink.title + \"</span>\";\r\n                    helpLink.target = \"_blank\";\r\n                    // Append the link\r\n                    link.parentElement.appendChild(helpLink);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Method to get the webpart\r\n         */\r\n        this.getWebPart = function (wpId) {\r\n            // Return a promise\r\n            return new Promise(function (resolve, reject) {\r\n                // Get the current context\r\n                var context = SP.ClientContext.get_current();\r\n                // Get the webpart from the current page\r\n                var page = context.get_web().getFileByServerRelativeUrl(lib_1.ContextInfo.serverRequestPath);\r\n                var wpMgr = page.getLimitedWebPartManager(SP.WebParts.PersonalizationScope.shared);\r\n                var wpDef = wpMgr.get_webParts().getById(wpId);\r\n                var wp = wpDef.get_webPart();\r\n                context.load(wp, \"Properties\");\r\n                // Execute the request\r\n                context.executeQueryAsync(\r\n                // Success\r\n                function () {\r\n                    // Resolve the promise\r\n                    resolve({\r\n                        Context: context,\r\n                        Properties: wp.get_properties(),\r\n                        WebPart: wp,\r\n                        WebPartDefinition: wpDef,\r\n                        WebPartId: wp.get_id()\r\n                    });\r\n                }, \r\n                // Error\r\n                function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Reject the promise\r\n                    reject(args[1] ? args[1].get_message() : \"\");\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Method to get the webpart id for a specified element\r\n         * @param el - The target element.\r\n         */\r\n        this.getWebPartId = function (el) {\r\n            // Loop until we find the webpart id\r\n            while (el) {\r\n                // See if this element contains the webpart id\r\n                var wpId = el.getAttribute(\"webpartid\");\r\n                if (wpId) {\r\n                    // Return the webpart id\r\n                    return wpId;\r\n                }\r\n                // Check the parent\r\n                el = el.parentElement;\r\n            }\r\n            // Unable to detect\r\n            return \"\";\r\n        };\r\n        /**\r\n         * Method to get the webpart information\r\n         */\r\n        this.getWebPartInfo = function () {\r\n            var targetInfo = {\r\n                cfg: null,\r\n                el: null,\r\n                wpId: null\r\n            };\r\n            // Ensure the element id exists\r\n            if (_this._props.elementId) {\r\n                // Get the webpart elements\r\n                var elements = document.querySelectorAll(\"#\" + _this._props.elementId);\r\n                for (var i = 0; i < elements.length; i++) {\r\n                    var elWebPart = elements[i];\r\n                    // See if we have already configured this element\r\n                    if (elWebPart.getAttribute(\"data-isConfigured\")) {\r\n                        continue;\r\n                    }\r\n                    // Get the webpart id\r\n                    var wpId = _this.getWebPartId(elWebPart);\r\n                    if (wpId) {\r\n                        // See if the configuration element exists\r\n                        var elCfg = _this._props.cfgElementId ? elWebPart.parentElement.querySelector(\"#\" + _this._props.cfgElementId) : null;\r\n                        if (elCfg) {\r\n                            try {\r\n                                // Parse the configuration\r\n                                var cfg = JSON.parse(elCfg.innerText.trim());\r\n                                // See if the webaprt id exists\r\n                                if (cfg.WebPartId) {\r\n                                    // See if it's for this webpart\r\n                                    if (cfg.WebPartId == wpId) {\r\n                                        // Set the target information\r\n                                        targetInfo = {\r\n                                            cfg: cfg,\r\n                                            el: elWebPart,\r\n                                            wpId: wpId\r\n                                        };\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // Set the target information\r\n                                    targetInfo = {\r\n                                        cfg: {\r\n                                            WebPartId: wpId\r\n                                        },\r\n                                        el: elWebPart,\r\n                                        wpId: wpId\r\n                                    };\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (ex) {\r\n                                // Set the target information\r\n                                targetInfo = {\r\n                                    cfg: {\r\n                                        WebPartId: wpId\r\n                                    },\r\n                                    el: elWebPart,\r\n                                    wpId: wpId\r\n                                };\r\n                                // Log\r\n                                console.log(\"[sp-webpart] Error parsing the configuration for element '\" + _this._props.cfgElementId + \"'.\");\r\n                            }\r\n                            // Break from the loop\r\n                            break;\r\n                        }\r\n                        else {\r\n                            // Set the target information\r\n                            targetInfo = {\r\n                                cfg: {\r\n                                    WebPartId: wpId\r\n                                },\r\n                                el: elWebPart,\r\n                                wpId: wpId\r\n                            };\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                // Ensure elements were found\r\n                if (elements.length == 0) {\r\n                    // Log\r\n                    console.log(\"[sp-webpart] Error - Unable to find elements with id '\" + _this._props.elementId + \"'.\");\r\n                }\r\n            }\r\n            else {\r\n                // Log\r\n                console.log(\"[sp-webpart] The target element id is not defined.\");\r\n            }\r\n            // Ensure the target element exists\r\n            if (targetInfo.el) {\r\n                // Set the configuration flag\r\n                targetInfo.el.setAttribute(\"data-isConfigured\", \"true\");\r\n            }\r\n            // Return the target information\r\n            return targetInfo;\r\n        };\r\n        /**\r\n         * Method to detect if a page is being edited\r\n         */\r\n        this.isEditMode = function () {\r\n            var formName = MSOWebPartPageFormName ? MSOWebPartPageFormName : \"\";\r\n            // Get the form\r\n            var form = document.forms[MSOWebPartPageFormName];\r\n            if (form) {\r\n                // Get the wiki page mode\r\n                var wikiPageMode = form._wikiPageMode ? form._wikiPageMode.value : null;\r\n                // Get the webpart page mode\r\n                var wpPageMode = form.MSOLayout_InDesignMode ? form.MSOLayout_InDesignMode.value : null;\r\n                // Determine if the page is being edited\r\n                return wikiPageMode == \"Edit\" || wpPageMode == \"1\";\r\n            }\r\n            // Unable to determine\r\n            return false;\r\n        };\r\n        /**\r\n         * Method to render the webpart\r\n         */\r\n        this.render = function () {\r\n            var element = null;\r\n            // Get the webpart information\r\n            _this._wp = _this.getWebPartInfo();\r\n            if (_this._wp == null || _this._wp.el == null) {\r\n                // Log\r\n                console.log(\"[sp-webpart] The target webpart element '\" + _this._props.elementId + \"' was not found.\");\r\n                return;\r\n            }\r\n            // See if the page is being edited\r\n            var returnVal = null;\r\n            if (_this.isEditMode()) {\r\n                // Add the help link\r\n                _this.addHelpLink();\r\n                // Call the render event\r\n                if (_this._props.onRenderEdit) {\r\n                    // Execute the render edit event\r\n                    returnVal = _this._props.onRenderEdit(_this._wp);\r\n                }\r\n            }\r\n            else {\r\n                // See if the configuration is defined, but has no value\r\n                if (_this._wp.cfg || (_this._props.cfgElementId || \"\").length == 0) {\r\n                    // Execute the render edit event\r\n                    returnVal = _this._props.onRenderDisplay(_this._wp);\r\n                }\r\n                else {\r\n                    // Render a message\r\n                    _this._wp.el.innerHTML = '<h3>Please edit the page and configure the webpart.</h3>';\r\n                }\r\n            }\r\n            // See if a promise was returned\r\n            if (returnVal && returnVal.then) {\r\n                // Wait for the request to complete\r\n                returnVal.then(function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    // Execute the post render event\r\n                    _this._props.onPostRender ? _this._props.onPostRender(_this._wp) : null;\r\n                });\r\n            }\r\n            else {\r\n                // Execute the post render event\r\n                _this._props.onPostRender ? _this._props.onPostRender(_this._wp) : null;\r\n            }\r\n        };\r\n        // Set the properties\r\n        this._props = props || {};\r\n        // Add a load event\r\n        window.addEventListener(\"load\", function () {\r\n            // Render the component\r\n            _this.render();\r\n        });\r\n    }\r\n    // Method to create an instance of the webpart\r\n    _WebPart.create = function (props) {\r\n        // Return an instance of the webpart\r\n        return new _WebPart(props);\r\n    };\r\n    return _WebPart;\r\n}());\r\nexports.WebPart = _WebPart;\r\n//# sourceMappingURL=webpart.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/webpart.js\n// module id = 918\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Modal Dialog\r\n */\r\nexports.ModalDialog = {\r\n    // Closes the dialog\r\n    close: function (dialogResult) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.close(dialogResult); });\r\n    },\r\n    // Close the dialog\r\n    commonModalDialogClose: function (dialogResult, returnVal) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.commonModalDialogClose(dialogResult, returnVal); });\r\n    },\r\n    // Open a dialog\r\n    commonModalDialogOpen: function (url, options, callback, args) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.commonModalDialogOpen(url, options, callback, args); });\r\n    },\r\n    // Method to ensure the core library is loaded\r\n    load: function () {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if the class exists\r\n            if (SP && SP.UI && SP.UI.ModalDialog) {\r\n                resolve();\r\n            }\r\n            else {\r\n                // Wait for the core script to be loaded\r\n                SP.SOD.executeFunc(\"sp.js\", \"SP.UI.ModalDialog\", function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    },\r\n    // Opens a pop-up page\r\n    OpenPopUpPage: function (url, callback, width, height) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.OpenPopUpPage(url, callback, width, height); });\r\n    },\r\n    // Refreshes the page\r\n    RefreshPage: function (dialogResult) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.RefreshPage(dialogResult); });\r\n    },\r\n    // Shows a modal dialog\r\n    showModalDialog: function (options) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.showModalDialog(options); });\r\n    },\r\n    // Shows a pop-up dialog\r\n    ShowPopupDialog: function (url) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.ShowPopupDialog(url); });\r\n    },\r\n    // Shows a wait screen\r\n    showWaitScreenSize: function (title, message, callback, height, width) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.showWaitScreenSize(title, message, callback, height, width); });\r\n    },\r\n    // Shows a wait screen w/ no close button\r\n    showWaitScreenWithNoClose: function (title, message, height, width) {\r\n        // Load the library and call the method\r\n        exports.ModalDialog.load().then(function () { SP.UI.ModalDialog.showWaitScreenWithNoClose(title, message, height, width); });\r\n    }\r\n};\r\n/**\r\n * Notification\r\n */\r\nexports.Notify = {\r\n    // Adds a notification\r\n    addNotification: function (html, sticky) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the library and call the method\r\n            exports.Notify.load().then(function () { resolve(SP.UI.Notify.addNotification(html, sticky)); });\r\n        });\r\n    },\r\n    // Method to ensure the core library is loaded\r\n    load: function () {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if the class exists\r\n            if (SP && SP.UI && SP.UI.Notify) {\r\n                resolve();\r\n            }\r\n            else {\r\n                // Wait for the core script to be loaded\r\n                SP.SOD.executeFunc(\"sp.js\", \"SP.UI.Notify\", function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    },\r\n    // Removes a notification\r\n    removeNotification: function (id) {\r\n        // Load the library and call the method\r\n        exports.Notify.load().then(function () { SP.UI.Notify.removeNotification(id); });\r\n    }\r\n};\r\n/**\r\n * Status\r\n */\r\nexports.Status = {\r\n    // Adds a status\r\n    addStatus: function (title, html, prepend) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the library\r\n            exports.Status.load().then(function () {\r\n                // Add the status and resolve the promise\r\n                resolve(SP.UI.Status.addStatus(title, html, prepend));\r\n            });\r\n        });\r\n    },\r\n    // Appends a status\r\n    appendStatus: function (id, title, html) {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // Load the library\r\n            exports.Status.load().then(function () {\r\n                // Add the status and resolve the promise\r\n                resolve(SP.UI.Status.appendStatus(id, title, html));\r\n            });\r\n        });\r\n    },\r\n    // Method to ensure the core library is loaded\r\n    load: function () {\r\n        // Return a promise\r\n        return new Promise(function (resolve, reject) {\r\n            // See if the class exists\r\n            if (SP && SP.UI && SP.UI.Status) {\r\n                resolve();\r\n            }\r\n            else {\r\n                // Wait for the core script to be loaded\r\n                SP.SOD.executeFunc(\"sp.js\", \"SP.UI.Status\", function () {\r\n                    // Resolve the promise\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n    },\r\n    // Removes all status messages\r\n    removeAllStatus: function (hide) {\r\n        // Load the library and call the method\r\n        exports.Status.load().then(function () { SP.UI.Status.removeAllStatus(hide); });\r\n    },\r\n    // Removes a status\r\n    removeStatus: function (id) {\r\n        // Load the library and call the method\r\n        exports.Status.load().then(function () { SP.UI.Status.removeStatus(id); });\r\n    },\r\n    // Sets the status color\r\n    setStatusPriColor: function (id, color) {\r\n        // Load the library and call the method\r\n        exports.Status.load().then(function () { SP.UI.Status.setStatusPriColor(id, color); });\r\n    },\r\n    // Updates the status\r\n    updateStatus: function (id, html) {\r\n        // Load the library and call the method\r\n        exports.Status.load().then(function () { SP.UI.Status.updateStatus(id, html); });\r\n    }\r\n};\r\n//# sourceMappingURL=sp.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/sp.js\n// module id = 919\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/helper/types/index.js\n// module id = 920\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar helper_1 = require(\"./helper\");\r\nexports.Helper = helper_1.Types;\r\nvar mapper_1 = require(\"./mapper\");\r\nexports.SP = mapper_1.Types;\r\nvar utils_1 = require(\"./utils\");\r\nexports.Util = utils_1.Types;\r\n//# sourceMappingURL=types.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/types.js\n// module id = 921\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Helper = require(\"./helper\");\r\nvar Lib = require(\"./lib\");\r\nvar Mapper = require(\"./mapper\");\r\n/**\r\n * SharePoint REST Library\r\n */\r\nexports.$REST = {\r\n    __ver: 3.53,\r\n    ContextInfo: Lib.ContextInfo,\r\n    DefaultRequestToHostFl: false,\r\n    Helper: {\r\n        App: Helper.App,\r\n        Dependencies: Helper.Dependencies,\r\n        FieldSchemaXML: Helper.FieldSchemaXML,\r\n        JSLink: Helper.JSLink,\r\n        ListForm: Helper.ListForm,\r\n        ListFormField: Helper.ListFormField,\r\n        Loader: Helper.Loader,\r\n        parse: Helper.parse,\r\n        RibbonLink: Helper.RibbonLink,\r\n        SP: Helper.SP,\r\n        SPConfig: Helper.SPConfig,\r\n        SuiteBarLink: Helper.SuiteBarLink,\r\n        Taxonomy: Helper.Taxonomy,\r\n        WebPart: Helper.WebPart\r\n    },\r\n    List: function (listName, targetInfo) { return new Lib.List(listName, targetInfo); },\r\n    Navigation: function (url, targetInfo) { return new Lib.Navigation(url, targetInfo); },\r\n    PeopleManager: function (targetInfo) { return new Lib.PeopleManager(targetInfo); },\r\n    PeoplePicker: function (targetInfo) { return new Lib.PeoplePicker(targetInfo); },\r\n    ProfileLoader: function (targetInfo) { return new Lib.ProfileLoader(targetInfo); },\r\n    Search: function (url, targetInfo) { return new Lib.Search(url, targetInfo); },\r\n    Site: function (url, targetInfo) { return new Lib.Site(url, targetInfo); },\r\n    SPTypes: Mapper.SPTypes,\r\n    SocialFeed: Lib.SocialFeed,\r\n    UserProfile: function (targetInfo) { return new Lib.UserProfile(targetInfo); },\r\n    Utility: function (url, targetInfo) { return new Lib.Utility(url, targetInfo); },\r\n    Web: function (url, targetInfo) { return new Lib.Web(url, targetInfo); }\r\n};\r\n// See if the library doesn't exist, or is an older version\r\nvar global = Lib.ContextInfo.window.$REST;\r\nif (global == null || global.__ver == null || global.__ver < exports.$REST.__ver) {\r\n    // Set the global variable\r\n    Lib.ContextInfo.window.$REST = exports.$REST;\r\n    // Alert other scripts this library is loaded\r\n    SP && SP.SOD ? SP.SOD.notifyScriptLoadedAndExecuteWaitingJobs(\"gd-sprest.js\") : null;\r\n}\r\n//# sourceMappingURL=rest.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/gd-sprest/build/rest.js\n// module id = 922\n// module chunks = 0"],"sourceRoot":""}